(self["webpackChunk"] = self["webpackChunk"] || []).push([["/js/controllers"],{

/***/ "./assets/js/controllers/app-setting-form-controller.js":
/*!**************************************************************!*\
  !*** ./assets/js/controllers/app-setting-form-controller.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

const {
  Controller
} = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
class AppSettingForm extends Controller {
  static targets = ["submitBtn", "form"];
  submit(event) {
    event.preventDefault();
    this.formTarget.submit();
  }
  enableSubmit() {
    this.submitBtnTarget.disabled = false;
    this.submitBtnTarget.focus();
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["app-setting-form"] = AppSettingForm;

/***/ }),

/***/ "./assets/js/controllers/auto-complete-controller.js":
/*!***********************************************************!*\
  !*** ./assets/js/controllers/auto-complete-controller.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

const optionSelector = "[role='option']:not([aria-disabled='true'])";
const activeSelector = "[aria-selected='true']";
class AutoComplete extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["input", "hidden", "hiddenText", "results", "dataList", "clearBtn"];
  static classes = ["selected"];
  static values = {
    ready: Boolean,
    submitOnEnter: Boolean,
    url: String,
    minLength: Number,
    allowOther: Boolean,
    required: Boolean,
    initSelection: Object,
    delay: {
      type: Number,
      default: 300
    },
    queryParam: {
      type: String,
      default: "q"
    }
  };
  static uniqOptionId = 0;
  initialize() {
    this._selectOptions = [];
    this._datalistLoaded = false;
  }

  // Getter for the value property
  get value() {
    // if there is a hidden value return that
    if (this.hasHiddenTarget.value != "") {
      return this.hiddenTarget.value;
    } else {
      //if we allow other values return the input value
      if (this.allowOtherValue) {
        return this.inputTarget.value;
      }
      return "";
    }
  }

  // Setter for the value property
  set value(newValue) {
    //check if the new value is an object with a "value" property and "text" property
    if (typeof newValue === "object" && newValue.hasOwnProperty("value") && newValue.hasOwnProperty("text")) {
      this.inputTarget.value = newValue.text;
      this.hiddenTarget.value = newValue.value;
      this.hiddenTextTarget.value = newValue.text;
      this.clearBtnTarget.disabled = false;
      this.inputTarget.disabled = true;
      return;
    }
    //if the value matches an option set the input value to the option text
    if (newValue != "" && newValue != null) {
      let option = this._selectOptions.find(option => option.value == newValue && option.enabled != false);
      if (option) {
        this.inputTarget.value = option.text;
        this.hiddenTextTarget.value = option.text;
        this.hiddenTarget.value = option.value;
        this.clearBtnTarget.disabled = false;
        this.inputTarget.disabled = true;
        return;
      } else {
        if (this.allowOtherValue) {
          if (this.hasDataListTarget) {
            var newOptions = this.options;
            newOptions.push({
              value: newValue,
              text: newValue
            });
            this.options = newOptions;
          }
          this.inputTarget.value = newValue;
          this.hiddenTextTarget.value = newValue;
          this.hiddenTarget.value = newValue;
        } else {
          this.inputTarget.value = "";
          this.hiddenTextTarget.value = "";
          this.hiddenTarget.value = "";
          newValue = "";
        }
        if (newValue != "") {
          this.clearBtnTarget.disabled = false;
          this.inputTarget.disabled = true;
        } else {
          this.clearBtnTarget.disabled = true;
          this.inputTarget.disabled = false;
        }
        return;
      }
    }
    this.inputTarget.value = "";
    this.hiddenTarget.value = "";
    this.hiddenTextTarget.value = "";
    this.clearBtnTarget.disabled = true;
    this.inputTarget.disabled = false;
  }
  get value() {
    return this.hiddenTarget.value;
  }
  get disabled() {
    return this.inputTarget.disabled;
  }
  set disabled(newValue) {
    this.hiddenTarget.disabled = newValue;
    this.hiddenTextTarget.disabled = newValue;
    if (this.inputTarget.value != "") {
      this.inputTarget.disabled = true;
      this.clearBtnTarget.disabled = newValue;
    } else {
      this.clearBtnTarget.disabled = true;
      this.inputTarget.disabled = newValue;
    }
  }
  get hidden() {
    return this.element.hidden;
  }
  set hidden(newValue) {
    this.element.hidden = newValue;
  }
  get options() {
    return this._selectOptions;
  }
  set options(newValue) {
    this._selectOptions = newValue;
    this.makeDataListItems();
  }
  connect() {
    this.close();
    if (!this.inputTarget.hasAttribute("autocomplete")) this.inputTarget.setAttribute("autocomplete", "off");
    this.inputTarget.setAttribute("spellcheck", "false");
    this.mouseDown = false;
    this.onInputChange = debounce(this.onInputChange, this.delayValue);
    this.inputTarget.addEventListener("keydown", this.onKeydown);
    this.inputTarget.addEventListener("blur", this.onInputBlur);
    this.inputTarget.addEventListener("input", this.onInputChange);
    this.inputTarget.addEventListener("click", this.onInputClick);
    this.inputTarget.addEventListener("change", this.onInputChangeTriggered);
    this.resultsTarget.addEventListener("mousedown", this.onResultsMouseDown);
    this.resultsTarget.addEventListener("click", this.onResultsClick);
    if (this.inputTarget.hasAttribute("autofocus")) {
      this.inputTarget.focus();
    }
    this.shimElement();
    this.readyValue = true;
    this.element.dispatchEvent(new CustomEvent("ready", {
      detail: this.element.dataset
    }));
  }
  disconnect() {
    if (this.hasInputTarget) {
      this.inputTarget.removeEventListener("keydown", this.onKeydown);
      this.inputTarget.removeEventListener("blur", this.onInputBlur);
      this.inputTarget.removeEventListener("input", this.onInputChange);
      this.inputTarget.removeEventListener("click", this.onInputClick);
      this.inputTarget.removeEventListener("change", this.onInputChangeTriggered);
    }
    if (this.hasResultsTarget) {
      this.resultsTarget.removeEventListener("mousedown", this.onResultsMouseDown);
      this.resultsTarget.removeEventListener("click", this.onResultsClick);
    }
  }
  initSelectionValueChanged() {
    if (this._datalistLoaded) {
      if (this.initSelectionValue == null || !this.initSelectionValue.hasOwnProperty("value")) {
        return;
      }
      let newOption = this.initSelectionValue;
      if (!newOption.value && (!newOption.text || newOption.text == "")) {
        return;
      }
      if (this.allowOtherValue) {
        if (newOption.value == null) {
          newOption.value = newOption.text;
        }
      }
      let option = this._selectOptions.find(option => option.value == newOption.value);
      if (option) {
        this.value = option.value;
      } else {
        this.addOption(newOption);
        this.value = newOption.value;
      }
    } else {
      //check if there is a value key in the initSelectionValue object
      if (this.initSelectionValue.hasOwnProperty("value")) {
        this.hiddenTarget.value = this.initSelectionValue.value;
        this.hiddenTextTarget.value = this.initSelectionValue.text;
        this.inputTarget.value = this.initSelectionValue.text;
      }
    }
  }
  addOption(option) {
    if (option.hasOwnProperty("value") && option.hasOwnProperty("text")) {
      this._selectOptions.push(option);
      this.makeDataListItems();
    }
  }
  makeDataListItems() {
    if (this.hasDataListTarget) {
      this.dataListTarget.textContent = "";
      var items = JSON.stringify(this._selectOptions);
      this.dataListTarget.textContent = items;
    }
  }
  dataListTargetConnected() {
    this._selectOptions = JSON.parse(this.dataListTarget.textContent);
    this._datalistLoaded = true;
    if (this.hasInitSelectionValue) {
      this.initSelectionValueChanged();
    }
  }
  shimElement() {
    Object.defineProperty(this.element, 'value', {
      get: () => {
        return this.value;
      },
      set: newValue => {
        this.value = newValue;
      }
    });
    this.element.focus = () => {
      this.inputTarget.focus();
    };
    let proto = this.element;
    while (proto && !Object.getOwnPropertyDescriptor(proto, 'hidden')) {
      proto = Object.getPrototypeOf(proto);
    }
    if (proto) {
      this.baseHidden = Object.getOwnPropertyDescriptor(proto, 'hidden');
      Object.defineProperty(this.element, 'hidden', {
        get: () => {
          return this.baseHidden.get.call(this.element);
        },
        set: newValue => {
          this.baseHidden.set.call(this.element, newValue);
          if (newValue) {
            this.hiddenTarget.disabled = true;
            this.hiddenTextTarget.disabled = true;
            this.inputTarget.disabled = true;
            this.close();
          } else {
            this.hiddenTarget.disabled = false;
            this.hiddenTextTarget.disabled = false;
            this.inputTarget.disabled = false;
          }
        }
      });
    }
    Object.defineProperty(this.element, 'disabled', {
      get: () => {
        return this.disabled;
      },
      set: newValue => {
        this.disabled = newValue;
      }
    });
    Object.defineProperty(this.element, 'options', {
      get: () => {
        return this.options;
      },
      set: newValue => {
        this.options = newValue;
      }
    });
  }
  sibling(next) {
    const options = this.options;
    const selected = this.selectedOption;
    const index = options.indexOf(selected);
    const sibling = next ? options[index + 1] : options[index - 1];
    const def = next ? options[0] : options[options.length - 1];
    return sibling || def;
  }
  select(target) {
    const previouslySelected = this.selectedOption;
    if (previouslySelected) {
      previouslySelected.removeAttribute("aria-selected");
      previouslySelected.classList.remove(...this.selectedClassesOrDefault);
    }
    target.setAttribute("aria-selected", "true");
    target.classList.add(...this.selectedClassesOrDefault);
    this.inputTarget.setAttribute("aria-activedescendant", target.id);
    target.scrollIntoView({
      behavior: "auto",
      block: "nearest"
    });
  }
  onInputChangeTriggered = event => {
    event.stopPropagation();
    this.hiddenTextTarget.value = this.inputTarget.value;
  };
  onInputClick = event => {
    this.state = "start";
    if (this.hasDataListTarget) {
      const query = this.inputTarget.value.trim();
      this.fetchResults(query);
    }
    this.hiddenTextTarget.value = this.inputTarget.value;
  };
  onKeydown = event => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    const handler = this[`on${event.key}Keydown`];
    this.hiddenTextTarget.value = this.inputTarget.value;
    if (handler) handler(event);
  };
  onEscapeKeydown = event => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    if (!this.resultsShown) return;
    this.hideAndRemoveOptions();
    event.stopPropagation();
    event.preventDefault();
  };
  onArrowDownKeydown = event => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    const item = this.sibling(true);
    if (item) this.select(item);
    event.preventDefault();
  };
  onArrowUpKeydown = event => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    const item = this.sibling(false);
    if (item) this.select(item);
    event.preventDefault();
  };
  onTabKeydown = event => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    if (this.allowOtherValue) {
      this.fireChangeEvent(this.inputTarget.value, this.inputTarget.value, null);
    } else {
      if (this.inputTarget.value != "") {
        let newValue = this.inputTarget.value;
        let option = this._selectOptions.find(option => option.text == newValue && option.enabled != false);
        this.value = option ? option.value : "";
      } else {
        this.clear();
      }
    }
  };
  onEnterKeydown = event => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    const selected = this.selectedOption;
    if (selected && this.resultsShown) {
      this.commit(selected);
      if (!this.hasSubmitOnEnterValue) {
        event.preventDefault();
      }
    }
  };
  onInputBlur = () => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    if (this.mouseDown) {
      return;
    }
    if (this.state == "open") {
      if (this.allowOtherValue) {
        this.fireChangeEvent(this.inputTarget.value, this.inputTarget.value, null);
      } else {
        if (this.inputTarget.value != "") {
          let newValue = this.inputTarget.value;
          let option = this._selectOptions.find(option => option.text == newValue && option.enabled != false);
          this.value = option ? option.value : "";
        } else {
          this.clear();
        }
      }
    }
    this.close();
    console.log("leaving");
  };
  commit(selected) {
    this.hiddenTextTarget.value = this.inputTarget.value;
    if (selected.getAttribute("aria-disabled") === "true") return;
    if (selected instanceof HTMLAnchorElement) {
      selected.click();
      this.close();
      return;
    }
    const textValue = selected.getAttribute("data-ac-label") || selected.textContent.trim();
    const value = selected.getAttribute("data-ac-value") || textValue;
    this.inputTarget.value = textValue;
    if (this.hasHiddenTarget) {
      this.hiddenTarget.value = value;
      this.hiddenTarget.dispatchEvent(new Event("input"));
      this.hiddenTarget.dispatchEvent(new Event("change"));
    } else {
      this.inputTarget.value = value;
    }
    if (this.hasHiddenTextTarget) {
      this.hiddenTextTarget.value = textValue;
    }
    this.inputTarget.focus();
    this.state = "finished";
    this.fireChangeEvent(value, textValue, selected);
    this.hideAndRemoveOptions();
  }
  fireChangeEvent(value, textValue, selected) {
    this.hiddenTextTarget.value = this.inputTarget.value;
    this.element.dispatchEvent(new CustomEvent("autocomplete.change", {
      bubbles: true,
      detail: {
        value: value,
        textValue: textValue,
        selected: selected
      }
    }));
    if (this.inputTarget.value == "") {
      this.clearBtnTarget.disabled = true;
      this.inputTarget.disabled = false;
    } else {
      this.clearBtnTarget.disabled = false;
      this.inputTarget.disabled = true;
    }
    this.element.dispatchEvent(new CustomEvent("change"), {
      bubbles: true
    });
    this.state = "finished";
  }
  clear() {
    this.inputTarget.value = "";
    if (this.hasHiddenTarget) this.hiddenTarget.value = "";
    if (this.hasHiddenTextTarget) this.hiddenTextTarget.value = "";
    this.clearBtnTarget.disabled = true;
    this.inputTarget.disabled = false;
    this.close();
  }
  onResultsClick = event => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    if (!(event.target instanceof Element)) return;
    const selected = event.target.closest(optionSelector);
    if (selected) this.commit(selected);
  };
  onResultsMouseDown = () => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    this.mouseDown = true;
    this.resultsTarget.addEventListener("mouseup", () => {
      this.mouseDown = false;
    }, {
      once: true
    });
  };
  onInputChange = () => {
    this.hiddenTextTarget.value = this.inputTarget.value;
    if (this.hasHiddenTarget) this.hiddenTarget.value = "";
    if (this.hasHiddenTextTarget) this.hiddenTextTarget.value = "";
    const query = this.inputTarget.value.trim();
    if (query && query.length >= this.minLengthValue || this.hasDataListTarget) {
      this.fetchResults(query);
    } else {
      this.hideAndRemoveOptions();
    }
  };
  identifyOptions() {
    const prefix = this.resultsTarget.id || "stimulus-autocomplete";
    const optionsWithoutId = this.resultsTarget.querySelectorAll(`${optionSelector}:not([id])`);
    optionsWithoutId.forEach(el => el.id = `${prefix}-option-${AutoComplete.uniqOptionId++}`);
  }
  hideAndRemoveOptions() {
    this.close();
    this.resultsTarget.innerHTML = null;
  }
  fetchResults = async query => {
    if (!this.hasUrlValue) {
      if (!this.hasDataListTarget) {
        throw new Error("You must provide a URL or a DataList target");
      } else {
        this.resultsTarget.innerHTML = null;
        let allItems = this._selectOptions;
        for (let item of allItems) {
          if (item.text.toLowerCase().includes(query.toLowerCase()) && (item.enabled != false || query == "")) {
            let itemHtml = document.createElement("li");
            itemHtml.setAttribute("data-ac-value", item.value);
            itemHtml.classList.add("list-group-item");
            if (item.enabled == false) {
              itemHtml.setAttribute("aria-disabled", "true");
              itemHtml.classList.add("disabled");
            } else {
              itemHtml.setAttribute("aria-disabled", "false");
            }
            itemHtml.setAttribute("role", "option");
            itemHtml.setAttribute("aria-selected", "false");

            //add a span around matching string to highlight it
            if (query != "") {
              let filteredOptions = item.text;
              itemHtml.innerHTML = filteredOptions.replace(new RegExp(query, 'gi'), match => `<span class="text-primary">${match}</span>`);
            } else {
              itemHtml.innerHTML = item.text;
            }
            this.resultsTarget.appendChild(itemHtml);
          }
        }
        if (this.state != "finished") {
          this.identifyOptions();
          this.open();
          this.state = "open";
        }
        return;
      }
    }
    const url = this.buildURL(query);
    try {
      this.element.dispatchEvent(new CustomEvent("loadstart"));
      const html = await this.doFetch(url);
      if (this.state != "finished") {
        this.replaceResults(html);
        this.state = "open";
      }
      this.element.dispatchEvent(new CustomEvent("load"));
      this.element.dispatchEvent(new CustomEvent("loadend"));
    } catch (error) {
      this.element.dispatchEvent(new CustomEvent("error"));
      this.element.dispatchEvent(new CustomEvent("loadend"));
      throw error;
    }
  };
  buildURL(query) {
    const url = new URL(this.urlValue, window.location.href);
    const params = new URLSearchParams(url.search.slice(1));
    params.append(this.queryParamValue, query);
    url.search = params.toString();
    return url.toString();
  }
  doFetch = async url => {
    const response = await fetch(url, this.optionsForFetch());
    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }
    const html = await response.text();
    return html;
  };
  replaceResults(html) {
    this.hiddenTextTarget.value = this.inputTarget.value;
    this.resultsTarget.innerHTML = html;
    this.identifyOptions();
    if (!!this.options) {
      this.state = "results";
      this.open();
    } else {
      this.state = "empty list";
      this.close();
    }
  }
  open() {
    if (this.resultsShown) return;
    this.resultsShown = true;
    this.element.setAttribute("aria-expanded", "true");
    this.hiddenTextTarget.value = this.inputTarget.value;
    this.element.dispatchEvent(new CustomEvent("toggle", {
      detail: {
        action: "open",
        inputTarget: this.inputTarget,
        resultsTarget: this.resultsTarget
      }
    }));
  }
  close() {
    if (!this.resultsShown) {
      return;
    }
    this.state = "finished";
    this.resultsShown = false;
    this.inputTarget.removeAttribute("aria-activedescendant");
    this.element.setAttribute("aria-expanded", "false");
    this.hiddenTextTarget.value = this.inputTarget.value;
    this.element.dispatchEvent(new CustomEvent("toggle", {
      detail: {
        action: "close",
        inputTarget: this.inputTarget,
        resultsTarget: this.resultsTarget
      }
    }));
  }
  get resultsShown() {
    return !this.resultsTarget.hidden;
  }
  set resultsShown(value) {
    this.resultsTarget.hidden = !value;
  }
  get selectedClassesOrDefault() {
    return this.hasSelectedClass ? this.selectedClasses : ["active"];
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
}
const debounce = function (fn) {
  let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  let timeoutId = null;
  return function () {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(fn, delay);
  };
};
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["ac"] = AutoComplete;

/***/ }),

/***/ "./assets/js/controllers/branch-links-controller.js":
/*!**********************************************************!*\
  !*** ./assets/js/controllers/branch-links-controller.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class BrancheLinks extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["new", "formValue", "displayList", "linkType"];
  initialize() {
    this.items = [];
  }
  setLinkType(event) {
    event.preventDefault();
    let linkType = event.target.getAttribute('data-value');
    let previousLinkType = this.linkTypeTarget.dataset.value;
    this.linkTypeTarget.classList.remove('bi-' + previousLinkType);
    this.linkTypeTarget.classList.add('bi-' + linkType);
    this.linkTypeTarget.dataset.value = linkType;
  }
  add(event) {
    event.preventDefault();
    if (!this.newTarget.checkValidity()) {
      this.newTarget.reportValidity();
      return;
    }
    if (!this.newTarget.value) {
      return;
    }
    let url = KMP_utils.sanitizeUrl(this.newTarget.value);
    let type = this.linkTypeTarget.dataset.value;
    //check urls for duplicate url and type
    if (this.items.find(item => item.url === url && item.type === type)) {
      return;
    }
    let item = {
      "url": KMP_utils.sanitizeUrl(this.newTarget.value),
      "type": this.linkTypeTarget.dataset.value
    };
    this.items.push(item);
    this.createListItem(item);
    this.formValueTarget.value = JSON.stringify(this.items);
    this.newTarget.value = '';
    this.linkTypeTarget.dataset.value = 'link';
    this.linkTypeTarget.classList.remove('bi-' + type);
    this.linkTypeTarget.classList.add('bi-link');
  }
  remove(event) {
    event.preventDefault();
    let id = event.target.getAttribute('data-id');
    let removeItem = JSON.parse(id);
    this.items = this.items.filter(item => {
      return item.url !== removeItem.url || item.type !== removeItem.type;
    });
    this.formValueTarget.value = JSON.stringify(this.items);
    event.target.parentElement.remove();
  }
  connect() {
    if (this.formValueTarget.value && this.formValueTarget.value.length > 0) {
      this.items = JSON.parse(this.formValueTarget.value);
      this.items.forEach(item => {
        //create a remove button
        this.createListItem(item);
      });
    }
  }
  createListItem(item) {
    let removeButton = document.createElement('button');
    removeButton.innerHTML = 'Remove';
    removeButton.setAttribute('data-action', 'branch-links#remove');
    removeButton.setAttribute('data-id', JSON.stringify(item));
    removeButton.setAttribute('class', 'btn btn-danger btn-sm');
    removeButton.setAttribute('type', 'button');
    //create a list item
    let inputGroup = document.createElement('div');
    inputGroup.setAttribute('class', 'input-group mb-1');
    let iconSpan = document.createElement('span');
    iconSpan.setAttribute('class', 'input-group-text bi bi-' + item.type);
    inputGroup.appendChild(iconSpan);
    let span = document.createElement('span');
    span.innerHTML = item.url;
    span.setAttribute('class', 'form-control');
    inputGroup.appendChild(span);
    inputGroup.appendChild(removeButton);
    this.displayListTarget.appendChild(inputGroup);
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["branch-links"] = BrancheLinks;

/***/ }),

/***/ "./assets/js/controllers/delayed-forward-controller.js":
/*!*************************************************************!*\
  !*** ./assets/js/controllers/delayed-forward-controller.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

const {
  Controller
} = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
class DelayForwardController extends Controller {
  static values = {
    url: String,
    delayMs: Number
  };
  connect() {
    console.log("DelayForwardController connected");
    this.timeout = null;
    this.forward();
  }
  forward() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    this.timeout = setTimeout(() => {
      console.log("Forwarding to " + this.urlValue);
      window.location.href = this.urlValue;
    }, this.delayMsValue);
  }
  disconnect() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["delay-forward"] = DelayForwardController;

/***/ }),

/***/ "./assets/js/controllers/detail-tabs-controller.js":
/*!*********************************************************!*\
  !*** ./assets/js/controllers/detail-tabs-controller.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class DetailTabsController extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["tabBtn", "tabContent"];
  static values = {
    updateUrl: {
      type: Boolean,
      default: true
    }
  };
  foundFirst = false;
  tabBtnTargetConnected(event) {
    var tab = event.id.replace('nav-', '').replace('-tab', '');
    var urlTab = KMP_utils.urlParam('tab');
    if (urlTab) {
      if (tab == urlTab) {
        event.click();
        this.foundFirst = true;
        window.scrollTo(0, 0);
      }
    } else {
      if (!this.foundFirst) {
        this.tabBtnTargets[0].click();
        window.scrollTo(0, 0);
      }
    }
    event.addEventListener('click', this.tabBtnClicked.bind(this));
  }
  tabBtnClicked(event) {
    var firstTabId = this.tabBtnTargets[0].id;
    var eventTabId = event.target.id;
    var tab = event.target.id.replace('nav-', '').replace('-tab', '');
    if (this.updateUrlValue) {
      if (firstTabId != eventTabId) {
        window.history.pushState({}, '', '?tab=' + tab);
      } else {
        //only push state if there is a tab in the querystring
        var urlTab = KMP_utils.urlParam('tab');
        if (urlTab) {
          window.history.pushState({}, '', window.location.pathname);
        }
      }
    }
    var frame = document.getElementById(tab + '-frame');
    if (frame) {
      frame.reload();
    }
  }
  tabBtnTargetDisconnected(event) {
    event.removeEventListener('click', this.tabBtnClicked.bind(this));
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["detail-tabs"] = DetailTabsController;

/***/ }),

/***/ "./assets/js/controllers/filter-grid-controller.js":
/*!*********************************************************!*\
  !*** ./assets/js/controllers/filter-grid-controller.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class FilterGrid extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  submitForm(event) {
    console.log("submitting form");
    this.element.requestSubmit();
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["filter-grid"] = FilterGrid;

/***/ }),

/***/ "./assets/js/controllers/guifier-controller.js":
/*!*****************************************************!*\
  !*** ./assets/js/controllers/guifier-controller.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var guifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! guifier */ "./node_modules/guifier/dist/Guifier.js");

const {
  Controller
} = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
class GuifierController extends Controller {
  static targets = ["hidden", "container"];
  static values = {
    type: String
  };
  connect() {
    var params = {
      elementSelector: '#' + this.containerTarget.id,
      data: this.hiddenTarget.value,
      dataType: this.typeValue,
      rootContainerName: 'setting',
      fullScreen: true,
      onChange: () => {
        this.hiddenTarget.value = this.guifier.getData(this.typeValue);
        // console.log(this.hiddenTarget.value);
        this.hiddenTarget.dispatchEvent(new Event('change'));
      }
    };
    this.guifier = new guifier__WEBPACK_IMPORTED_MODULE_0__["default"](params);
    //find all the elements with guifierContainerCollapseButton class and click them
    var collapseButtons = this.containerTarget.querySelectorAll('.guifierContainerCollapseButton');
    collapseButtons.forEach(function (button) {
      button.click();
    });
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["guifier-control"] = GuifierController;

/***/ }),

/***/ "./assets/js/controllers/image-preview-controller.js":
/*!***********************************************************!*\
  !*** ./assets/js/controllers/image-preview-controller.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class ImagePreview extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ['file', 'preview', 'loading'];
  preview(event) {
    if (event.target.files.length > 0) {
      let src = URL.createObjectURL(event.target.files[0]);
      this.previewTarget.src = src;
      this.loadingTarget.classList.add("d-none");
      this.previewTarget.hidden = false;
    }
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["image-preview"] = ImagePreview;

/***/ }),

/***/ "./assets/js/controllers/kanban-controller.js":
/*!****************************************************!*\
  !*** ./assets/js/controllers/kanban-controller.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

const optionSelector = "[role='option']:not([aria-disabled])";
const activeSelector = "[aria-selected='true']";
class Kanban extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["card", "column"];
  static values = {
    csrfToken: String,
    url: String
  };
  initialize() {
    this.draggedItem = null;
  }
  registerBeforeDrop(callback) {
    this.beforeDropCallback = callback;
  }
  cardDrag(event) {
    event.preventDefault();
    this.processDrag(event, false);
  }
  connect() {
    // Add event listeners for drag and drop events 
    document.addEventListener('dragover', this.handleDragOver.bind(this));
    document.addEventListener('drop', this.handleDrop.bind(this));
  }
  disconnect() {
    // Remove event listeners when the controller is disconnected
    document.removeEventListener('dragover', this.handleDragOver.bind(this));
    document.removeEventListener('drop', this.handleDrop.bind(this));
  }
  handleDragOver(event) {
    event.preventDefault();
  }
  handleDrop(event) {
    event.preventDefault();
    if (!this.element.contains(event.target)) {
      console.log('Dropped outside of the table');
      // Handle the drop outside of the table
      this.restoreOriginalPosition();
    }
  }
  restoreOriginalPosition() {
    if (this.draggedItem && this.originalParent) {
      // Insert the dragged item back to its original position
      if (this.originalIndex >= this.originalParent.children.length) {
        this.originalParent.appendChild(this.draggedItem);
      } else {
        this.originalParent.insertBefore(this.draggedItem, this.originalParent.children[this.originalIndex]);
      }
      this.draggedItem.classList.remove("opacity-25");
      this.draggedItem = null;
    }
  }
  dropCard(event) {
    event.preventDefault();
    this.processDrag(event, true);
    this.draggedItem.classList.remove("opacity-25");
    this.draggedItem = null;
  }
  grabCard(event) {
    var target = event.target;
    target.classList.add("opacity-25");
    this.draggedItem = target;
    //record where the object is in the dom before it is moved
    this.originalParent = this.draggedItem.parentElement;
    this.originalIndex = Array.prototype.indexOf.call(this.originalParent.children, this.draggedItem);
  }
  processDrag(event, isDrop) {
    //console.log(event);
    var targetCol = event.target;
    var entityId = this.draggedItem.dataset['recId'];
    var targetStackRank = null;
    while (!targetCol.classList.contains('sortable')) {
      if (targetCol.tagName == 'BODY') {
        return;
      }
      targetCol = targetCol.parentElement;
    }
    var targetBefore = event.target;
    var foundBefore = true;
    while (!targetBefore.classList.contains('card')) {
      if (targetBefore.tagName == 'TD') {
        foundBefore = false;
        break;
      }
      targetBefore = targetBefore.parentElement;
    }
    if (foundBefore) {
      targetStackRank = targetBefore.dataset['stackRank'];
    }
    if (targetCol.classList.contains('sortable')) {
      const data = event.dataTransfer.getData('Text');
      if (foundBefore) {
        targetCol.insertBefore(this.draggedItem, targetBefore);
      } else {
        targetCol.appendChild(this.draggedItem);
      }
      if (isDrop) {
        //in the targetCol get the card before the draggedItem
        var palaceAfter = -1;
        var palaceBefore = -1;
        var previousSibling = this.draggedItem.previousElementSibling;
        if (previousSibling) {
          palaceAfter = previousSibling.dataset['recId'];
        } else {
          palaceAfter = -1;
        }
        var nextSibling = this.draggedItem.nextElementSibling;
        if (nextSibling) {
          palaceBefore = nextSibling.dataset['recId'];
        } else {
          palaceBefore = -1;
        }
        var toCol = targetCol.dataset['col'];
        if (this.beforeDropCallback && !this.beforeDropCallback(entityId, toCol)) {
          this.restoreOriginalPosition();
          return;
        }
        fetch(this.urlValue + "/" + entityId, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": this.csrfTokenValue
          },
          body: JSON.stringify({
            newCol: targetCol.dataset['col'],
            placeAfter: palaceAfter,
            placeBefore: palaceBefore
          })
        });
      }
    }
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["kanban"] = Kanban;

/***/ }),

/***/ "./assets/js/controllers/member-card-profile-controller.js":
/*!*****************************************************************!*\
  !*** ./assets/js/controllers/member-card-profile-controller.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class MemberCardProfile extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["cardSet", "firstCard", "name", "scaName", "branchName", "membershipInfo", "backgroundCheck", "lastUpdate", "loading", "memberDetails"];
  static values = {
    url: String
  };
  initialize() {
    this.currentCard = null;
    this.cardCount = 1;
    this.maxCardLength = 0;
  }
  usedSpaceInCard() {
    var cardChildren = this.currentCard.children;
    var runningTotal = 0;
    for (var i = 0; i < cardChildren.length; i++) {
      runningTotal += cardChildren[i].offsetHeight;
    }
    return runningTotal;
  }
  appendToCard(element, minSpace) {
    this.currentCard.appendChild(element);
    if (minSpace === null) {
      minSpace = 2;
    }
    minSpace = this.maxCardLength * (minSpace / 100);
    if (this.usedSpaceInCard() > this.maxCardLength - minSpace) {
      this.currentCard.removeChild(element);
      this.startCard();
      this.currentCard.appendChild(element);
    }
  }
  startCard() {
    this.cardCount++;
    var card = document.createElement("div");
    card.classList.add("auth_card");
    card.id = "card_" + this.cardCount;
    var cardDetails = document.createElement("div");
    cardDetails.classList.add("cardbox");
    cardDetails.id = "cardDetails_" + this.cardCount;
    card.appendChild(cardDetails);
    this.cardSetTarget.appendChild(card);
    this.currentCard = cardDetails;
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  loadCard() {
    this.currentCard = this.firstCardTarget;
    this.maxCardLength = this.firstCardTarget.offsetHeight;
    this.cardCount = 1;
    fetch(this.urlValue, this.optionsForFetch()).then(response => response.json()).then(data => {
      this.nameTarget.textContent = data.member.first_name + ' ' + data.member.last_name;
      this.scaNameTarget.textContent = data.member.sca_name;
      this.branchNameTarget.textContent = data.member.branch.name;
      if (data.member.membership_number && data.member.membership_number.length > 0) {
        var memberExpDate = new Date(data.member.membership_expires_on);
        if (memberExpDate < new Date()) {
          memberExpDate = "Expired";
        } else {
          memberExpDate = " - " + memberExpDate.toLocaleDateString();
        }
        this.membershipInfoTarget.textContent = data.member.membership_number + ' ' + memberExpDate;
      } else {
        this.membershipInfoTarget.innerHtml = "";
        this.membershipInfoTarget.textContent = "No Membership Info";
      }
      if (data.member.background_check_expires_on) {
        var backgroundCheckExpDate = new Date(data.member.background_check_expires_on);
        if (backgroundCheckExpDate < new Date()) {
          backgroundCheckExpDate = "Expired";
        } else {
          backgroundCheckExpDate = " - " + backgroundCheckExpDate.toLocaleDateString();
        }
        var strong = document.createElement("strong");
        strong.textContent = backgroundCheckExpDate;
        this.backgroundCheckTarget.innerHtml = "";
        this.backgroundCheckTarget.appendChild(strong);
      } else {
        this.backgroundCheckTarget.innerHtml = "";
        this.backgroundCheckTarget.textContent = "No Background Check";
      }
      var today = new Date();
      this.lastUpdateTarget.textContent = today.toLocaleDateString();
      this.loadingTarget.hidden = true;
      this.memberDetailsTarget.hidden = false;
      for (let key in data) {
        if (key === 'member') {
          continue;
        }
        var pluginData = data[key];
        for (let sectionKey in pluginData) {
          var sectionData = pluginData[sectionKey];
          var groupCount = sectionData.length;
          if (groupCount === 0) {
            continue;
          }
          var sectionHeader = document.createElement("h3");
          sectionHeader.textContent = sectionKey;
          this.appendToCard(sectionHeader, 20);
          for (let groupKey in sectionData) {
            var groupData = sectionData[groupKey];
            var groupHeader = document.createElement("h5");
            groupHeader.textContent = groupKey;
            var groupDiv = document.createElement("div");
            groupDiv.classList.add("cardGroup");
            groupDiv.appendChild(groupHeader);
            var groupList = document.createElement("ul");
            for (let i = 0; i < groupData.length; i++) {
              var itemValue = groupData[i];
              var listItem = document.createElement("li");
              listItem.textContent = itemValue;
              groupList.appendChild(listItem);
            }
            groupDiv.appendChild(groupList);
            this.appendToCard(groupDiv, 10);
          }
        }
      }
    });
  }
  connect() {
    this.loadCard();
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["member-card-profile"] = MemberCardProfile;

/***/ }),

/***/ "./assets/js/controllers/member-mobile-card-profile-controller.js":
/*!************************************************************************!*\
  !*** ./assets/js/controllers/member-mobile-card-profile-controller.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class MemberMobileCardProfile extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["cardSet", "name", "scaName", "branchName", "membershipInfo", "backgroundCheck", "lastUpdate", "loading", "memberDetails"];
  static values = {
    url: String,
    pwaReady: Boolean
  };
  initialize() {
    this.currentCard = null;
    this.cardCount = 0;
  }
  startCard(title) {
    this.cardCount++;
    var card = document.createElement("div");
    card.classList.add("card", "cardbox", "m-3");
    card.id = "card_" + this.cardCount;
    var cardDetails = document.createElement("div");
    cardDetails.classList.add("card-body");
    cardDetails.id = "cardDetails_" + this.cardCount;
    var cardTitle = document.createElement("h3");
    cardTitle.classList.add("card-title", "text-center", "display-6");
    cardTitle.textContent = title;
    cardDetails.appendChild(cardTitle);
    card.appendChild(cardDetails);
    this.cardSetTarget.appendChild(card);
    this.currentCard = cardDetails;
  }
  pwaReadyValueChanged() {
    console.log("pwaReadyValueChanged");
    if (this.pwaReadyValue) {
      this.loadCard();
    }
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  loadCard() {
    this.cardSetTarget.innerHTML = "";
    this.loadingTarget.hidden = false;
    this.memberDetailsTarget.hidden = true;
    if (!this.pwaReadyValue) {
      console.log("PWA not ready");
      return;
    } else {
      console.log("PWA ready");
    }
    fetch(this.urlValue, this.optionsForFetch()).then(response => response.json()).then(data => {
      this.loadingTarget.hidden = true;
      this.memberDetailsTarget.hidden = false;
      this.nameTarget.textContent = data.member.first_name + ' ' + data.member.last_name;
      this.scaNameTarget.textContent = data.member.sca_name;
      this.branchNameTarget.textContent = data.member.branch.name;
      if (data.member.membership_number && data.member.membership_number.length > 0) {
        var memberExpDate = new Date(data.member.membership_expires_on);
        if (memberExpDate < new Date()) {
          memberExpDate = "Expired";
        } else {
          memberExpDate = " - " + memberExpDate.toLocaleDateString();
        }
        this.membershipInfoTarget.textContent = data.member.membership_number + ' ' + memberExpDate;
      } else {
        this.membershipInfoTarget.textContent = "No Membership Info";
      }
      if (data.member.background_check_expires_on) {
        var backgroundCheckExpDate = new Date(data.member.background_check_expires_on);
        if (backgroundCheckExpDate < new Date()) {
          backgroundCheckExpDate = "Expired";
        } else {
          backgroundCheckExpDate = 'Current' + backgroundCheckExpDate.toLocaleDateString();
        }
        this.backgroundCheckTarget.textContent = backgroundCheckExpDate;
      } else {
        this.backgroundCheckTarget.textContent = "Not on file";
      }
      this.lastUpdateTarget.textContent = new Date().toLocaleString();
      for (let key in data) {
        if (key === 'member') {
          continue;
        }
        var pluginData = data[key];
        for (let sectionKey in pluginData) {
          var sectionData = pluginData[sectionKey];
          var keysCount = Object.keys(sectionData).length;
          if (keysCount > 0) {
            this.startCard(sectionKey);
          } else {
            continue;
          }
          var groupTable = document.createElement("table");
          groupTable.classList.add("table", "card-body-table");
          var groupTableBody = document.createElement("tbody");
          groupTable.appendChild(groupTableBody);
          for (let groupKey in sectionData) {
            var groupData = sectionData[groupKey];
            if (groupData.length === 0) {
              continue;
            }
            var groupRow = document.createElement("tr");
            var groupHeader = document.createElement("th");
            groupHeader.classList.add("col-12", "text-center");
            groupHeader.colSpan = "2";
            groupHeader.textContent = groupKey;
            groupRow.appendChild(groupHeader);
            groupTableBody.appendChild(groupRow);
            var colCount = 0;
            var groupRow = document.createElement("tr");
            var textAlignClass = "text-center";
            for (let i = 0; i < groupData.length; i++) {
              var itemData = groupData[i];
              if (colCount == 2) {
                groupTableBody.appendChild(groupRow);
                groupRow = document.createElement("tr");
                textAlignClass = "text-center";
                colCount = 0;
              } else {
                textAlignClass = "text-center";
              }
              //if there is a : split it into 2 columns of data
              if (itemData.indexOf(":") > 2) {
                var itemValue = itemData.split(":");
                var itemValueRow = document.createElement("tr");
                var itemValueCol1 = document.createElement("td");
                itemValueCol1.classList.add("col-6", "text-end");
                itemValueCol1.textContent = itemValue[0];
                var itemValueCol2 = document.createElement("td");
                itemValueCol2.classList.add("col-6", "text-start");
                itemValueCol2.textContent = itemValue[1];
                itemValueRow.appendChild(itemValueCol1);
                itemValueRow.appendChild(itemValueCol2);
                groupTableBody.appendChild(itemValueRow);
              } else {
                var colspan = 1;
                if (i + 1 == groupData.length && colCount == 0) {
                  var colspan = 2;
                }
                var itemValueCol = document.createElement("td");
                itemValueCol.classList.add("col-6", textAlignClass);
                itemValueCol.colSpan = colspan;
                itemValueCol.textContent = itemData;
                groupRow.appendChild(itemValueCol);
                colCount++;
              }
            }
            groupTableBody.appendChild(groupRow);
          }
          this.currentCard.appendChild(groupTable);
        }
      }
    });
  }
  connect() {
    console.log("MemberMobileCardProfile connected");
    //this.loadCard();
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["member-mobile-card-profile"] = MemberMobileCardProfile;

/***/ }),

/***/ "./assets/js/controllers/member-mobile-card-pwa-controller.js":
/*!********************************************************************!*\
  !*** ./assets/js/controllers/member-mobile-card-pwa-controller.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class MemberMobileCardPWA extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["urlCache", "status", "refreshBtn"];
  static values = {
    swUrl: String
  };
  urlCacheTargetConnected() {
    this.urlCacheValue = JSON.parse(this.urlCacheTarget.textContent);
  }
  updateOnlineStatus() {
    const statusDiv = this.statusTarget;
    const refreshButton = this.refreshBtnTarget;
    if (navigator.onLine) {
      statusDiv.textContent = 'Online';
      statusDiv.classList.remove('bg-danger');
      statusDiv.classList.add('bg-success');
      refreshButton.hidden = false;
      if (this.sw) {
        this.sw.active.postMessage({
          type: 'ONLINE'
        });
      }
      refreshButton.click();
    } else {
      statusDiv.textContent = 'Offline';
      statusDiv.classList.remove('bg-success');
      statusDiv.classList.add('bg-danger');
      refreshButton.hidden = true;
      if (this.sw) {
        this.sw.active.postMessage({
          type: 'OFFLINE'
        });
      }
    }
  }
  manageOnlineStatus() {
    this.updateOnlineStatus();
    window.addEventListener('online', this.updateOnlineStatus.bind(this));
    window.addEventListener('offline', this.updateOnlineStatus.bind(this));
    navigator.serviceWorker.register(this.swUrlValue).then(registration => {
      this.sw = registration;
      new Promise(r => setTimeout(r, 100)).then(() => {
        console.log('Service Worker registered with scope:', registration.scope);
        console.log('Service Worker active:', registration.active);
        registration.active.postMessage({
          type: 'CACHE_URLS',
          payload: this.urlCacheValue
        });
        this.element.attributes['data-member-mobile-card-profile-pwa-ready-value'].value = true;
      });
    }, error => {
      console.log('Service Worker registration failed:', error);
    });
  }
  refreshPageIfOnline() {
    if (navigator.onLine) {
      window.location.reload();
    }
  }
  connect() {
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', this.manageOnlineStatus.bind(this));
    }
    setInterval(this.refreshPageIfOnline, 300000);
  }
  disconnect() {
    window.addEventListener('load', this.manageOnlineStatus.bind(this));
    window.removeEventListener('online', this.updateOnlineStatus.bind(this));
    window.removeEventListener('offline', this.updateOnlineStatus.bind(this));
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["member-mobile-card-pwa"] = MemberMobileCardPWA;

/***/ }),

/***/ "./assets/js/controllers/member-unique-email-controller.js":
/*!*****************************************************************!*\
  !*** ./assets/js/controllers/member-unique-email-controller.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class MemberUniqueEmail extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    url: String
  };
  connect() {
    this.element.removeAttribute('oninput');
    this.element.removeAttribute('oninvalid');
    this.element.addEventListener('change', this.checkEmail.bind(this));
  }
  disconnect(event) {
    this.element.removeEventListener('change', this.checkEmail.bind(this));
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  checkEmail(event) {
    var email = this.element.value;
    if (email == '') {
      this.element.classList.remove('is-invalid');
      this.element.classList.remove('is-valid');
      this.element.setCustomValidity('');
      return;
    }
    var originalEmail = this.element.dataset.originalValue.toLowerCase();
    if (email.toLowerCase() == originalEmail) {
      this.element.classList.add('is-valid');
      this.element.classList.remove('is-invalid');
      return;
    }
    var checkEmailUrl = this.urlValue + '?nostack=yes&email=' + encodeURIComponent(email);
    fetch(checkEmailUrl, this.optionsForFetch()).then(response => response.json()).then(data => {
      if (data) {
        this.element.classList.add('is-invalid');
        this.element.classList.remove('is-valid');
        this.element.setCustomValidity('This email address is already taken.');
      } else {
        this.element.classList.add('is-valid');
        this.element.classList.remove('is-invalid');
        this.element.setCustomValidity('');
      }
    });
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["member-unique-email"] = MemberUniqueEmail;

/***/ }),

/***/ "./assets/js/controllers/member-verify-form-controller.js":
/*!****************************************************************!*\
  !*** ./assets/js/controllers/member-verify-form-controller.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class MemberVerifyForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ['scaMember', 'membershipNumber', 'membershipExpDate'];
  toggleParent(event) {
    var checked = event.target.checked;
    this.scaMemberTarget.disabled = !checked;
  }
  toggleMembership(event) {
    var checked = event.target.checked;
    this.membershipNumberTarget.disabled = !checked;
    this.membershipExpDateTarget.disabled = !checked;
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["member-verify-form"] = MemberVerifyForm;

/***/ }),

/***/ "./assets/js/controllers/modal-opener-controller.js":
/*!**********************************************************!*\
  !*** ./assets/js/controllers/modal-opener-controller.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class ModalOpener extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    modalBtn: String
  };
  modalBtnValueChanged() {
    let modal = document.getElementById(this.modalBtnValue);
    modal.click();
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["modal-opener"] = ModalOpener;

/***/ }),

/***/ "./assets/js/controllers/nav-bar-controller.js":
/*!*****************************************************!*\
  !*** ./assets/js/controllers/nav-bar-controller.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

const {
  Controller
} = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
class NavBarController extends Controller {
  static targets = ["navHeader"];
  navHeaderClicked(event) {
    var state = event.target.getAttribute('aria-expanded');
    if (state === 'true') {
      var recordExpandUrl = event.target.getAttribute('data-expand-url');
      fetch(recordExpandUrl, this.optionsForFetch());
    } else {
      var recordCollapseUrl = event.target.getAttribute('data-collapse-url');
      fetch(recordCollapseUrl, this.optionsForFetch());
    }
  }
  navHeaderTargetConnected(event) {
    event.addEventListener('click', this.navHeaderClicked.bind(this));
  }
  navHeaderTargetDisconnected(event) {
    event.removeEventListener('click', this.navHeaderClicked.bind(this));
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["nav-bar"] = NavBarController;

/***/ }),

/***/ "./assets/js/controllers/outlet-button-controller.js":
/*!***********************************************************!*\
  !*** ./assets/js/controllers/outlet-button-controller.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class OutletButton extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    btnData: Object,
    requireData: Boolean
  };
  btnDataValueChanged() {
    if (this.btnDataValue === null) {
      this.btnDataValue = {};
    }
    if (this.requireDataValue && Object.keys(this.btnDataValue).length === 0) {
      this.element.disabled = true;
    } else {
      this.element.disabled = false;
    }
  }
  addBtnData(data) {
    this.btnDataValue = data;
  }
  fireNotice(event) {
    let btnData = this.btnDataValue;
    this.dispatch("outlet-button-clicked", {
      detail: btnData
    });
  }
  addListener(callback) {
    this.element.addEventListener("outlet-btn:outlet-button-clicked", callback);
  }
  removeListener(callback) {
    this.element.removeEventListener("outlet-btn:outlet-button-clicked", callback);
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["outlet-btn"] = OutletButton;

/***/ }),

/***/ "./assets/js/controllers/permission-add-role-controller.js":
/*!*****************************************************************!*\
  !*** ./assets/js/controllers/permission-add-role-controller.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class PermissionAddRole extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["role", "form", "submitBtn"];
  checkSubmitEnable() {
    let role = this.roleTarget.value;
    let roleId = Number(role.replace(/_/g, ""));
    if (roleId > 0) {
      this.submitBtnTarget.disabled = false;
      this.submitBtnTarget.focus();
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["permission-add-role"] = PermissionAddRole;

/***/ }),

/***/ "./assets/js/controllers/revoke-form-controller.js":
/*!*********************************************************!*\
  !*** ./assets/js/controllers/revoke-form-controller.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class RevokeForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    url: String
  };
  static targets = ["submitBtn", "reason", "id"];
  static outlets = ["outlet-btn"];
  setId(event) {
    this.idTarget.value = event.detail.id;
  }
  outletBtnOutletConnected(outlet, element) {
    outlet.addListener(this.setId.bind(this));
  }
  outletBtnOutletDisconnected(outlet) {
    outlet.removeListener(this.setId.bind(this));
  }
  checkReadyToSubmit() {
    let reasonValue = this.reasonTarget.value;
    if (reasonValue.length > 0) {
      this.submitBtnTarget.disabled = false;
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
  connect() {
    this.submitBtnTarget.disabled = true;
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["revoke-form"] = RevokeForm;

/***/ }),

/***/ "./assets/js/controllers/role-add-member-controller.js":
/*!*************************************************************!*\
  !*** ./assets/js/controllers/role-add-member-controller.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class RoleAddMember extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["scaMember", "form", "submitBtn"];
  checkSubmitEnable() {
    let scaMember = this.scaMemberTarget.value;
    let memberId = Number(scaMember.replace(/_/g, ""));
    if (memberId > 0) {
      this.submitBtnTarget.disabled = false;
      this.submitBtnTarget.focus();
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["role-add-member"] = RoleAddMember;

/***/ }),

/***/ "./assets/js/controllers/role-add-permission-controller.js":
/*!*****************************************************************!*\
  !*** ./assets/js/controllers/role-add-permission-controller.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class RoleAddPermission extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["permission", "form", "submitBtn"];
  checkSubmitEnable() {
    let permission = this.permissionTarget.value;
    let permissionId = Number(permission.replace(/_/g, ""));
    if (permissionId > 0) {
      this.submitBtnTarget.disabled = false;
      this.submitBtnTarget.focus();
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["role-add-permission"] = RoleAddPermission;

/***/ }),

/***/ "./assets/js/controllers/session-extender-controller.js":
/*!**************************************************************!*\
  !*** ./assets/js/controllers/session-extender-controller.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

const {
  Controller
} = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
class SessionExtender extends Controller {
  static values = {
    url: String
  };
  urlValueChanged() {
    if (this.timer) {
      clearTimeout(this.timer);
    }
    var me = this;
    this.timer = setTimeout(function () {
      alert('Session Expiring! Click ok to extend session.');
      fetch(me.urlValue).then(res => {
        return res.json();
      }).then(data => {
        me.urlValueChanged();
      });
      //minutes * 60000 miliseconds per minute
    }, 25 * 60000);
  }
}
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["session-extender"] = SessionExtender;

/***/ }),

/***/ "./plugins/Activities/assets/js/controllers/approve-and-assign-auth-controller.js":
/*!****************************************************************************************!*\
  !*** ./plugins/Activities/assets/js/controllers/approve-and-assign-auth-controller.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class ActivitiesApproveAndAssignAuthorization extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    url: String
  };
  static targets = ["approvers", "submitBtn", "id"];
  static outlets = ["outlet-btn"];
  setId(event) {
    this.idTarget.value = event.detail.id;
    this.getApprovers();
  }
  outletBtnOutletConnected(outlet, element) {
    outlet.addListener(this.setId.bind(this));
  }
  outletBtnOutletDisconnected(outlet) {
    outlet.removeListener(this.setId.bind(this));
  }
  getApprovers() {
    if (this.hasApproversTarget) {
      this.approversTarget.value = "";
      let activityId = this.idTarget.value;
      let url = this.urlValue + "/" + activityId;
      fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
        let list = [];
        data.forEach(item => {
          list.push({
            value: item.id,
            text: item.sca_name
          });
        });
        this.approversTarget.options = list;
        this.submitBtnTarget.disabled = true;
        this.approversTarget.disabled = false;
      });
    }
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  checkReadyToSubmit() {
    let approverValue = this.approversTarget.value;
    let approverNum = parseInt(approverValue);
    if (approverNum > 0) {
      this.submitBtnTarget.disabled = false;
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
  submitBtnTargetConnected() {
    this.submitBtnTarget.disabled = true;
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["activities-approve-and-assign-auth"] = ActivitiesApproveAndAssignAuthorization;

/***/ }),

/***/ "./plugins/Activities/assets/js/controllers/renew-auth-controller.js":
/*!***************************************************************************!*\
  !*** ./plugins/Activities/assets/js/controllers/renew-auth-controller.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class ActivitiesRenewAuthorization extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    url: String
  };
  static targets = ["activity", "approvers", "submitBtn", "memberId", "id"];
  static outlets = ["outlet-btn"];
  setId(event) {
    this.idTarget.value = event.detail.id;
    this.activityTarget.value = event.detail.activity;
    this.getApprovers();
  }
  outletBtnOutletConnected(outlet, element) {
    outlet.addListener(this.setId.bind(this));
  }
  outletBtnOutletDisconnected(outlet) {
    outlet.removeListener(this.setId.bind(this));
  }
  getApprovers() {
    if (this.hasApproversTarget) {
      this.approversTarget.value = "";
      let activityId = this.activityTarget.value;
      let url = this.urlValue + "/" + activityId + "/" + this.memberIdTarget.value;
      fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
        let list = [];
        data.forEach(item => {
          list.push({
            value: item.id,
            text: item.sca_name
          });
        });
        this.approversTarget.options = list;
        this.submitBtnTarget.disabled = true;
        this.approversTarget.disabled = false;
      });
    }
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  checkReadyToSubmit() {
    let approverValue = this.approversTarget.value;
    let approverNum = parseInt(approverValue);
    if (approverNum > 0) {
      this.submitBtnTarget.disabled = false;
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
  submitBtnTargetConnected() {
    this.submitBtnTarget.disabled = true;
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["activities-renew-auth"] = ActivitiesRenewAuthorization;

/***/ }),

/***/ "./plugins/Activities/assets/js/controllers/request-auth-controller.js":
/*!*****************************************************************************!*\
  !*** ./plugins/Activities/assets/js/controllers/request-auth-controller.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class ActivitiesRequestAuthorization extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    url: String
  };
  static targets = ["activity", "approvers", "submitBtn", "memberId"];
  getApprovers(event) {
    this.approversTarget.value = "";
    let activityId = this.activityTarget.value;
    let url = this.urlValue + "/" + activityId + "/" + this.memberIdTarget.value;
    fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
      let list = [];
      data.forEach(item => {
        list.push({
          value: item.id,
          text: item.sca_name
        });
      });
      this.approversTarget.options = list;
      this.submitBtnTarget.disabled = true;
      this.approversTarget.disabled = false;
    });
  }
  acConnected() {
    if (this.hasApproversTarget) {
      this.approversTarget.disabled = true;
    }
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  checkReadyToSubmit() {
    let approverValue = this.approversTarget.value;
    let approverNum = parseInt(approverValue);
    if (approverNum > 0) {
      this.submitBtnTarget.disabled = false;
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
  submitBtnTargetConnected() {
    this.submitBtnTarget.disabled = true;
  }
  approversTargetConnected() {
    this.approversTarget.disabled = true;
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["activities-request-auth"] = ActivitiesRequestAuthorization;

/***/ }),

/***/ "./plugins/Awards/Assets/js/controllers/award-form-controller.js":
/*!***********************************************************************!*\
  !*** ./plugins/Awards/Assets/js/controllers/award-form-controller.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class AwardsAwardForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["new", "formValue", "displayList"];
  initialize() {
    this.items = [];
  }
  add(event) {
    event.preventDefault();
    if (!this.newTarget.value) {
      return;
    }
    if (this.items.includes(this.newTarget.value)) {
      return;
    }
    let item = this.newTarget.value;
    this.items.push(item);
    this.createListItem(KMP_utils.sanitizeString(item));
    this.formValueTarget.value = JSON.stringify(this.items);
    this.newTarget.value = '';
  }
  remove(event) {
    event.preventDefault();
    let id = event.target.getAttribute('data-id');
    this.items = this.items.filter(item => {
      return item !== id;
    });
    this.formValueTarget.value = JSON.stringify(this.items);
    event.target.parentElement.remove();
  }
  connect() {
    if (this.formValueTarget.value && this.formValueTarget.value.length > 0) {
      this.items = JSON.parse(this.formValueTarget.value);
      this.items.forEach(item => {
        //create a remove button
        this.createListItem(item);
      });
    }
  }
  createListItem(item) {
    let removeButton = document.createElement('button');
    removeButton.innerHTML = 'Remove';
    removeButton.setAttribute('data-action', 'awards-award-form#remove');
    removeButton.setAttribute('data-id', item);
    removeButton.setAttribute('class', 'btn btn-danger btn-sm');
    removeButton.setAttribute('type', 'button');
    //create a list item
    let inputGroup = document.createElement('div');
    inputGroup.setAttribute('class', 'input-group mb-1');
    let span = document.createElement('span');
    span.innerHTML = item;
    span.setAttribute('class', 'form-control');
    inputGroup.appendChild(span);
    inputGroup.appendChild(removeButton);
    this.displayListTarget.appendChild(inputGroup);
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["awards-award-form"] = AwardsAwardForm;

/***/ }),

/***/ "./plugins/Awards/Assets/js/controllers/rec-add-controller.js":
/*!********************************************************************!*\
  !*** ./plugins/Awards/Assets/js/controllers/rec-add-controller.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class AwardsRecommendationAddForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["scaMember", "notFound", "branch", "externalLinks", "awardDescriptions", "award", "reason", "events", "specialty"];
  static values = {
    publicProfileUrl: String,
    awardListUrl: String
  };
  submit(event) {
    this.notFoundTarget.disabled = false;
    this.scaMemberTarget.disabled = false;
    this.specialtyTarget.disabled = false;
  }
  setAward(event) {
    let awardId = event.target.dataset.awardId;
    this.awardTarget.value = awardId;
    this.populateSpecialties(event);
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  populateAwardDescriptions(event) {
    let url = this.awardListUrlValue + "/" + event.target.value;
    fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
      this.awardDescriptionsTarget.innerHTML = "";
      let tabButtons = document.createElement("ul");
      tabButtons.classList.add("nav", "nav-pills");
      tabButtons.setAttribute("role", "tablist");
      let tabContentArea = document.createElement("div");
      tabContentArea.classList.add("tab-content");
      tabContentArea.classList.add("border");
      tabContentArea.classList.add("border-light-subtle");
      tabContentArea.classList.add("p-2");
      tabContentArea.innerHTML = "";
      this.awardTarget.value = "";
      let active = "active";
      let show = "show";
      let selected = "true";
      let awardList = [];
      if (data.length > 0) {
        data.forEach(function (award) {
          //create list item
          awardList.push({
            value: award.id,
            text: award.name,
            data: award
          });
          //create tab info
          var tabButton = document.createElement("li");
          tabButton.classList.add("nav-item");
          tabButton.setAttribute("role", "presentation");
          var button = document.createElement("button");
          button.classList.add("nav-link");
          if (active == "active") {
            button.classList.add("active");
          }
          button.setAttribute("data-action", "click->awards-rec-add#setAward");
          button.setAttribute("id", "award_" + award.id + "_btn");
          button.setAttribute("data-bs-toggle", "tab");
          button.setAttribute("data-bs-target", "#award_" + award.id);
          button.setAttribute('data-award-id', award.id);
          button.setAttribute("type", "button");
          button.setAttribute("role", "tab");
          button.setAttribute("aria-controls", "award_" + award.id);
          button.setAttribute("aria-selected", selected);
          button.innerHTML = award.name;
          tabButton.appendChild(button);
          var tabContent = document.createElement("div");
          tabContent.classList.add("tab-pane");
          tabContent.classList.add("fade");
          if (show == "show") {
            tabContent.classList.add("show");
          }
          if (active == "active") {
            tabContent.classList.add("active");
          }
          tabContent.setAttribute("id", "award_" + award.id);
          tabContent.setAttribute("role", "tabpanel");
          tabContent.setAttribute("aria-labelledby", "award_" + award.id + "_btn");
          tabContent.innerHTML = award.name + ": " + award.description;
          active = "";
          show = "";
          selected = "false";
          tabButtons.append(tabButton);
          tabContentArea.append(tabContent);
        });
        this.awardDescriptionsTarget.appendChild(tabButtons);
        this.awardDescriptionsTarget.appendChild(tabContentArea);
        this.awardTarget.options = awardList;
        this.awardTarget.disabled = false;
      } else {
        this.awardTarget.options = [{
          value: "No awards available",
          text: "No awards available"
        }];
        this.awardTarget.value = "No awards available";
        this.awardTarget.disabled = true;
      }
    });
  }
  populateSpecialties(event) {
    let awardId = this.awardTarget.value;
    let options = this.awardTarget.options;
    let award = this.awardTarget.options.find(award => award.value == awardId);
    let specialtyArray = [];
    if (award.data.specialties != null && award.data.specialties.length > 0) {
      award.data.specialties.forEach(function (specialty) {
        specialtyArray.push({
          value: specialty,
          text: specialty
        });
      });
      this.specialtyTarget.options = specialtyArray;
      this.specialtyTarget.value = "";
      this.specialtyTarget.disabled = false;
      this.specialtyTarget.hidden = false;
    } else {
      this.specialtyTarget.options = [{
        value: "No specialties available",
        text: "No specialties available"
      }];
      this.specialtyTarget.value = "No specialties available";
      this.specialtyTarget.disabled = true;
      this.specialtyTarget.hidden = true;
    }
  }
  loadScaMemberInfo(event) {
    //reset member metadata area
    this.externalLinksTarget.innerHTML = "";
    let memberId = Number(event.target.value.replace(/_/g, ""));
    if (memberId > 0) {
      this.notFoundTarget.checked = false;
      this.branchTarget.hidden = true;
      this.branchTarget.disabled = true;
      this.loadMember(memberId);
    } else {
      this.notFoundTarget.checked = true;
      this.branchTarget.hidden = false;
      this.branchTarget.disabled = false;
      this.branchTarget.focus();
    }
  }
  loadMember(memberId) {
    let url = this.publicProfileUrlValue + "/" + memberId;
    fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
      this.externalLinksTarget.innerHTML = "";
      let keys = Object.keys(data.external_links);
      if (keys.length > 0) {
        var LinksTitle = document.createElement("div");
        LinksTitle.innerHTML = "<h5>Public Links</h5>";
        LinksTitle.classList.add("col-12");
        this.externalLinksTarget.appendChild(LinksTitle);
        for (let key in data.external_links) {
          let div = document.createElement("div");
          div.classList.add("col-12");
          let a = document.createElement("a");
          a.href = data.external_links[key];
          a.text = key;
          a.target = "_blank";
          div.appendChild(a);
          this.externalLinksTarget.appendChild(div);
        }
      } else {
        var noLink = document.createElement("div");
        noLink.innerHTML = "<h5>No links available</h5>";
        noLink.classList.add("col-12");
        this.externalLinksTarget.appendChild(noLink);
      }
    });
  }
  acConnected(event) {
    var target = event.detail["awardsRecAddTarget"];
    switch (target) {
      case "branch":
        this.branchTarget.disabled = true;
        this.branchTarget.hidden = true;
        this.branchTarget.value = "";
        break;
      case "award":
        this.awardTarget.disabled = true;
        this.awardTarget.value = "Select Award Type First";
        break;
      case "scaMember":
        this.scaMemberTarget.value = "";
        break;
      case "specialty":
        this.specialtyTarget.value = "Select Award First";
        this.specialtyTarget.disabled = true;
        this.specialtyTarget.hidden = true;
        break;
      default:
        event.target.value = "";
        break;
    }
  }
  connect() {
    this.notFoundTarget.checked = false;
    this.notFoundTarget.disabled = true;
    this.reasonTarget.value = "";
    this.personToNotifyTarget.value = "";
    this.eventsTargets.forEach(element => {
      element.checked = false;
    });
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["awards-rec-add"] = AwardsRecommendationAddForm;

/***/ }),

/***/ "./plugins/Awards/Assets/js/controllers/rec-bulk-edit-controller.js":
/*!**************************************************************************!*\
  !*** ./plugins/Awards/Assets/js/controllers/rec-bulk-edit-controller.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class AwardsRecommendationBulkEditForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["bulkIds", "events", "state", "planToGiveBlock", "planToGiveEvent", "givenBlock", "recId", "turboFrame", "givenDate", "closeReason", "closeReasonBlock", "stateRulesBlock"];
  static values = {
    formUrl: String,
    turboFrameUrl: String,
    bulkIds: Array
  };
  static outlets = ['outlet-btn'];
  setId(event) {
    let selected = event.detail.ids;
    if (!selected) {
      return;
    }
    if (!selected.length) {
      return;
    }
    this.bulkIdsValue = selected;
    this.bulkIdsTarget.value = selected;
    let actionUrl = this.element.getAttribute("action");
    //repalce url
    actionUrl = actionUrl.replace(/update-states/, "updateStates");
    this.element.setAttribute("action", actionUrl);
    return;
  }
  outletBtnOutletConnected(outlet, element) {
    outlet.addListener(this.setId.bind(this));
  }
  outletBtnOutletDisconnected(outlet) {
    outlet.removeListener(this.setId.bind(this));
  }
  submit(event) {
    document.getElementById("recommendation_bulk_edit_close").click();
  }
  stateTargetConnected() {
    this.setFieldRules();
  }
  setFieldRules() {
    var rulesstring = this.stateRulesBlockTarget.textContent;
    var rules = JSON.parse(rulesstring);
    this.planToGiveBlockTarget.style.display = "none";
    this.givenBlockTarget.style.display = "none";
    this.planToGiveEventTarget.required = false;
    this.givenDateTarget.required = false;
    this.closeReasonBlockTarget.style.display = "none";
    this.closeReasonTarget.required = false;
    var state = this.stateTarget.value;

    //check status rules for the status
    if (rules[state]) {
      var statusRules = rules[state];
      var controller = this;
      if (statusRules["Visible"]) {
        statusRules["Visible"].forEach(function (field) {
          if (controller[field]) {
            controller[field].style.display = "block";
          }
        });
      }
      if (statusRules["Disabled"]) {
        statusRules["Disabled"].forEach(function (field) {
          if (controller[field]) {
            controller[field].disabled = true;
          }
        });
      }
      if (statusRules["Required"]) {
        statusRules["Required"].forEach(function (field) {
          if (controller[field]) {
            controller[field].required = true;
          }
        });
      }
    }
  }
  connect() {}
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["awards-rec-bulk-edit"] = AwardsRecommendationBulkEditForm;

/***/ }),

/***/ "./plugins/Awards/Assets/js/controllers/rec-edit-controller.js":
/*!*********************************************************************!*\
  !*** ./plugins/Awards/Assets/js/controllers/rec-edit-controller.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class AwardsRecommendationEditForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["scaMember", "notFound", "branch", "externalLinks", "domain", "award", "reason", "events", "specialty", "state", "planToGiveBlock", "planToGiveEvent", "givenBlock", "recId", "turboFrame", "givenDate", "closeReason", "closeReasonBlock", "stateRulesBlock"];
  static values = {
    publicProfileUrl: String,
    awardListUrl: String,
    formUrl: String,
    turboFrameUrl: String
  };
  static outlets = ['outlet-btn'];
  setId(event) {
    this.turboFrameTarget.setAttribute("src", this.turboFrameUrlValue + "/" + event.detail.id);
    this.element.setAttribute("action", this.formUrlValue + "/" + event.detail.id);
  }
  outletBtnOutletConnected(outlet, element) {
    outlet.addListener(this.setId.bind(this));
  }
  outletBtnOutletDisconnected(outlet) {
    outlet.removeListener(this.setId.bind(this));
  }
  submit(event) {
    this.notFoundTarget.disabled = false;
    this.scaMemberTarget.disabled = false;
    this.specialtyTarget.disabled = false;
  }
  setAward(event) {
    let awardId = event.target.dataset.awardId;
    this.awardTarget.value = awardId;
    if (this.awardTarget.value != "") {
      this.populateSpecialties(event);
    }
  }
  populateAwardDescriptions(event) {
    let url = this.awardListUrlValue + "/" + event.target.value;
    fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
      this.awardTarget.value = "";
      let active = "active";
      let show = "show";
      let selected = "true";
      let awardList = [];
      if (data.length > 0) {
        data.forEach(function (award) {
          awardList.push({
            value: award.id,
            text: award.name,
            data: award
          });
        });
        this.awardTarget.options = awardList;
        this.awardTarget.disabled = false;
        if (this.awardTarget.dataset.acInitSelectionValue) {
          let val = JSON.parse(this.awardTarget.dataset.acInitSelectionValue);
          this.awardTarget.value = val.value;
          if (this.awardTarget.value != "") {
            this.populateSpecialties({
              target: {
                value: val.value
              }
            });
          }
        }
      } else {
        this.awardTarget.options = [{
          value: "No awards available",
          text: "No awards available"
        }];
        this.awardTarget.value = "No awards available";
        this.awardTarget.disabled = true;
        this.specialtyTarget.options = [{
          value: "No specialties available",
          text: "No specialties available"
        }];
        this.specialtyTarget.value = "No specialties available";
        this.specialtyTarget.disabled = true;
        this.specialtyTarget.hidden = true;
      }
    });
  }
  populateSpecialties(event) {
    let awardId = this.awardTarget.value;
    let options = this.awardTarget.options;
    let award = this.awardTarget.options.find(award => award.value == awardId);
    let specialtyArray = [];
    if (award.data.specialties != null && award.data.specialties.length > 0) {
      award.data.specialties.forEach(function (specialty) {
        specialtyArray.push({
          value: specialty,
          text: specialty
        });
      });
      this.specialtyTarget.options = specialtyArray;
      this.specialtyTarget.value = "";
      this.specialtyTarget.disabled = false;
      this.specialtyTarget.hidden = false;
      if (this.specialtyTarget.dataset.acInitSelectionValue) {
        let val = JSON.parse(this.specialtyTarget.dataset.acInitSelectionValue);
        this.specialtyTarget.value = val.value;
      }
    } else {
      this.specialtyTarget.options = [{
        value: "No specialties available",
        text: "No specialties available"
      }];
      this.specialtyTarget.value = "No specialties available";
      this.specialtyTarget.disabled = true;
      this.specialtyTarget.hidden = true;
    }
  }
  loadScaMemberInfo(event) {
    this.externalLinksTarget.innerHTML = "";
    let memberId = Number(event.target.value.replace(/_/g, ""));
    if (memberId > 0) {
      this.notFoundTarget.checked = false;
      this.branchTarget.hidden = true;
      this.branchTarget.disabled = true;
      this.loadMember(memberId);
    } else {
      this.notFoundTarget.checked = true;
      this.branchTarget.hidden = false;
      this.branchTarget.disabled = false;
      this.branchTarget.focus();
    }
  }
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  loadMember(memberId) {
    let url = this.publicProfileUrlValue + "/" + memberId;
    fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
      this.externalLinksTarget.innerHTML = "";
      let keys = Object.keys(data.external_links);
      if (keys.length > 0) {
        var LinksTitle = document.createElement("div");
        LinksTitle.innerHTML = "<h5>Public Links</h5>";
        LinksTitle.classList.add("col-12");
        this.externalLinksTarget.appendChild(LinksTitle);
        for (let key in data.external_links) {
          let div = document.createElement("div");
          div.classList.add("col-12");
          let a = document.createElement("a");
          a.href = data.external_links[key];
          a.text = key;
          a.target = "_blank";
          div.appendChild(a);
          this.externalLinksTarget.appendChild(div);
        }
      } else {
        var noLink = document.createElement("div");
        noLink.innerHTML = "<h5>No links available</h5>";
        noLink.classList.add("col-12");
        this.externalLinksTarget.appendChild(noLink);
      }
    });
  }
  scaMemberTargetConnected() {
    if (this.scaMemberTarget.value != "") {
      this.loadScaMemberInfo({
        target: {
          value: this.scaMemberTarget.value
        }
      });
    }
  }
  stateTargetConnected() {
    console.log("status connected");
    this.setFieldRules();
  }
  setFieldRules() {
    console.log("setting field rules");
    var rulesstring = this.stateRulesBlockTarget.textContent;
    var rules = JSON.parse(rulesstring);
    if (this.specialtyTarget.options.length == 0) {
      this.specialtyTarget.hidden = true;
      this.specialtyTarget.disabled = true;
    }
    this.planToGiveBlockTarget.style.display = "none";
    this.givenBlockTarget.style.display = "none";
    this.domainTarget.disabled = false;
    this.awardTarget.disabled = false;
    this.specialtyTarget.disabled = this.specialtyTarget.hidden;
    this.scaMemberTarget.disabled = false;
    this.planToGiveEventTarget.required = false;
    this.givenDateTarget.required = false;
    this.closeReasonBlockTarget.style.display = "none";
    this.closeReasonTarget.required = false;
    if (this.notFoundTarget.checked) {
      this.branchTarget.disabled = false;
      this.branchTarget.hidden = false;
    } else {
      this.branchTarget.disabled = true;
      this.branchTarget.hidden = true;
    }
    var state = this.stateTarget.value;

    //check status rules for the status
    if (rules[state]) {
      var statusRules = rules[state];
      var controller = this;
      if (statusRules["Visible"]) {
        statusRules["Visible"].forEach(function (field) {
          if (controller[field]) {
            controller[field].style.display = "block";
          }
        });
      }
      if (statusRules["Disabled"]) {
        statusRules["Disabled"].forEach(function (field) {
          if (controller[field]) {
            controller[field].disabled = true;
          }
        });
      }
      if (statusRules["Required"]) {
        statusRules["Required"].forEach(function (field) {
          if (controller[field]) {
            controller[field].required = true;
          }
        });
      }
    }
  }
  connect() {}
  recIdTargetConnected() {
    let recId = this.recIdTarget.value;
    let actionUrl = this.element.getAttribute("action");
    //trim the last / off of the end of the action url
    actionUrl = actionUrl.replace(/\/\d+$/, "");
    actionUrl = actionUrl + "/" + recId;
    this.element.setAttribute("action", actionUrl);
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["awards-rec-edit"] = AwardsRecommendationEditForm;

/***/ }),

/***/ "./plugins/Awards/Assets/js/controllers/rec-quick-edit-controller.js":
/*!***************************************************************************!*\
  !*** ./plugins/Awards/Assets/js/controllers/rec-quick-edit-controller.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class AwardsRecommendationQuickEditForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["domain", "award", "reason", "events", "specialty", "state", "planToGiveBlock", "planToGiveEvent", "givenBlock", "recId", "turboFrame", "givenDate", "closeReason", "closeReasonBlock", "stateRulesBlock"];
  static values = {
    publicProfileUrl: String,
    awardListUrl: String,
    formUrl: String,
    turboFrameUrl: String
  };
  static outlets = ['outlet-btn'];
  setId(event) {
    if (event.detail.id) {
      this.turboFrameTarget.setAttribute("src", this.turboFrameUrlValue + "/" + event.detail.id);
      this.element.setAttribute("action", this.formUrlValue + "/" + event.detail.id);
    }
  }
  outletBtnOutletConnected(outlet, element) {
    outlet.addListener(this.setId.bind(this));
  }
  outletBtnOutletDisconnected(outlet) {
    outlet.removeListener(this.setId.bind(this));
  }
  submit(event) {
    document.getElementById("recommendation_edit_close").click();
  }
  setAward(event) {
    let awardId = event.target.dataset.awardId;
    this.awardTarget.value = awardId;
    if (this.awardTarget.value != "") {
      this.populateSpecialties(event);
    }
  }
  populateAwardDescriptions(event) {
    let url = this.awardListUrlValue + "/" + event.target.value;
    fetch(url, this.optionsForFetch()).then(response => response.json()).then(data => {
      this.awardTarget.value = "";
      let active = "active";
      let show = "show";
      let selected = "true";
      let awardList = [];
      if (data.length > 0) {
        data.forEach(function (award) {
          awardList.push({
            value: award.id,
            text: award.name,
            data: award
          });
        });
        this.awardTarget.options = awardList;
        this.awardTarget.disabled = false;
        if (this.awardTarget.dataset.acInitSelectionValue) {
          let val = JSON.parse(this.awardTarget.dataset.acInitSelectionValue);
          this.awardTarget.value = val.value;
          if (this.awardTarget.value != "") {
            this.populateSpecialties({
              target: {
                value: val.value
              }
            });
          }
        }
      } else {
        this.awardTarget.options = [{
          value: "No awards available",
          text: "No awards available"
        }];
        this.awardTarget.value = "No awards available";
        this.awardTarget.disabled = true;
        this.specialtyTarget.options = [{
          value: "No specialties available",
          text: "No specialties available"
        }];
        this.specialtyTarget.value = "No specialties available";
        this.specialtyTarget.disabled = true;
        this.specialtyTarget.hidden = true;
      }
    });
  }
  populateSpecialties(event) {
    let awardId = this.awardTarget.value;
    let options = this.awardTarget.options;
    let award = this.awardTarget.options.find(award => award.value == awardId);
    let specialtyArray = [];
    if (award.data.specialties != null && award.data.specialties.length > 0) {
      award.data.specialties.forEach(function (specialty) {
        specialtyArray.push({
          value: specialty,
          text: specialty
        });
      });
      this.specialtyTarget.options = specialtyArray;
      this.specialtyTarget.value = "";
      this.specialtyTarget.disabled = false;
      this.specialtyTarget.hidden = false;
      if (this.specialtyTarget.dataset.acInitSelectionValue) {
        let val = JSON.parse(this.specialtyTarget.dataset.acInitSelectionValue);
        this.specialtyTarget.value = val.value;
      }
    } else {
      this.specialtyTarget.options = [{
        value: "No specialties available",
        text: "No specialties available"
      }];
      this.specialtyTarget.value = "No specialties available";
      this.specialtyTarget.disabled = true;
      this.specialtyTarget.hidden = true;
    }
  }
  loadScaMemberInfo(event) {}
  optionsForFetch() {
    return {
      headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Accept": "application/json"
      }
    };
  }
  stateTargetConnected() {
    console.log("status connected");
    this.setFieldRules();
  }
  setFieldRules() {
    console.log("setting field rules");
    var rulesstring = this.stateRulesBlockTarget.textContent;
    var rules = JSON.parse(rulesstring);
    if (this.specialtyTarget.options.length == 0) {
      this.specialtyTarget.hidden = true;
      this.specialtyTarget.disabled = true;
    }
    this.planToGiveBlockTarget.style.display = "none";
    this.givenBlockTarget.style.display = "none";
    this.domainTarget.disabled = false;
    this.awardTarget.disabled = false;
    this.specialtyTarget.disabled = this.specialtyTarget.hidden;
    this.planToGiveEventTarget.required = false;
    this.givenDateTarget.required = false;
    this.closeReasonBlockTarget.style.display = "none";
    this.closeReasonTarget.required = false;
    var state = this.stateTarget.value;

    //check status rules for the status
    if (rules[state]) {
      var statusRules = rules[state];
      var controller = this;
      if (statusRules["Visible"]) {
        statusRules["Visible"].forEach(function (field) {
          if (controller[field]) {
            controller[field].style.display = "block";
          }
        });
      }
      if (statusRules["Disabled"]) {
        statusRules["Disabled"].forEach(function (field) {
          if (controller[field]) {
            controller[field].disabled = true;
          }
        });
      }
      if (statusRules["Required"]) {
        statusRules["Required"].forEach(function (field) {
          if (controller[field]) {
            controller[field].required = true;
          }
        });
      }
    }
  }
  connect() {}
  recIdTargetConnected() {
    let recId = this.recIdTarget.value;
    let actionUrl = this.element.getAttribute("action");
    //trim the last / off of the end of the action url
    actionUrl = actionUrl.replace(/\/\d+$/, "");
    actionUrl = actionUrl + "/" + recId;
    this.element.setAttribute("action", actionUrl);
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["awards-rec-quick-edit"] = AwardsRecommendationQuickEditForm;

/***/ }),

/***/ "./plugins/Awards/Assets/js/controllers/rec-table-controller.js":
/*!**********************************************************************!*\
  !*** ./plugins/Awards/Assets/js/controllers/rec-table-controller.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class AwardsRecommendationTable extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["rowCheckbox"];
  static outlets = ["outlet-btn"];
  checked(event) {
    let idList = [];
    this.outletBtnOutlet.btnDataValue = {};
    this.rowCheckboxTargets.forEach(input => {
      if (input.checked) {
        idList.push(input.value);
      }
    });
    if (idList.length > 0) {
      this.outletBtnOutlet.btnDataValue = {
        "ids": idList
      };
    }
  }
  connect() {}
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["awards-rec-table"] = AwardsRecommendationTable;

/***/ }),

/***/ "./plugins/Awards/Assets/js/controllers/recommendation-kanban-controller.js":
/*!**********************************************************************************!*\
  !*** ./plugins/Awards/Assets/js/controllers/recommendation-kanban-controller.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class RecommendationKanbanController extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["stateRulesBlock"];
  static outlets = ["kanban"];
  board = null;
  kanbanOutletConnected(outlet, element) {
    this.board = outlet;
    var controller = this;
    this.board.registerBeforeDrop((recId, toCol) => {
      return controller.checkRules(recId, toCol);
    });
  }
  checkRules(recId, toCol) {
    console.log({
      recId: recId,
      toCol: toCol
    });
    return true;
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["recommendation-kanban"] = RecommendationKanbanController;

/***/ }),

/***/ "./plugins/GitHubIssueSubmitter/assets/js/controllers/github-submitter-controller.js":
/*!*******************************************************************************************!*\
  !*** ./plugins/GitHubIssueSubmitter/assets/js/controllers/github-submitter-controller.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class GitHubSubmitter extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["success", "formBlock", "submitBtn", "issueLink", "form", "modal"];
  static values = {
    url: String
  };
  submit(event) {
    event.preventDefault();
    let url = this.urlValue;
    let form = this.formTarget;
    let formData = new FormData(form);
    fetch(url, {
      method: 'POST',
      body: formData
    }).then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('An error occurred while creating the issue.');
      }
    }).then(data => {
      if (data.message) {
        alert("Error: " + data.message);
        return;
      }
      form.reset();
      this.formBlockTarget.style.display = 'none';
      this.submitBtnTarget.style.display = 'none';
      this.issueLinkTarget.href = data.url;
      this.successTarget.style.display = 'block';
    }).catch(error => {
      console.error(error);
      alert('An error occurred while creating the issue.');
    });
  }
  modalTargetConnected() {
    this.modalTarget.addEventListener('hidden.bs.modal', () => {
      this.formBlockTarget.style.display = 'block';
      this.successTarget.style.display = 'none';
      this.submitBtnTarget.style.display = 'block';
    });
  }
  modalTargetDisconnected() {
    this.modalTarget.removeEventListener('hidden.bs.modal', () => {
      this.formBlockTarget.style.display = 'block';
      this.successTarget.style.display = 'none';
      this.submitBtnTarget.style.display = 'block';
    });
  }
  connect() {
    this.formBlockTarget.style.display = 'block';
    this.successTarget.style.display = 'none';
    this.submitBtnTarget.style.display = 'block';
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["github-submitter"] = GitHubSubmitter;

/***/ }),

/***/ "./plugins/Officers/assets/js/controllers/assign-officer-controller.js":
/*!*****************************************************************************!*\
  !*** ./plugins/Officers/assets/js/controllers/assign-officer-controller.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class OfficersAssignOfficer extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static values = {
    url: String
  };
  static targets = ["assignee", "submitBtn", "deputyDescBlock", "deputyDesc", "office", "endDateBlock", "endDate"];
  static outlets = ["outlet-btn", "member-serach"];
  setOfficeQuestions() {
    this.deputyDescBlockTarget.classList.add('d-none');
    this.endDateBlockTarget.classList.add('d-none');
    this.endDateTarget.disabled = true;
    this.deputyDescTarget.disabled = true;
    var officeVal = this.officeTarget.value;
    // set the member search url by taking the current url and removing the last part (if it is a number) and replacing it with the officeVal
    var url = this.assigneeTarget.getAttribute('data-ac-url-value');
    var urlParts = url.split('/');
    var lastPart = urlParts[urlParts.length - 1];
    if (parseInt(lastPart)) {
      urlParts.pop();
    }
    urlParts.push(officeVal);
    var newUrl = urlParts.join('/');
    this.assigneeTarget.setAttribute('data-ac-url-value', newUrl);
    var office = this.officeTarget.options.find(option => option.value == officeVal);
    if (office) {
      if (office.data.is_deputy) {
        this.deputyDescBlockTarget.classList.remove('d-none');
        this.endDateBlockTarget.classList.remove('d-none');
        this.endDateTarget.disabled = false;
        this.deputyDescTarget.disabled = false;
      }
      this.checkReadyToSubmit();
      return;
    }
  }
  checkReadyToSubmit() {
    var assigneeVal = this.assigneeTarget.value;
    var officeVal = this.officeTarget.value;
    var assignId = parseInt(assigneeVal);
    var officeId = parseInt(officeVal);
    if (assignId > 0 && officeId > 0) {
      this.submitBtnTarget.disabled = false;
    } else {
      this.submitBtnTarget.disabled = true;
    }
  }
  submitBtnTargetConnected() {
    this.submitBtnTarget.disabled = true;
  }
  endDateTargetConnected() {
    this.endDateTarget.disabled = true;
  }
  deputyDescTargetConnected() {
    this.deputyDescTarget.disabled = true;
  }
  connect() {
    this.deputyDescBlockTarget.classList.add('d-none');
    this.endDateBlockTarget.classList.add('d-none');
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["officers-assign-officer"] = OfficersAssignOfficer;

/***/ }),

/***/ "./plugins/Officers/assets/js/controllers/office-form-controller.js":
/*!**************************************************************************!*\
  !*** ./plugins/Officers/assets/js/controllers/office-form-controller.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class OfficeFormController extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["reportsTo", "reportsToBlock", "deputyTo", "deputyToBlock", "isDeputy"];
  toggleIsDeputy() {
    //if the iSDepuy is checked, show the deputyTo select box
    if (this.isDeputyTarget.checked) {
      this.deputyToBlockTarget.hidden = false;
      this.deputyToTarget.disabled = false;
      this.reportsToBlockTarget.hidden = true;
      this.reportsToTarget.disabled = true;
    } else {
      this.deputyToBlockTarget.hidden = true;
      this.deputyToTarget.disabled = true;
      this.deputyToTarget.value = "";
      this.reportsToBlockTarget.hidden = false;
      this.reportsToTarget.disabled = false;
    }
  }
  connect() {
    console.log("connected");
    this.toggleIsDeputy();
  }
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["office-form"] = OfficeFormController;

/***/ }),

/***/ "./plugins/Officers/assets/js/controllers/officer-roster-search-controller.js":
/*!************************************************************************************!*\
  !*** ./plugins/Officers/assets/js/controllers/officer-roster-search-controller.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class OfficerRosterSearchForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["warrantPeriods", "departments", "showBtn"];
  checkEnable() {
    if (this.warrantPeriodsTarget.value > 0 && this.departmentsTarget.value > 0) {
      this.showBtnTarget.disabled = false;
    } else {
      this.showBtnTarget.disabled = true;
    }
  }
  connect() {}
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["officer-roster-search"] = OfficerRosterSearchForm;

/***/ }),

/***/ "./plugins/Officers/assets/js/controllers/officer-roster-table-controller.js":
/*!***********************************************************************************!*\
  !*** ./plugins/Officers/assets/js/controllers/officer-roster-table-controller.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");

class OfficerRosterTableForm extends _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_0__.Controller {
  static targets = ["rowCheckbox"];
  ids = [];
  submitBtn = null;
  static outlets = ['outlet-btn'];
  outletBtnOutletConnected(outlet, element) {
    this.submitBtn = outlet;
    if (this.ids.length > 0) {
      this.submitBtn.element.disabled = false;
    }
  }
  outletBtnOutletDisconnected(outlet) {
    this.submitBtn = null;
  }
  rowCheckboxTargetConnected(element) {
    this.ids.push(element.value);
    console.log(this.ids);
  }
  rowChecked(event) {
    if (event.target.checked) {
      this.ids.push(event.target.value);
    } else {
      this.ids = this.ids.filter(id => id != event.target.value);
    }
    this.submitBtn.element.disabled = true;
    if (this.ids.length > 0) {
      this.submitBtn.element.disabled = false;
    }
    console.log(this.ids);
  }
  connect() {}
}
// add to window.Controllers with a name of the controller
if (!window.Controllers) {
  window.Controllers = {};
}
window.Controllers["officer-roster-table"] = OfficerRosterTableForm;

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = __webpack_require__.g.TYPED_ARRAY_SUPPORT !== undefined
  ? __webpack_require__.g.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/***/ (function(module) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./assets/css/app.css":
/*!****************************!*\
  !*** ./assets/css/app.css ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./assets/css/signin.css":
/*!*******************************!*\
  !*** ./assets/css/signin.css ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./assets/css/cover.css":
/*!******************************!*\
  !*** ./assets/css/cover.css ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./assets/css/dashboard.css":
/*!**********************************!*\
  !*** ./assets/css/dashboard.css ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/guifier/dist/Guifier.js":
/*!**********************************************!*\
  !*** ./node_modules/guifier/dist/Guifier.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ bE; }
/* harmony export */ });
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];
(function(){"use strict";try{if(typeof document<"u"){var e=document.createElement("style");e.appendChild(document.createTextNode('@font-face{font-family:Material Icons Outlined;font-style:normal;font-weight:400;font-display:block;src:url(data:font/woff2;base64,) format("woff2"),url(data:font/woff;base64,) format("woff")}.material-icons-outlined{font-family:Material Icons Outlined;font-weight:400;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-rendering:optimizeLegibility;font-feature-settings:"liga"}.guifierObjectContainerbody{display:grid;grid-template-columns:1fr 1fr;grid-gap:var(--primary-grid-gap);padding:var(--primary-padding)}.guifierObjectLabelContainer{display:flex}.guifierObjectFieldContainer{position:relative}.guifierObjectLabelTextPart{display:flex;justify-content:flex-start;align-items:center;gap:5px;transition:.3s;transform-origin:left bottom;transform:translateY(0);font-weight:700}.guifierDescriptionSymbol{display:flex;justify-content:center;align-items:center;border-radius:100%;border:var(--second-border);width:20px;height:20px;font-size:small;font-weight:bolder;color:var(--second-color);cursor:pointer}.descriptionTooltipRefrence{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.guifierObjectLabelContainer:hover~.guifierDescriptionTooltip{opacity:1}.guifierObjectFieldContainer:hover>.guifierObjectLabelContainer>.guifierObjectLabelTextPart{transform:translateY(-7px)}.guifierObjectLabelButtonsPart{position:relative}.fieldButtons{position:absolute;display:flex;z-index:1;gap:5px;bottom:0px;left:0;padding-bottom:3px;padding-left:10px;pointer-events:none}.fieldButtons>*{color:var(--third-color);border:var(--second-border);padding:5px;border-radius:100%;opacity:0;transform:translateY(75%);transition:.2s ease;cursor:pointer;font-size:large}.guifierMainWrapper{position:relative;height:100%}.guifierContainer{display:flex;flex-direction:column;height:100%;border:var(--primary-border);border-radius:var(--primary-border-radius)}.guifierContainerHeader{position:relative;display:flex;justify-content:space-between;font-size:larger;color:var(--third-color);padding:var(--header-horizontal-padding) var(--primary-grid-gap);padding-right:15px}.guifierContainerHeader .guifierDescriptionTooltip{width:95%}.guifierContainerHeader:hover .guifierDescriptionTooltip{opacity:1}.guifierContainerHeaderButtons{display:flex;align-items:center;font-size:xx-large;gap:10px}.guifierContainerHeaderButtons>*{font-size:25px;cursor:pointer;opacity:0;transform:translateY(75%);transition:.2s ease}.guifierContainerCollapseButton{opacity:1;transform:translateY(0)}.guifierContainerHeaderKeyName{display:flex;align-items:center;gap:5px;font-weight:700}.guifierEmptyContentContianer{display:flex;flex-direction:row;grid-column:span 2;height:175px}.emptyContentContianerWrapper{display:flex;flex-direction:column;justify-content:center;align-items:center;flex:1;padding:0px var(--primary-padding);grid-column:span 2}.guifierArrayContainerbody .emptyContentContianerWrapper{padding:var(--primary-padding)}.guifierEmptyTitle{margin:0;color:var(--third-color);font-size:large}.guifierEmptyParagraph{text-align:center;max-width:375px;margin-top:7.5px;margin-bottom:7.5px;color:#00000080;font-size:medium}.guifierEmptyButton{display:flex;align-items:center;gap:5px;background-color:var(--primary-color);padding:5px 10px 5px 19px;border-radius:var(--primary-border-radius);color:#fff;cursor:pointer;font-weight:700;font-size:small;margin-top:15px}.guifierEmptyButton:hover{background-color:#1d5dffec;background:linear-gradient(rgba(255,255,255,.1),rgba(255,255,255,.1)),linear-gradient(var(--primary-color),var(--primary-color))}.guifierObjectLabelContainer{color:var(--third-color);font-size:medium;margin:3px}.guifierDialogBackgroundContainer{position:absolute;display:flex;justify-content:center;align-items:center;background-color:#ffffff80;top:0;bottom:0;width:100%;height:100%;z-index:1000;transition:.15s;opacity:1;backdrop-filter:blur(2px);border-radius:var(--primary-border-radius);padding:20px}.guifierDialogContainer{display:flex;flex-direction:column;justify-content:space-between;width:100%;height:100%;max-width:450px;max-height:550px;background-color:#fff;box-shadow:#fff 0 0 100px;border:var(--primary-border);border-radius:var(--primary-border-radius)}.guifierDialogContainerTitle{position:relative;display:flex;justify-content:center;align-items:center;font-size:larger;border-bottom:var(--primary-border);padding:15px;gap:5px}.guifierDialogContainerBody{overflow:auto;flex:1}.guifierDialogFooter{display:flex;justify-content:space-evenly;gap:20px;padding:15px;border-top:var(--primary-border)}.guifierDialogButton{display:flex;justify-content:center;align-items:center;padding:12.5px 35px;border-radius:var(--primary-border-radius);cursor:pointer;font-size:15px;font-weight:700}.guifierDialogCancelButton{border:var(--primary-border);background-color:var(--fourth-color);color:var(--third-color)}.guifierDialogCancelButton:hover{background-color:#eeeff3}.guifierDialogConfirmButton{background-color:var(--primary-color);color:#fff}.guifierDialogConfirmButton:hover{background-color:#366fff}.guifierArrayContainerbody{display:flex;flex-direction:column;flex:1;overflow-x:hidden}.guifierArrayFieldContainer{display:flex;align-items:stretch;transition:.15s;border-bottom:1px solid rgba(0,0,0,.075);padding-right:var(--primary-padding);opacity:1;height:100%}.guifierArrayfieldInnerContainer{display:flex;align-items:center;flex:1;width:100%;margin-bottom:var(--second-padding);margin-top:var(--second-padding)}.guifierArrayCollapsibleElement{display:flex;align-items:center;flex:1;justify-content:space-between;height:100%;color:var(--third-color)}.guifierFieldLabelName{display:flex;align-items:center;font-size:larger;height:45px}.guifierArrayLabelContainer{position:relative;display:flex;height:100%;flex-direction:column;align-items:center;justify-content:flex-start;transform:translate(-50%);padding-right:var(--primary-border-width)}.guifierArrayLabelContainerForUpperLevel{transform:none;width:70px}.guifierArrayLabelLineForUpperLevel{position:absolute;width:50%;transform:translate(-50%);border-bottom:var(--primary-dashed-border);margin-left:6px;margin-top:calc(var(--primary-padding) + 12.5px)}.guifierArrayIndexLabel{position:relative;z-index:1;display:flex;justify-content:center;align-items:center;height:35px;width:35px;margin-top:15px;background-color:#fff;border:var(--primary-border);border-radius:100%;color:var(--third-color);background-color:var(--fourth-color);font-weight:700}.guifierArrayMainContainerbody{display:flex}.guifierArrayLevelsContainer{display:flex;height:100%}.guifierArrayLevelElement{width:35px;height:100%;background-color:transparent;border-right:var(--primary-dashed-border)}.guifierArrayLevelElement:first-of-type{width:35px;height:100%;background-color:transparent;border-right:var(--primary-dashed-border)}.guifierCollapsibleElementContent{display:flex;position:relative;z-index:1;height:100%;border-bottom:1px solid rgba(0,0,0,.075)}.guifierCollapsibleElementInnerContentContainer{padding:20px 20px 20px 35px;flex:1}.guifierArrayFieldDeleteButton{display:flex;align-items:flex-start;color:var(--third-color);width:0px;padding-left:0;transition:.3s;opacity:0;cursor:pointer;margin-top:var(--primary-padding)}.guifierArrayFieldContainer:hover .guifierArrayFieldDeleteButton{padding-left:var(--second-padding);width:34px;opacity:1}.guifierContainerFieldType{height:66px}.guifierTextField{padding:7.5px 15px;border-radius:var(--primary-border-radius);border:var(--primary-border);outline:3px solid transparent;transition:.15s;width:100%;height:45px;font-size:medium}.guifierTextField:focus{border:2px solid var(--primary-color);outline:3px solid var(--second-color)}.guifierNumberInputContainer{display:flex;gap:6px;position:relative;flex:1}.guifierNumberField{padding:7.5px 15px;border-radius:var(--primary-border-radius);border:var(--primary-border);outline:3px solid transparent;transition:.15s;width:100%;height:45px;font-size:medium}.guifierNumberField:focus{border:2px solid var(--primary-color);outline:3px solid var(--second-color)}.guifierNumberField::-webkit-inner-spin-button,.guifierNumberField::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.guifierNumberField{appearance:textfield;-moz-appearance:textfield}.guifierButtonsContainer{display:flex;flex-direction:column-reverse;flex:1}.guifierNumberButton{display:flex;flex:1;justify-content:center;align-items:center;width:30px;color:#888e9d;cursor:pointer;border:var(--primary-border)}.guifierNumberButton:first-child{border-radius:0 0 var(--primary-border-radius) var(--primary-border-radius)}.guifierNumberButton:last-child{border-radius:var(--primary-border-radius) var(--primary-border-radius) 0 0;border-bottom:none}.guifierNumberButton span{font-size:small}.guifierBooleanField{display:flex;gap:2px;height:45px;padding:4px;border:var(--primary-border);border-radius:var(--primary-border-radius);width:fit-content;color:#00000080;overflow:hidden;font-size:medium}.guifierBooleanElement{display:flex;justify-content:center;align-items:center;padding:0 10px;border-radius:var(--primary-border-radius);border:2px solid transparent;transition:.15s;cursor:pointer}.guifierBooleanTrueElementSelect{background-color:#bcffc3;border:2px solid #A0E4A7}.guifierBooleanFalseElementSelect{background-color:#ffbcbc;border:2px solid #E4A0A0}.guifierNullField{display:flex;align-items:center;justify-content:center;color:#888e9d;border-radius:var(--primary-border-radius);border:var(--primary-border);height:45px;width:fit-content;padding:20px;gap:7.5px}.guifierCardsContainer{display:grid;grid-template-columns:1fr 1fr;gap:10px}.guifierCard{box-sizing:content-box!important;display:flex;flex-direction:column;justify-content:center;align-items:center;border:var(--primary-border);border-radius:var(--primary-border-radius);padding:15px;height:75px;cursor:pointer;transition:.15s;outline:3px solid transparent}.guifierCard:hover{border-color:#00000040;background-color:#00000006}.cardIconElement .material-icons-outlined{font-size:40px!important;color:#000000bf}.guifierSelectedCard{border-color:var(--primary-color)!important;outline:3px solid var(--second-color)}.cardTextElement{margin-top:10px}:root{--primary-color: #1D5EFF;--second-color: #B7C7F2;--third-color: #575757;--fourth-color: #F5F7FB;--fifth-color: #FFFFFF;--sixth-color: #CDD0DE;--primary-padding: 20px;--second-padding: 10px;--primary-grid-gap: 20px;--header-horizontal-padding: 15px;--primary-border-radius: 10px;--primary-border-width: 2px;--primary-border: var(--primary-border-width) solid var(--sixth-color);--second-border: 1px solid var(--sixth-color);--primary-dashed-border: var(--primary-border-width) dashed var(--sixth-color);--primary-selected-border: var(--primary-border-width) solid #1D5EFF}.guifierMainWrapper *,.guifierErrorContainer *{box-sizing:border-box;font-family:Roboto,Arial,Helvetica,sans-serif}.material-icons-outlined{font-family:Material Icons Outlined}.material-icons-outlined::selection{background-color:transparent}.guifierFullHeight{height:100%}.guifierHeightZero{height:0!important}.guifierPrimaryBgColor{background-color:var(--fourth-color)}.guifierSecondaryBgColor{background-color:var(--fifth-color)}.guifierPrimaryMarginTop{margin-top:var(--primary-padding)}.guifierPrimaryMarginBottom{margin-bottom:var(--primary-padding)}.guifierPrimaryTextColor{color:var(--third-color)}.guifierPrimaryTextMediumSize{font-size:medium}.guifierRotate{transform:rotate(180deg)}.guifierPrimaryBottomBorder{border-bottom:var(--primary-border)}.guifierNoneDisplay{display:none!important}.guifierOddBackground{background-color:#49494909}.guifierOpacityZero{opacity:0;pointer-events:none}.guifierShowElementWithAnimation{opacity:1;transform:translateY(0)}.guifierRemovePadding{padding:0!important}.guifierErrorContainer{background-color:#ff00001a;border-radius:var(--primary-border-radius);border:2px solid rgba(255,0,0,.25);height:100%}.guifierErrorContainerError{border-bottom:2px solid rgba(255,0,0,.25);padding:var(--primary-padding);font-weight:700;color:maroon}.guifierErrorContainerContent{padding:var(--primary-padding);font-weight:700;color:#b60000}.guifierDescriptionTooltip{position:absolute;bottom:15px;left:15px;width:100%;background-color:#fff;opacity:0;height:fit-content;font-weight:400;font-size:medium;z-index:1;transition:.25s;pointer-events:none;color:var(--third-color);border-radius:var(--primary-border-radius)}.guifierDescriptionTooltip .descriptionHeader{display:flex;align-items:center;gap:7.5px;border:var(--primary-border);padding:7.5px;border-radius:var(--primary-border-radius) var(--primary-border-radius) 0 0;font-weight:700}.guifierDescriptionTooltip .descriptionHeader .guifierDescriptionSymbol{color:#00000080;border-color:#00000080}.guifierDescriptionTooltip .descriptionHeader .descriptionFieldType{color:#7b68ee}.guifierDescriptionTooltip .descriptionBody{border:var(--primary-border);border-top:none;padding:var(--second-padding);border-radius:0 0 var(--primary-border-radius) var(--primary-border-radius)}')),document.head.appendChild(e)}}catch(o){console.error("vite-plugin-css-injected-by-js",o)}})();
var f_ = Object.defineProperty;
var d_ = (e, t, r) => t in e ? f_(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r;
var B = (e, t, r) => (d_(e, typeof t != "symbol" ? t + "" : t, r), r), Zc = (e, t, r) => {
  if (!t.has(e))
    throw TypeError("Cannot " + r);
};
var Pe = (e, t, r) => (Zc(e, t, "read from private field"), r ? r.call(e) : t.get(e)), as = (e, t, r) => {
  if (t.has(e))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(e) : t.set(e, r);
}, Mt = (e, t, r, s) => (Zc(e, t, "write to private field"), s ? s.call(e, r) : t.set(e, r), r);
var Wn = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function $o(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var Of = { exports: {} };
(function(e) {
  var t = function() {
    function r(T, A) {
      return A != null && T instanceof A;
    }
    var s;
    try {
      s = Map;
    } catch {
      s = function() {
      };
    }
    var a;
    try {
      a = Set;
    } catch {
      a = function() {
      };
    }
    var l;
    try {
      l = Promise;
    } catch {
      l = function() {
      };
    }
    function u(T, A, C, E, P) {
      typeof A == "object" && (C = A.depth, E = A.prototype, P = A.includeNonEnumerable, A = A.circular);
      var U = [], H = [], $ = typeof Buffer < "u";
      typeof A > "u" && (A = !0), typeof C > "u" && (C = 1 / 0);
      function Z(k, se) {
        if (k === null)
          return null;
        if (se === 0)
          return k;
        var Y, ge;
        if (typeof k != "object")
          return k;
        if (r(k, s))
          Y = new s();
        else if (r(k, a))
          Y = new a();
        else if (r(k, l))
          Y = new l(function(Se, $e) {
            k.then(function(Nn) {
              Se(Z(Nn, se - 1));
            }, function(Nn) {
              $e(Z(Nn, se - 1));
            });
          });
        else if (u.__isArray(k))
          Y = [];
        else if (u.__isRegExp(k))
          Y = new RegExp(k.source, x(k)), k.lastIndex && (Y.lastIndex = k.lastIndex);
        else if (u.__isDate(k))
          Y = new Date(k.getTime());
        else {
          if ($ && Buffer.isBuffer(k))
            return Buffer.allocUnsafe ? Y = Buffer.allocUnsafe(k.length) : Y = new Buffer(k.length), k.copy(Y), Y;
          r(k, Error) ? Y = Object.create(k) : typeof E > "u" ? (ge = Object.getPrototypeOf(k), Y = Object.create(ge)) : (Y = Object.create(E), ge = E);
        }
        if (A) {
          var jt = U.indexOf(k);
          if (jt != -1)
            return H[jt];
          U.push(k), H.push(Y);
        }
        r(k, s) && k.forEach(function(Se, $e) {
          var Nn = Z($e, se - 1), er = Z(Se, se - 1);
          Y.set(Nn, er);
        }), r(k, a) && k.forEach(function(Se) {
          var $e = Z(Se, se - 1);
          Y.add($e);
        });
        for (var Me in k) {
          var cn;
          ge && (cn = Object.getOwnPropertyDescriptor(ge, Me)), !(cn && cn.set == null) && (Y[Me] = Z(k[Me], se - 1));
        }
        if (Object.getOwnPropertySymbols)
          for (var dt = Object.getOwnPropertySymbols(k), Me = 0; Me < dt.length; Me++) {
            var Gt = dt[Me], Ze = Object.getOwnPropertyDescriptor(k, Gt);
            Ze && !Ze.enumerable && !P || (Y[Gt] = Z(k[Gt], se - 1), Ze.enumerable || Object.defineProperty(Y, Gt, {
              enumerable: !1
            }));
          }
        if (P)
          for (var At = Object.getOwnPropertyNames(k), Me = 0; Me < At.length; Me++) {
            var it = At[Me], Ze = Object.getOwnPropertyDescriptor(k, it);
            Ze && Ze.enumerable || (Y[it] = Z(k[it], se - 1), Object.defineProperty(Y, it, {
              enumerable: !1
            }));
          }
        return Y;
      }
      return Z(T, C);
    }
    u.clonePrototype = function(A) {
      if (A === null)
        return null;
      var C = function() {
      };
      return C.prototype = A, new C();
    };
    function f(T) {
      return Object.prototype.toString.call(T);
    }
    u.__objToStr = f;
    function d(T) {
      return typeof T == "object" && f(T) === "[object Date]";
    }
    u.__isDate = d;
    function g(T) {
      return typeof T == "object" && f(T) === "[object Array]";
    }
    u.__isArray = g;
    function _(T) {
      return typeof T == "object" && f(T) === "[object RegExp]";
    }
    u.__isRegExp = _;
    function x(T) {
      var A = "";
      return T.global && (A += "g"), T.ignoreCase && (A += "i"), T.multiline && (A += "m"), A;
    }
    return u.__getRegExpFlags = x, u;
  }();
  e.exports && (e.exports = t);
})(Of);
var h_ = Of.exports;
const Vc = /* @__PURE__ */ $o(h_);
var Do = {}, ks = {};
(function(e) {
  const t = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", r = t + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040", s = "[" + t + "][" + r + "]*", a = new RegExp("^" + s + "$"), l = function(f, d) {
    const g = [];
    let _ = d.exec(f);
    for (; _; ) {
      const x = [];
      x.startIndex = d.lastIndex - _[0].length;
      const T = _.length;
      for (let A = 0; A < T; A++)
        x.push(_[A]);
      g.push(x), _ = d.exec(f);
    }
    return g;
  }, u = function(f) {
    const d = a.exec(f);
    return !(d === null || typeof d > "u");
  };
  e.isExist = function(f) {
    return typeof f < "u";
  }, e.isEmptyObject = function(f) {
    return Object.keys(f).length === 0;
  }, e.merge = function(f, d, g) {
    if (d) {
      const _ = Object.keys(d), x = _.length;
      for (let T = 0; T < x; T++)
        g === "strict" ? f[_[T]] = [d[_[T]]] : f[_[T]] = d[_[T]];
    }
  }, e.getValue = function(f) {
    return e.isExist(f) ? f : "";
  }, e.isName = u, e.getAllMatches = l, e.nameRegexp = s;
})(ks);
const Wo = ks, p_ = {
  allowBooleanAttributes: !1,
  //A tag can have attributes without any value
  unpairedTags: []
};
Do.validate = function(e, t) {
  t = Object.assign({}, p_, t);
  const r = [];
  let s = !1, a = !1;
  e[0] === "\uFEFF" && (e = e.substr(1));
  for (let l = 0; l < e.length; l++)
    if (e[l] === "<" && e[l + 1] === "?") {
      if (l += 2, l = Gc(e, l), l.err)
        return l;
    } else if (e[l] === "<") {
      let u = l;
      if (l++, e[l] === "!") {
        l = Yc(e, l);
        continue;
      } else {
        let f = !1;
        e[l] === "/" && (f = !0, l++);
        let d = "";
        for (; l < e.length && e[l] !== ">" && e[l] !== " " && e[l] !== "	" && e[l] !== `
` && e[l] !== "\r"; l++)
          d += e[l];
        if (d = d.trim(), d[d.length - 1] === "/" && (d = d.substring(0, d.length - 1), l--), !b_(d)) {
          let x;
          return d.trim().length === 0 ? x = "Invalid space after '<'." : x = "Tag '" + d + "' is an invalid name.", Ce("InvalidTag", x, Qe(e, l));
        }
        const g = v_(e, l);
        if (g === !1)
          return Ce("InvalidAttr", "Attributes for '" + d + "' have open quote.", Qe(e, l));
        let _ = g.value;
        if (l = g.index, _[_.length - 1] === "/") {
          const x = l - _.length;
          _ = _.substring(0, _.length - 1);
          const T = qc(_, t);
          if (T === !0)
            s = !0;
          else
            return Ce(T.err.code, T.err.msg, Qe(e, x + T.err.line));
        } else if (f)
          if (g.tagClosed) {
            if (_.trim().length > 0)
              return Ce("InvalidTag", "Closing tag '" + d + "' can't have attributes or invalid starting.", Qe(e, u));
            {
              const x = r.pop();
              if (d !== x.tagName) {
                let T = Qe(e, x.tagStartPos);
                return Ce(
                  "InvalidTag",
                  "Expected closing tag '" + x.tagName + "' (opened in line " + T.line + ", col " + T.col + ") instead of closing tag '" + d + "'.",
                  Qe(e, u)
                );
              }
              r.length == 0 && (a = !0);
            }
          } else
            return Ce("InvalidTag", "Closing tag '" + d + "' doesn't have proper closing.", Qe(e, l));
        else {
          const x = qc(_, t);
          if (x !== !0)
            return Ce(x.err.code, x.err.msg, Qe(e, l - _.length + x.err.line));
          if (a === !0)
            return Ce("InvalidXml", "Multiple possible root nodes found.", Qe(e, l));
          t.unpairedTags.indexOf(d) !== -1 || r.push({ tagName: d, tagStartPos: u }), s = !0;
        }
        for (l++; l < e.length; l++)
          if (e[l] === "<")
            if (e[l + 1] === "!") {
              l++, l = Yc(e, l);
              continue;
            } else if (e[l + 1] === "?") {
              if (l = Gc(e, ++l), l.err)
                return l;
            } else
              break;
          else if (e[l] === "&") {
            const x = x_(e, l);
            if (x == -1)
              return Ce("InvalidChar", "char '&' is not expected.", Qe(e, l));
            l = x;
          } else if (a === !0 && !jc(e[l]))
            return Ce("InvalidXml", "Extra text at the end", Qe(e, l));
        e[l] === "<" && l--;
      }
    } else {
      if (jc(e[l]))
        continue;
      return Ce("InvalidChar", "char '" + e[l] + "' is not expected.", Qe(e, l));
    }
  if (s) {
    if (r.length == 1)
      return Ce("InvalidTag", "Unclosed tag '" + r[0].tagName + "'.", Qe(e, r[0].tagStartPos));
    if (r.length > 0)
      return Ce("InvalidXml", "Invalid '" + JSON.stringify(r.map((l) => l.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
  } else
    return Ce("InvalidXml", "Start tag expected.", 1);
  return !0;
};
function jc(e) {
  return e === " " || e === "	" || e === `
` || e === "\r";
}
function Gc(e, t) {
  const r = t;
  for (; t < e.length; t++)
    if (e[t] == "?" || e[t] == " ") {
      const s = e.substr(r, t - r);
      if (t > 5 && s === "xml")
        return Ce("InvalidXml", "XML declaration allowed only at the start of the document.", Qe(e, t));
      if (e[t] == "?" && e[t + 1] == ">") {
        t++;
        break;
      } else
        continue;
    }
  return t;
}
function Yc(e, t) {
  if (e.length > t + 5 && e[t + 1] === "-" && e[t + 2] === "-") {
    for (t += 3; t < e.length; t++)
      if (e[t] === "-" && e[t + 1] === "-" && e[t + 2] === ">") {
        t += 2;
        break;
      }
  } else if (e.length > t + 8 && e[t + 1] === "D" && e[t + 2] === "O" && e[t + 3] === "C" && e[t + 4] === "T" && e[t + 5] === "Y" && e[t + 6] === "P" && e[t + 7] === "E") {
    let r = 1;
    for (t += 8; t < e.length; t++)
      if (e[t] === "<")
        r++;
      else if (e[t] === ">" && (r--, r === 0))
        break;
  } else if (e.length > t + 9 && e[t + 1] === "[" && e[t + 2] === "C" && e[t + 3] === "D" && e[t + 4] === "A" && e[t + 5] === "T" && e[t + 6] === "A" && e[t + 7] === "[") {
    for (t += 8; t < e.length; t++)
      if (e[t] === "]" && e[t + 1] === "]" && e[t + 2] === ">") {
        t += 2;
        break;
      }
  }
  return t;
}
const g_ = '"', m_ = "'";
function v_(e, t) {
  let r = "", s = "", a = !1;
  for (; t < e.length; t++) {
    if (e[t] === g_ || e[t] === m_)
      s === "" ? s = e[t] : s !== e[t] || (s = "");
    else if (e[t] === ">" && s === "") {
      a = !0;
      break;
    }
    r += e[t];
  }
  return s !== "" ? !1 : {
    value: r,
    index: t,
    tagClosed: a
  };
}
const y_ = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
function qc(e, t) {
  const r = Wo.getAllMatches(e, y_), s = {};
  for (let a = 0; a < r.length; a++) {
    if (r[a][1].length === 0)
      return Ce("InvalidAttr", "Attribute '" + r[a][2] + "' has no space in starting.", ni(r[a]));
    if (r[a][3] !== void 0 && r[a][4] === void 0)
      return Ce("InvalidAttr", "Attribute '" + r[a][2] + "' is without value.", ni(r[a]));
    if (r[a][3] === void 0 && !t.allowBooleanAttributes)
      return Ce("InvalidAttr", "boolean attribute '" + r[a][2] + "' is not allowed.", ni(r[a]));
    const l = r[a][2];
    if (!w_(l))
      return Ce("InvalidAttr", "Attribute '" + l + "' is an invalid name.", ni(r[a]));
    if (!s.hasOwnProperty(l))
      s[l] = 1;
    else
      return Ce("InvalidAttr", "Attribute '" + l + "' is repeated.", ni(r[a]));
  }
  return !0;
}
function __(e, t) {
  let r = /\d/;
  for (e[t] === "x" && (t++, r = /[\da-fA-F]/); t < e.length; t++) {
    if (e[t] === ";")
      return t;
    if (!e[t].match(r))
      break;
  }
  return -1;
}
function x_(e, t) {
  if (t++, e[t] === ";")
    return -1;
  if (e[t] === "#")
    return t++, __(e, t);
  let r = 0;
  for (; t < e.length; t++, r++)
    if (!(e[t].match(/\w/) && r < 20)) {
      if (e[t] === ";")
        break;
      return -1;
    }
  return t;
}
function Ce(e, t, r) {
  return {
    err: {
      code: e,
      msg: t,
      line: r.line || r,
      col: r.col
    }
  };
}
function w_(e) {
  return Wo.isName(e);
}
function b_(e) {
  return Wo.isName(e);
}
function Qe(e, t) {
  const r = e.substring(0, t).split(/\r?\n/);
  return {
    line: r.length,
    // column number is last line's length + 1, because column numbering starts at 1:
    col: r[r.length - 1].length + 1
  };
}
function ni(e) {
  return e.startIndex + e[1].length;
}
var Uo = {};
const Nf = {
  preserveOrder: !1,
  attributeNamePrefix: "@_",
  attributesGroupName: !1,
  textNodeName: "#text",
  ignoreAttributes: !0,
  removeNSPrefix: !1,
  // remove NS from tag name or attribute name if true
  allowBooleanAttributes: !1,
  //a tag can have attributes without any value
  //ignoreRootElement : false,
  parseTagValue: !0,
  parseAttributeValue: !1,
  trimValues: !0,
  //Trim string values of tag and attributes
  cdataPropName: !1,
  numberParseOptions: {
    hex: !0,
    leadingZeros: !0,
    eNotation: !0
  },
  tagValueProcessor: function(e, t) {
    return t;
  },
  attributeValueProcessor: function(e, t) {
    return t;
  },
  stopNodes: [],
  //nested tags will not be parsed even for errors
  alwaysCreateTextNode: !1,
  isArray: () => !1,
  commentPropName: !1,
  unpairedTags: [],
  processEntities: !0,
  htmlEntities: !1,
  ignoreDeclaration: !1,
  ignorePiTags: !1,
  transformTagName: !1,
  transformAttributeName: !1,
  updateTag: function(e, t, r) {
    return e;
  }
  // skipEmptyListItem: false
}, E_ = function(e) {
  return Object.assign({}, Nf, e);
};
Uo.buildOptions = E_;
Uo.defaultOptions = Nf;
class A_ {
  constructor(t) {
    this.tagname = t, this.child = [], this[":@"] = {};
  }
  add(t, r) {
    t === "__proto__" && (t = "#__proto__"), this.child.push({ [t]: r });
  }
  addChild(t) {
    t.tagname === "__proto__" && (t.tagname = "#__proto__"), t[":@"] && Object.keys(t[":@"]).length > 0 ? this.child.push({ [t.tagname]: t.child, [":@"]: t[":@"] }) : this.child.push({ [t.tagname]: t.child });
  }
}
var C_ = A_;
const T_ = ks;
function S_(e, t) {
  const r = {};
  if (e[t + 3] === "O" && e[t + 4] === "C" && e[t + 5] === "T" && e[t + 6] === "Y" && e[t + 7] === "P" && e[t + 8] === "E") {
    t = t + 9;
    let s = 1, a = !1, l = !1, u = "";
    for (; t < e.length; t++)
      if (e[t] === "<" && !l) {
        if (a && N_(e, t))
          t += 7, [entityName, val, t] = L_(e, t + 1), val.indexOf("&") === -1 && (r[P_(entityName)] = {
            regx: RegExp(`&${entityName};`, "g"),
            val
          });
        else if (a && I_(e, t))
          t += 8;
        else if (a && k_(e, t))
          t += 8;
        else if (a && R_(e, t))
          t += 9;
        else if (O_)
          l = !0;
        else
          throw new Error("Invalid DOCTYPE");
        s++, u = "";
      } else if (e[t] === ">") {
        if (l ? e[t - 1] === "-" && e[t - 2] === "-" && (l = !1, s--) : s--, s === 0)
          break;
      } else
        e[t] === "[" ? a = !0 : u += e[t];
    if (s !== 0)
      throw new Error("Unclosed DOCTYPE");
  } else
    throw new Error("Invalid Tag instead of DOCTYPE");
  return { entities: r, i: t };
}
function L_(e, t) {
  let r = "";
  for (; t < e.length && e[t] !== "'" && e[t] !== '"'; t++)
    r += e[t];
  if (r = r.trim(), r.indexOf(" ") !== -1)
    throw new Error("External entites are not supported");
  const s = e[t++];
  let a = "";
  for (; t < e.length && e[t] !== s; t++)
    a += e[t];
  return [r, a, t];
}
function O_(e, t) {
  return e[t + 1] === "!" && e[t + 2] === "-" && e[t + 3] === "-";
}
function N_(e, t) {
  return e[t + 1] === "!" && e[t + 2] === "E" && e[t + 3] === "N" && e[t + 4] === "T" && e[t + 5] === "I" && e[t + 6] === "T" && e[t + 7] === "Y";
}
function I_(e, t) {
  return e[t + 1] === "!" && e[t + 2] === "E" && e[t + 3] === "L" && e[t + 4] === "E" && e[t + 5] === "M" && e[t + 6] === "E" && e[t + 7] === "N" && e[t + 8] === "T";
}
function k_(e, t) {
  return e[t + 1] === "!" && e[t + 2] === "A" && e[t + 3] === "T" && e[t + 4] === "T" && e[t + 5] === "L" && e[t + 6] === "I" && e[t + 7] === "S" && e[t + 8] === "T";
}
function R_(e, t) {
  return e[t + 1] === "!" && e[t + 2] === "N" && e[t + 3] === "O" && e[t + 4] === "T" && e[t + 5] === "A" && e[t + 6] === "T" && e[t + 7] === "I" && e[t + 8] === "O" && e[t + 9] === "N";
}
function P_(e) {
  if (T_.isName(e))
    return e;
  throw new Error(`Invalid entity name ${e}`);
}
var F_ = S_;
const B_ = /^[-+]?0x[a-fA-F0-9]+$/, M_ = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
!Number.parseInt && window.parseInt && (Number.parseInt = window.parseInt);
!Number.parseFloat && window.parseFloat && (Number.parseFloat = window.parseFloat);
const $_ = {
  hex: !0,
  leadingZeros: !0,
  decimalPoint: ".",
  eNotation: !0
  //skipLike: /regex/
};
function D_(e, t = {}) {
  if (t = Object.assign({}, $_, t), !e || typeof e != "string")
    return e;
  let r = e.trim();
  if (t.skipLike !== void 0 && t.skipLike.test(r))
    return e;
  if (t.hex && B_.test(r))
    return Number.parseInt(r, 16);
  {
    const s = M_.exec(r);
    if (s) {
      const a = s[1], l = s[2];
      let u = W_(s[3]);
      const f = s[4] || s[6];
      if (!t.leadingZeros && l.length > 0 && a && r[2] !== ".")
        return e;
      if (!t.leadingZeros && l.length > 0 && !a && r[1] !== ".")
        return e;
      {
        const d = Number(r), g = "" + d;
        return g.search(/[eE]/) !== -1 || f ? t.eNotation ? d : e : r.indexOf(".") !== -1 ? g === "0" && u === "" || g === u || a && g === "-" + u ? d : e : l ? u === g || a + u === g ? d : e : r === g || r === a + g ? d : e;
      }
    } else
      return e;
  }
}
function W_(e) {
  return e && e.indexOf(".") !== -1 && (e = e.replace(/0+$/, ""), e === "." ? e = "0" : e[0] === "." ? e = "0" + e : e[e.length - 1] === "." && (e = e.substr(0, e.length - 1))), e;
}
var U_ = D_;
const Ho = ks, ri = C_, H_ = F_, Z_ = U_;
"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, Ho.nameRegexp);
let V_ = class {
  constructor(t) {
    this.options = t, this.currentNode = null, this.tagsNodeStack = [], this.docTypeEntities = {}, this.lastEntities = {
      apos: { regex: /&(apos|#39|#x27);/g, val: "'" },
      gt: { regex: /&(gt|#62|#x3E);/g, val: ">" },
      lt: { regex: /&(lt|#60|#x3C);/g, val: "<" },
      quot: { regex: /&(quot|#34|#x22);/g, val: '"' }
    }, this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" }, this.htmlEntities = {
      space: { regex: /&(nbsp|#160);/g, val: " " },
      // "lt" : { regex: /&(lt|#60);/g, val: "<" },
      // "gt" : { regex: /&(gt|#62);/g, val: ">" },
      // "amp" : { regex: /&(amp|#38);/g, val: "&" },
      // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
      // "apos" : { regex: /&(apos|#39);/g, val: "'" },
      cent: { regex: /&(cent|#162);/g, val: "¢" },
      pound: { regex: /&(pound|#163);/g, val: "£" },
      yen: { regex: /&(yen|#165);/g, val: "¥" },
      euro: { regex: /&(euro|#8364);/g, val: "€" },
      copyright: { regex: /&(copy|#169);/g, val: "©" },
      reg: { regex: /&(reg|#174);/g, val: "®" },
      inr: { regex: /&(inr|#8377);/g, val: "₹" }
    }, this.addExternalEntities = j_, this.parseXml = K_, this.parseTextData = G_, this.resolveNameSpace = Y_, this.buildAttributesMap = z_, this.isItStopNode = ex, this.replaceEntitiesValue = J_, this.readStopNodeData = nx, this.saveTextToParentTag = Q_, this.addChild = X_;
  }
};
function j_(e) {
  const t = Object.keys(e);
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    this.lastEntities[s] = {
      regex: new RegExp("&" + s + ";", "g"),
      val: e[s]
    };
  }
}
function G_(e, t, r, s, a, l, u) {
  if (e !== void 0 && (this.options.trimValues && !s && (e = e.trim()), e.length > 0)) {
    u || (e = this.replaceEntitiesValue(e));
    const f = this.options.tagValueProcessor(t, e, r, a, l);
    return f == null ? e : typeof f != typeof e || f !== e ? f : this.options.trimValues ? po(e, this.options.parseTagValue, this.options.numberParseOptions) : e.trim() === e ? po(e, this.options.parseTagValue, this.options.numberParseOptions) : e;
  }
}
function Y_(e) {
  if (this.options.removeNSPrefix) {
    const t = e.split(":"), r = e.charAt(0) === "/" ? "/" : "";
    if (t[0] === "xmlns")
      return "";
    t.length === 2 && (e = r + t[1]);
  }
  return e;
}
const q_ = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
function z_(e, t, r) {
  if (!this.options.ignoreAttributes && typeof e == "string") {
    const s = Ho.getAllMatches(e, q_), a = s.length, l = {};
    for (let u = 0; u < a; u++) {
      const f = this.resolveNameSpace(s[u][1]);
      let d = s[u][4], g = this.options.attributeNamePrefix + f;
      if (f.length)
        if (this.options.transformAttributeName && (g = this.options.transformAttributeName(g)), g === "__proto__" && (g = "#__proto__"), d !== void 0) {
          this.options.trimValues && (d = d.trim()), d = this.replaceEntitiesValue(d);
          const _ = this.options.attributeValueProcessor(f, d, t);
          _ == null ? l[g] = d : typeof _ != typeof d || _ !== d ? l[g] = _ : l[g] = po(
            d,
            this.options.parseAttributeValue,
            this.options.numberParseOptions
          );
        } else
          this.options.allowBooleanAttributes && (l[g] = !0);
    }
    if (!Object.keys(l).length)
      return;
    if (this.options.attributesGroupName) {
      const u = {};
      return u[this.options.attributesGroupName] = l, u;
    }
    return l;
  }
}
const K_ = function(e) {
  e = e.replace(/\r\n?/g, `
`);
  const t = new ri("!xml");
  let r = t, s = "", a = "";
  for (let l = 0; l < e.length; l++)
    if (e[l] === "<")
      if (e[l + 1] === "/") {
        const f = zn(e, ">", l, "Closing Tag is not closed.");
        let d = e.substring(l + 2, f).trim();
        if (this.options.removeNSPrefix) {
          const x = d.indexOf(":");
          x !== -1 && (d = d.substr(x + 1));
        }
        this.options.transformTagName && (d = this.options.transformTagName(d)), r && (s = this.saveTextToParentTag(s, r, a));
        const g = a.substring(a.lastIndexOf(".") + 1);
        if (d && this.options.unpairedTags.indexOf(d) !== -1)
          throw new Error(`Unpaired tag can not be used as closing tag: </${d}>`);
        let _ = 0;
        g && this.options.unpairedTags.indexOf(g) !== -1 ? (_ = a.lastIndexOf(".", a.lastIndexOf(".") - 1), this.tagsNodeStack.pop()) : _ = a.lastIndexOf("."), a = a.substring(0, _), r = this.tagsNodeStack.pop(), s = "", l = f;
      } else if (e[l + 1] === "?") {
        let f = ho(e, l, !1, "?>");
        if (!f)
          throw new Error("Pi Tag is not closed.");
        if (s = this.saveTextToParentTag(s, r, a), !(this.options.ignoreDeclaration && f.tagName === "?xml" || this.options.ignorePiTags)) {
          const d = new ri(f.tagName);
          d.add(this.options.textNodeName, ""), f.tagName !== f.tagExp && f.attrExpPresent && (d[":@"] = this.buildAttributesMap(f.tagExp, a, f.tagName)), this.addChild(r, d, a);
        }
        l = f.closeIndex + 1;
      } else if (e.substr(l + 1, 3) === "!--") {
        const f = zn(e, "-->", l + 4, "Comment is not closed.");
        if (this.options.commentPropName) {
          const d = e.substring(l + 4, f - 2);
          s = this.saveTextToParentTag(s, r, a), r.add(this.options.commentPropName, [{ [this.options.textNodeName]: d }]);
        }
        l = f;
      } else if (e.substr(l + 1, 2) === "!D") {
        const f = H_(e, l);
        this.docTypeEntities = f.entities, l = f.i;
      } else if (e.substr(l + 1, 2) === "![") {
        const f = zn(e, "]]>", l, "CDATA is not closed.") - 2, d = e.substring(l + 9, f);
        if (s = this.saveTextToParentTag(s, r, a), this.options.cdataPropName)
          r.add(this.options.cdataPropName, [{ [this.options.textNodeName]: d }]);
        else {
          let g = this.parseTextData(d, r.tagname, a, !0, !1, !0);
          g == null && (g = ""), r.add(this.options.textNodeName, g);
        }
        l = f + 2;
      } else {
        let f = ho(e, l, this.options.removeNSPrefix), d = f.tagName, g = f.tagExp, _ = f.attrExpPresent, x = f.closeIndex;
        this.options.transformTagName && (d = this.options.transformTagName(d)), r && s && r.tagname !== "!xml" && (s = this.saveTextToParentTag(s, r, a, !1));
        const T = r;
        if (T && this.options.unpairedTags.indexOf(T.tagname) !== -1 && (r = this.tagsNodeStack.pop(), a = a.substring(0, a.lastIndexOf("."))), d !== t.tagname && (a += a ? "." + d : d), this.isItStopNode(this.options.stopNodes, a, d)) {
          let A = "";
          if (g.length > 0 && g.lastIndexOf("/") === g.length - 1)
            l = f.closeIndex;
          else if (this.options.unpairedTags.indexOf(d) !== -1)
            l = f.closeIndex;
          else {
            const E = this.readStopNodeData(e, d, x + 1);
            if (!E)
              throw new Error(`Unexpected end of ${d}`);
            l = E.i, A = E.tagContent;
          }
          const C = new ri(d);
          d !== g && _ && (C[":@"] = this.buildAttributesMap(g, a, d)), A && (A = this.parseTextData(A, d, a, !0, _, !0, !0)), a = a.substr(0, a.lastIndexOf(".")), C.add(this.options.textNodeName, A), this.addChild(r, C, a);
        } else {
          if (g.length > 0 && g.lastIndexOf("/") === g.length - 1) {
            d[d.length - 1] === "/" ? (d = d.substr(0, d.length - 1), a = a.substr(0, a.length - 1), g = d) : g = g.substr(0, g.length - 1), this.options.transformTagName && (d = this.options.transformTagName(d));
            const A = new ri(d);
            d !== g && _ && (A[":@"] = this.buildAttributesMap(g, a, d)), this.addChild(r, A, a), a = a.substr(0, a.lastIndexOf("."));
          } else {
            const A = new ri(d);
            this.tagsNodeStack.push(r), d !== g && _ && (A[":@"] = this.buildAttributesMap(g, a, d)), this.addChild(r, A, a), r = A;
          }
          s = "", l = x;
        }
      }
    else
      s += e[l];
  return t.child;
};
function X_(e, t, r) {
  const s = this.options.updateTag(t.tagname, r, t[":@"]);
  s === !1 || (typeof s == "string" && (t.tagname = s), e.addChild(t));
}
const J_ = function(e) {
  if (this.options.processEntities) {
    for (let t in this.docTypeEntities) {
      const r = this.docTypeEntities[t];
      e = e.replace(r.regx, r.val);
    }
    for (let t in this.lastEntities) {
      const r = this.lastEntities[t];
      e = e.replace(r.regex, r.val);
    }
    if (this.options.htmlEntities)
      for (let t in this.htmlEntities) {
        const r = this.htmlEntities[t];
        e = e.replace(r.regex, r.val);
      }
    e = e.replace(this.ampEntity.regex, this.ampEntity.val);
  }
  return e;
};
function Q_(e, t, r, s) {
  return e && (s === void 0 && (s = Object.keys(t.child).length === 0), e = this.parseTextData(
    e,
    t.tagname,
    r,
    !1,
    t[":@"] ? Object.keys(t[":@"]).length !== 0 : !1,
    s
  ), e !== void 0 && e !== "" && t.add(this.options.textNodeName, e), e = ""), e;
}
function ex(e, t, r) {
  const s = "*." + r;
  for (const a in e) {
    const l = e[a];
    if (s === l || t === l)
      return !0;
  }
  return !1;
}
function tx(e, t, r = ">") {
  let s, a = "";
  for (let l = t; l < e.length; l++) {
    let u = e[l];
    if (s)
      u === s && (s = "");
    else if (u === '"' || u === "'")
      s = u;
    else if (u === r[0])
      if (r[1]) {
        if (e[l + 1] === r[1])
          return {
            data: a,
            index: l
          };
      } else
        return {
          data: a,
          index: l
        };
    else
      u === "	" && (u = " ");
    a += u;
  }
}
function zn(e, t, r, s) {
  const a = e.indexOf(t, r);
  if (a === -1)
    throw new Error(s);
  return a + t.length - 1;
}
function ho(e, t, r, s = ">") {
  const a = tx(e, t + 1, s);
  if (!a)
    return;
  let l = a.data;
  const u = a.index, f = l.search(/\s/);
  let d = l, g = !0;
  if (f !== -1 && (d = l.substr(0, f).replace(/\s\s*$/, ""), l = l.substr(f + 1)), r) {
    const _ = d.indexOf(":");
    _ !== -1 && (d = d.substr(_ + 1), g = d !== a.data.substr(_ + 1));
  }
  return {
    tagName: d,
    tagExp: l,
    closeIndex: u,
    attrExpPresent: g
  };
}
function nx(e, t, r) {
  const s = r;
  let a = 1;
  for (; r < e.length; r++)
    if (e[r] === "<")
      if (e[r + 1] === "/") {
        const l = zn(e, ">", r, `${t} is not closed`);
        if (e.substring(r + 2, l).trim() === t && (a--, a === 0))
          return {
            tagContent: e.substring(s, r),
            i: l
          };
        r = l;
      } else if (e[r + 1] === "?")
        r = zn(e, "?>", r + 1, "StopNode is not closed.");
      else if (e.substr(r + 1, 3) === "!--")
        r = zn(e, "-->", r + 3, "StopNode is not closed.");
      else if (e.substr(r + 1, 2) === "![")
        r = zn(e, "]]>", r, "StopNode is not closed.") - 2;
      else {
        const l = ho(e, r, ">");
        l && ((l && l.tagName) === t && l.tagExp[l.tagExp.length - 1] !== "/" && a++, r = l.closeIndex);
      }
}
function po(e, t, r) {
  if (t && typeof e == "string") {
    const s = e.trim();
    return s === "true" ? !0 : s === "false" ? !1 : Z_(e, r);
  } else
    return Ho.isExist(e) ? e : "";
}
var rx = V_, If = {};
function ix(e, t) {
  return kf(e, t);
}
function kf(e, t, r) {
  let s;
  const a = {};
  for (let l = 0; l < e.length; l++) {
    const u = e[l], f = sx(u);
    let d = "";
    if (r === void 0 ? d = f : d = r + "." + f, f === t.textNodeName)
      s === void 0 ? s = u[f] : s += "" + u[f];
    else {
      if (f === void 0)
        continue;
      if (u[f]) {
        let g = kf(u[f], t, d);
        const _ = ox(g, t);
        u[":@"] ? ax(g, u[":@"], d, t) : Object.keys(g).length === 1 && g[t.textNodeName] !== void 0 && !t.alwaysCreateTextNode ? g = g[t.textNodeName] : Object.keys(g).length === 0 && (t.alwaysCreateTextNode ? g[t.textNodeName] = "" : g = ""), a[f] !== void 0 && a.hasOwnProperty(f) ? (Array.isArray(a[f]) || (a[f] = [a[f]]), a[f].push(g)) : t.isArray(f, d, _) ? a[f] = [g] : a[f] = g;
      }
    }
  }
  return typeof s == "string" ? s.length > 0 && (a[t.textNodeName] = s) : s !== void 0 && (a[t.textNodeName] = s), a;
}
function sx(e) {
  const t = Object.keys(e);
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    if (s !== ":@")
      return s;
  }
}
function ax(e, t, r, s) {
  if (t) {
    const a = Object.keys(t), l = a.length;
    for (let u = 0; u < l; u++) {
      const f = a[u];
      s.isArray(f, r + "." + f, !0, !0) ? e[f] = [t[f]] : e[f] = t[f];
    }
  }
}
function ox(e, t) {
  const { textNodeName: r } = t, s = Object.keys(e).length;
  return !!(s === 0 || s === 1 && (e[r] || typeof e[r] == "boolean" || e[r] === 0));
}
If.prettify = ix;
const { buildOptions: lx } = Uo, ux = rx, { prettify: cx } = If, fx = Do;
let dx = class {
  constructor(t) {
    this.externalEntities = {}, this.options = lx(t);
  }
  /**
   * Parse XML dats to JS object 
   * @param {string|Buffer} xmlData 
   * @param {boolean|Object} validationOption 
   */
  parse(t, r) {
    if (typeof t != "string")
      if (t.toString)
        t = t.toString();
      else
        throw new Error("XML data is accepted in String or Bytes[] form.");
    if (r) {
      r === !0 && (r = {});
      const l = fx.validate(t, r);
      if (l !== !0)
        throw Error(`${l.err.msg}:${l.err.line}:${l.err.col}`);
    }
    const s = new ux(this.options);
    s.addExternalEntities(this.externalEntities);
    const a = s.parseXml(t);
    return this.options.preserveOrder || a === void 0 ? a : cx(a, this.options);
  }
  /**
   * Add Entity which is not by default supported by this library
   * @param {string} key 
   * @param {string} value 
   */
  addEntity(t, r) {
    if (r.indexOf("&") !== -1)
      throw new Error("Entity value can't have '&'");
    if (t.indexOf("&") !== -1 || t.indexOf(";") !== -1)
      throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
    if (r === "&")
      throw new Error("An entity with value '&' is not permitted");
    this.externalEntities[t] = r;
  }
};
var hx = dx;
const px = `
`;
function gx(e, t) {
  let r = "";
  return t.format && t.indentBy.length > 0 && (r = px), Rf(e, t, "", r);
}
function Rf(e, t, r, s) {
  let a = "", l = !1;
  for (let u = 0; u < e.length; u++) {
    const f = e[u], d = mx(f);
    let g = "";
    if (r.length === 0 ? g = d : g = `${r}.${d}`, d === t.textNodeName) {
      let C = f[d];
      vx(g, t) || (C = t.tagValueProcessor(d, C), C = Pf(C, t)), l && (a += s), a += C, l = !1;
      continue;
    } else if (d === t.cdataPropName) {
      l && (a += s), a += `<![CDATA[${f[d][0][t.textNodeName]}]]>`, l = !1;
      continue;
    } else if (d === t.commentPropName) {
      a += s + `<!--${f[d][0][t.textNodeName]}-->`, l = !0;
      continue;
    } else if (d[0] === "?") {
      const C = zc(f[":@"], t), E = d === "?xml" ? "" : s;
      let P = f[d][0][t.textNodeName];
      P = P.length !== 0 ? " " + P : "", a += E + `<${d}${P}${C}?>`, l = !0;
      continue;
    }
    let _ = s;
    _ !== "" && (_ += t.indentBy);
    const x = zc(f[":@"], t), T = s + `<${d}${x}`, A = Rf(f[d], t, g, _);
    t.unpairedTags.indexOf(d) !== -1 ? t.suppressUnpairedNode ? a += T + ">" : a += T + "/>" : (!A || A.length === 0) && t.suppressEmptyNode ? a += T + "/>" : A && A.endsWith(">") ? a += T + `>${A}${s}</${d}>` : (a += T + ">", A && s !== "" && (A.includes("/>") || A.includes("</")) ? a += s + t.indentBy + A + s : a += A, a += `</${d}>`), l = !0;
  }
  return a;
}
function mx(e) {
  const t = Object.keys(e);
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    if (s !== ":@")
      return s;
  }
}
function zc(e, t) {
  let r = "";
  if (e && !t.ignoreAttributes)
    for (let s in e) {
      let a = t.attributeValueProcessor(s, e[s]);
      a = Pf(a, t), a === !0 && t.suppressBooleanAttributes ? r += ` ${s.substr(t.attributeNamePrefix.length)}` : r += ` ${s.substr(t.attributeNamePrefix.length)}="${a}"`;
    }
  return r;
}
function vx(e, t) {
  e = e.substr(0, e.length - t.textNodeName.length - 1);
  let r = e.substr(e.lastIndexOf(".") + 1);
  for (let s in t.stopNodes)
    if (t.stopNodes[s] === e || t.stopNodes[s] === "*." + r)
      return !0;
  return !1;
}
function Pf(e, t) {
  if (e && e.length > 0 && t.processEntities)
    for (let r = 0; r < t.entities.length; r++) {
      const s = t.entities[r];
      e = e.replace(s.regex, s.val);
    }
  return e;
}
var yx = gx;
const _x = yx, xx = {
  attributeNamePrefix: "@_",
  attributesGroupName: !1,
  textNodeName: "#text",
  ignoreAttributes: !0,
  cdataPropName: !1,
  format: !1,
  indentBy: "  ",
  suppressEmptyNode: !1,
  suppressUnpairedNode: !0,
  suppressBooleanAttributes: !0,
  tagValueProcessor: function(e, t) {
    return t;
  },
  attributeValueProcessor: function(e, t) {
    return t;
  },
  preserveOrder: !1,
  commentPropName: !1,
  unpairedTags: [],
  entities: [
    { regex: new RegExp("&", "g"), val: "&amp;" },
    //it must be on top
    { regex: new RegExp(">", "g"), val: "&gt;" },
    { regex: new RegExp("<", "g"), val: "&lt;" },
    { regex: new RegExp("'", "g"), val: "&apos;" },
    { regex: new RegExp('"', "g"), val: "&quot;" }
  ],
  processEntities: !0,
  stopNodes: [],
  // transformTagName: false,
  // transformAttributeName: false,
  oneListGroup: !1
};
function Ln(e) {
  this.options = Object.assign({}, xx, e), this.options.ignoreAttributes || this.options.attributesGroupName ? this.isAttribute = function() {
    return !1;
  } : (this.attrPrefixLen = this.options.attributeNamePrefix.length, this.isAttribute = Ex), this.processTextOrObjNode = wx, this.options.format ? (this.indentate = bx, this.tagEndChar = `>
`, this.newLine = `
`) : (this.indentate = function() {
    return "";
  }, this.tagEndChar = ">", this.newLine = "");
}
Ln.prototype.build = function(e) {
  return this.options.preserveOrder ? _x(e, this.options) : (Array.isArray(e) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1 && (e = {
    [this.options.arrayNodeName]: e
  }), this.j2x(e, 0).val);
};
Ln.prototype.j2x = function(e, t) {
  let r = "", s = "";
  for (let a in e)
    if (!(typeof e[a] > "u"))
      if (e[a] === null)
        a[0] === "?" ? s += this.indentate(t) + "<" + a + "?" + this.tagEndChar : s += this.indentate(t) + "<" + a + "/" + this.tagEndChar;
      else if (e[a] instanceof Date)
        s += this.buildTextValNode(e[a], a, "", t);
      else if (typeof e[a] != "object") {
        const l = this.isAttribute(a);
        if (l)
          r += this.buildAttrPairStr(l, "" + e[a]);
        else if (a === this.options.textNodeName) {
          let u = this.options.tagValueProcessor(a, "" + e[a]);
          s += this.replaceEntitiesValue(u);
        } else
          s += this.buildTextValNode(e[a], a, "", t);
      } else if (Array.isArray(e[a])) {
        const l = e[a].length;
        let u = "";
        for (let f = 0; f < l; f++) {
          const d = e[a][f];
          typeof d > "u" || (d === null ? a[0] === "?" ? s += this.indentate(t) + "<" + a + "?" + this.tagEndChar : s += this.indentate(t) + "<" + a + "/" + this.tagEndChar : typeof d == "object" ? this.options.oneListGroup ? u += this.j2x(d, t + 1).val : u += this.processTextOrObjNode(d, a, t) : u += this.buildTextValNode(d, a, "", t));
        }
        this.options.oneListGroup && (u = this.buildObjectNode(u, a, "", t)), s += u;
      } else if (this.options.attributesGroupName && a === this.options.attributesGroupName) {
        const l = Object.keys(e[a]), u = l.length;
        for (let f = 0; f < u; f++)
          r += this.buildAttrPairStr(l[f], "" + e[a][l[f]]);
      } else
        s += this.processTextOrObjNode(e[a], a, t);
  return { attrStr: r, val: s };
};
Ln.prototype.buildAttrPairStr = function(e, t) {
  return t = this.options.attributeValueProcessor(e, "" + t), t = this.replaceEntitiesValue(t), this.options.suppressBooleanAttributes && t === "true" ? " " + e : " " + e + '="' + t + '"';
};
function wx(e, t, r) {
  const s = this.j2x(e, r + 1);
  return e[this.options.textNodeName] !== void 0 && Object.keys(e).length === 1 ? this.buildTextValNode(e[this.options.textNodeName], t, s.attrStr, r) : this.buildObjectNode(s.val, t, s.attrStr, r);
}
Ln.prototype.buildObjectNode = function(e, t, r, s) {
  if (e === "")
    return t[0] === "?" ? this.indentate(s) + "<" + t + r + "?" + this.tagEndChar : this.indentate(s) + "<" + t + r + this.closeTag(t) + this.tagEndChar;
  {
    let a = "</" + t + this.tagEndChar, l = "";
    return t[0] === "?" && (l = "?", a = ""), r && e.indexOf("<") === -1 ? this.indentate(s) + "<" + t + r + l + ">" + e + a : this.options.commentPropName !== !1 && t === this.options.commentPropName && l.length === 0 ? this.indentate(s) + `<!--${e}-->` + this.newLine : this.indentate(s) + "<" + t + r + l + this.tagEndChar + e + this.indentate(s) + a;
  }
};
Ln.prototype.closeTag = function(e) {
  let t = "";
  return this.options.unpairedTags.indexOf(e) !== -1 ? this.options.suppressUnpairedNode || (t = "/") : this.options.suppressEmptyNode ? t = "/" : t = `></${e}`, t;
};
Ln.prototype.buildTextValNode = function(e, t, r, s) {
  if (this.options.cdataPropName !== !1 && t === this.options.cdataPropName)
    return this.indentate(s) + `<![CDATA[${e}]]>` + this.newLine;
  if (this.options.commentPropName !== !1 && t === this.options.commentPropName)
    return this.indentate(s) + `<!--${e}-->` + this.newLine;
  if (t[0] === "?")
    return this.indentate(s) + "<" + t + r + "?" + this.tagEndChar;
  {
    let a = this.options.tagValueProcessor(t, e);
    return a = this.replaceEntitiesValue(a), a === "" ? this.indentate(s) + "<" + t + r + this.closeTag(t) + this.tagEndChar : this.indentate(s) + "<" + t + r + ">" + a + "</" + t + this.tagEndChar;
  }
};
Ln.prototype.replaceEntitiesValue = function(e) {
  if (e && e.length > 0 && this.options.processEntities)
    for (let t = 0; t < this.options.entities.length; t++) {
      const r = this.options.entities[t];
      e = e.replace(r.regex, r.val);
    }
  return e;
};
function bx(e) {
  return this.options.indentBy.repeat(e);
}
function Ex(e) {
  return e.startsWith(this.options.attributeNamePrefix) ? e.substr(this.attrPrefixLen) : !1;
}
var Ax = Ln;
const Cx = Do, Tx = hx, Sx = Ax;
var Kc = {
  XMLParser: Tx,
  XMLValidator: Cx,
  XMLBuilder: Sx
};
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
function Lx(e, t) {
  let r = e.slice(0, t).split(/\r\n|\n|\r/g);
  return [r.length, r.pop().length + 1];
}
function Ox(e, t, r) {
  let s = e.split(/\r\n|\n|\r/g), a = "", l = (Math.log10(t + 1) | 0) + 1;
  for (let u = t - 1; u <= t + 1; u++) {
    let f = s[u - 1];
    f && (a += u.toString().padEnd(l, " "), a += ":  ", a += f, a += `
`, u === t && (a += " ".repeat(l + r + 2), a += `^
`));
  }
  return a;
}
class le extends Error {
  constructor(r, s) {
    const [a, l] = Lx(s.toml, s.ptr), u = Ox(s.toml, a, l);
    super(`Invalid TOML document: ${r}

${u}`, s);
    B(this, "line");
    B(this, "column");
    B(this, "codeblock");
    this.line = a, this.column = l, this.codeblock = u;
  }
}
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
function ls(e, t = 0, r = e.length) {
  let s = e.indexOf(`
`, t);
  return e[s - 1] === "\r" && s--, s <= r ? s : -1;
}
function Zo(e, t) {
  for (let r = t; r < e.length; r++) {
    let s = e[r];
    if (s === `
`)
      return r;
    if (s === "\r" && e[r + 1] === `
`)
      return r + 1;
    if (s < " " && s !== "	" || s === "")
      throw new le("control characters are not allowed in comments", {
        toml: e,
        ptr: t
      });
  }
  return e.length;
}
function sn(e, t, r, s) {
  let a;
  for (; (a = e[t]) === " " || a === "	" || !r && (a === `
` || a === "\r" && e[t + 1] === `
`); )
    t++;
  return s || a !== "#" ? t : sn(e, Zo(e, t), r);
}
function Xc(e, t, r, s, a = !1) {
  if (!s)
    return t = ls(e, t), t < 0 ? e.length : t;
  for (let l = t; l < e.length; l++) {
    let u = e[l];
    if (u === "#")
      l = ls(e, l);
    else {
      if (u === r)
        return l + 1;
      if (u === s)
        return l;
      if (a && (u === `
` || u === "\r" && e[l + 1] === `
`))
        return l;
    }
  }
  throw new le("cannot find end of structure", {
    toml: e,
    ptr: t
  });
}
function Ff(e, t) {
  let r = e[t], s = r === e[t + 1] && e[t + 1] === e[t + 2] ? e.slice(t, t + 3) : r;
  t += s.length - 1;
  do
    t = e.indexOf(s, ++t);
  while (t > -1 && r !== "'" && e[t - 1] === "\\" && e[t - 2] !== "\\");
  return t > -1 && (t += s.length, s.length > 1 && (e[t] === r && t++, e[t] === r && t++)), t;
}
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
let Nx = /^(\d{4}-\d{2}-\d{2})?[T ]?(?:(\d{2}):\d{2}:\d{2}(?:\.\d+)?)?(Z|[-+]\d{2}:\d{2})?$/i;
var $t, Dt, Ye;
const Er = class extends Date {
  constructor(r) {
    let s = !0, a = !0, l = "Z";
    if (typeof r == "string") {
      let u = r.match(Nx);
      u ? (u[1] || (s = !1, r = `0000-01-01T${r}`), a = !!u[2], u[2] && +u[2] > 23 ? r = "" : (l = u[3] || null, r = r.toUpperCase(), !l && a && (r += "Z"))) : r = "";
    }
    super(r);
    as(this, $t, !1);
    as(this, Dt, !1);
    as(this, Ye, null);
    isNaN(this.getTime()) || (Mt(this, $t, s), Mt(this, Dt, a), Mt(this, Ye, l));
  }
  isDateTime() {
    return Pe(this, $t) && Pe(this, Dt);
  }
  isLocal() {
    return !Pe(this, $t) || !Pe(this, Dt) || !Pe(this, Ye);
  }
  isDate() {
    return Pe(this, $t) && !Pe(this, Dt);
  }
  isTime() {
    return Pe(this, Dt) && !Pe(this, $t);
  }
  isValid() {
    return Pe(this, $t) || Pe(this, Dt);
  }
  toISOString() {
    let r = super.toISOString();
    if (this.isDate())
      return r.slice(0, 10);
    if (this.isTime())
      return r.slice(11, 23);
    if (Pe(this, Ye) === null)
      return r.slice(0, -1);
    if (Pe(this, Ye) === "Z")
      return r;
    let s = +Pe(this, Ye).slice(1, 3) * 60 + +Pe(this, Ye).slice(4, 6);
    return s = Pe(this, Ye)[0] === "-" ? s : -s, new Date(this.getTime() - s * 6e4).toISOString().slice(0, -1) + Pe(this, Ye);
  }
  static wrapAsOffsetDateTime(r, s = "Z") {
    let a = new Er(r);
    return Mt(a, Ye, s), a;
  }
  static wrapAsLocalDateTime(r) {
    let s = new Er(r);
    return Mt(s, Ye, null), s;
  }
  static wrapAsLocalDate(r) {
    let s = new Er(r);
    return Mt(s, Dt, !1), Mt(s, Ye, null), s;
  }
  static wrapAsLocalTime(r) {
    let s = new Er(r);
    return Mt(s, $t, !1), Mt(s, Ye, null), s;
  }
};
let us = Er;
$t = new WeakMap(), Dt = new WeakMap(), Ye = new WeakMap();
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
let Ix = /^((0x[0-9a-fA-F](_?[0-9a-fA-F])*)|(([+-]|0[ob])?\d(_?\d)*))$/, kx = /^[+-]?\d(_?\d)*(\.\d(_?\d)*)?([eE][+-]?\d(_?\d)*)?$/, Rx = /^[+-]?0[0-9_]/, Px = /^[0-9a-f]{4,8}$/i, Jc = {
  b: "\b",
  t: "	",
  n: `
`,
  f: "\f",
  r: "\r",
  '"': '"',
  "\\": "\\"
};
function Bf(e, t = 0, r = e.length) {
  let s = e[t] === "'", a = e[t++] === e[t] && e[t] === e[t + 1];
  a && (r -= 2, e[t += 2] === "\r" && t++, e[t] === `
` && t++);
  let l = 0, u, f = "", d = t;
  for (; t < r - 1; ) {
    let g = e[t++];
    if (g === `
` || g === "\r" && e[t] === `
`) {
      if (!a)
        throw new le("newlines are not allowed in strings", {
          toml: e,
          ptr: t - 1
        });
    } else if (g < " " && g !== "	" || g === "")
      throw new le("control characters are not allowed in strings", {
        toml: e,
        ptr: t - 1
      });
    if (u) {
      if (u = !1, g === "u" || g === "U") {
        let _ = e.slice(t, t += g === "u" ? 4 : 8);
        if (!Px.test(_))
          throw new le("invalid unicode escape", {
            toml: e,
            ptr: l
          });
        try {
          f += String.fromCodePoint(parseInt(_, 16));
        } catch {
          throw new le("invalid unicode escape", {
            toml: e,
            ptr: l
          });
        }
      } else if (a && (g === `
` || g === " " || g === "	" || g === "\r")) {
        if (t = sn(e, t - 1, !0), e[t] !== `
` && e[t] !== "\r")
          throw new le("invalid escape: only line-ending whitespace may be escaped", {
            toml: e,
            ptr: l
          });
        t = sn(e, t);
      } else if (g in Jc)
        f += Jc[g];
      else
        throw new le("unrecognized escape sequence", {
          toml: e,
          ptr: l
        });
      d = t;
    } else
      !s && g === "\\" && (l = t - 1, u = !0, f += e.slice(d, l));
  }
  return f + e.slice(d, r - 1);
}
function Fx(e, t, r) {
  if (e === "true")
    return !0;
  if (e === "false")
    return !1;
  if (e === "-inf")
    return -1 / 0;
  if (e === "inf" || e === "+inf")
    return 1 / 0;
  if (e === "nan" || e === "+nan" || e === "-nan")
    return NaN;
  if (e === "-0")
    return 0;
  let s;
  if ((s = Ix.test(e)) || kx.test(e)) {
    if (Rx.test(e))
      throw new le("leading zeroes are not allowed", {
        toml: t,
        ptr: r
      });
    let l = +e.replace(/_/g, "");
    if (isNaN(l))
      throw new le("invalid number", {
        toml: t,
        ptr: r
      });
    if (s && !Number.isSafeInteger(l))
      throw new le("integer value cannot be represented losslessly", {
        toml: t,
        ptr: r
      });
    return l;
  }
  let a = new us(e);
  if (!a.isValid())
    throw new le("invalid value", {
      toml: t,
      ptr: r
    });
  return a;
}
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
function Bx(e, t, r, s) {
  let a = e.slice(t, r), l = a.indexOf("#");
  l > -1 && (Zo(e, l), a = a.slice(0, l));
  let u = a.trimEnd();
  if (!s) {
    let f = a.indexOf(`
`, u.length);
    if (f > -1)
      throw new le("newlines are not allowed in inline tables", {
        toml: e,
        ptr: t + f
      });
  }
  return [u, l];
}
function Vo(e, t, r) {
  let s = e[t];
  if (s === "[" || s === "{") {
    let [u, f] = s === "[" ? Dx(e, t) : $x(e, t), d = Xc(e, f, ",", r);
    if (r === "}") {
      let g = ls(e, f, d);
      if (g > -1)
        throw new le("newlines are not allowed in inline tables", {
          toml: e,
          ptr: g
        });
    }
    return [u, d];
  }
  let a;
  if (s === '"' || s === "'") {
    a = Ff(e, t);
    let u = Bf(e, t, a);
    if (r) {
      if (a = sn(e, a, r !== "]"), e[a] && e[a] !== "," && e[a] !== r && e[a] !== `
` && e[a] !== "\r")
        throw new le("unexpected character encountered", {
          toml: e,
          ptr: a
        });
      a += +(e[a] === ",");
    }
    return [u, a];
  }
  a = Xc(e, t, ",", r);
  let l = Bx(e, t, a - +(e[a - 1] === ","), r === "]");
  if (!l[0])
    throw new le("incomplete key-value declaration: no value specified", {
      toml: e,
      ptr: t
    });
  return r && l[1] > -1 && (a = sn(e, t + l[1]), a += +(e[a] === ",")), [
    Fx(l[0], e, t),
    a
  ];
}
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
let Mx = /^[a-zA-Z0-9-_]+[ \t]*$/;
function go(e, t, r = "=") {
  let s = t - 1, a = [], l = e.indexOf(r, t);
  if (l < 0)
    throw new le("incomplete key-value: cannot find end of key", {
      toml: e,
      ptr: t
    });
  do {
    let u = e[t = ++s];
    if (u !== " " && u !== "	")
      if (u === '"' || u === "'") {
        if (u === e[t + 1] && u === e[t + 2])
          throw new le("multiline strings are not allowed in keys", {
            toml: e,
            ptr: t
          });
        let f = Ff(e, t);
        if (f < 0)
          throw new le("unfinished string encountered", {
            toml: e,
            ptr: t
          });
        s = e.indexOf(".", f);
        let d = e.slice(f, s < 0 || s > l ? l : s), g = ls(d);
        if (g > -1)
          throw new le("newlines are not allowed in keys", {
            toml: e,
            ptr: t + s + g
          });
        if (d.trimStart())
          throw new le("found extra tokens after the string part", {
            toml: e,
            ptr: f
          });
        if (l < f && (l = e.indexOf(r, f), l < 0))
          throw new le("incomplete key-value: cannot find end of key", {
            toml: e,
            ptr: t
          });
        a.push(Bf(e, t, f));
      } else {
        s = e.indexOf(".", t);
        let f = e.slice(t, s < 0 || s > l ? l : s);
        if (!Mx.test(f))
          throw new le("only letter, numbers, dashes and underscores are allowed in keys", {
            toml: e,
            ptr: t
          });
        a.push(f.trimEnd());
      }
  } while (s + 1 && s < l);
  return [a, sn(e, l + 1, !0, !0)];
}
function $x(e, t) {
  let r = {}, s = /* @__PURE__ */ new Set(), a, l = 0;
  for (t++; (a = e[t++]) !== "}" && a; ) {
    if (a === `
`)
      throw new le("newlines are not allowed in inline tables", {
        toml: e,
        ptr: t - 1
      });
    if (a === "#")
      throw new le("inline tables cannot contain comments", {
        toml: e,
        ptr: t - 1
      });
    if (a === ",")
      throw new le("expected key-value, found comma", {
        toml: e,
        ptr: t - 1
      });
    if (a !== " " && a !== "	") {
      let u, f = r, d = !1, [g, _] = go(e, t - 1);
      for (let A = 0; A < g.length; A++) {
        if (A && (f = d ? f[u] : f[u] = {}), u = g[A], (d = Object.hasOwn(f, u)) && (typeof f[u] != "object" || s.has(f[u])))
          throw new le("trying to redefine an already defined value", {
            toml: e,
            ptr: t
          });
        !d && u === "__proto__" && Object.defineProperty(f, u, { enumerable: !0, configurable: !0, writable: !0 });
      }
      if (d)
        throw new le("trying to redefine an already defined value", {
          toml: e,
          ptr: t
        });
      let [x, T] = Vo(e, _, "}");
      s.add(x), f[u] = x, t = T, l = e[t - 1] === "," ? t - 1 : 0;
    }
  }
  if (l)
    throw new le("trailing commas are not allowed in inline tables", {
      toml: e,
      ptr: l
    });
  if (!a)
    throw new le("unfinished table encountered", {
      toml: e,
      ptr: t
    });
  return [r, t];
}
function Dx(e, t) {
  let r = [], s;
  for (t++; (s = e[t++]) !== "]" && s; ) {
    if (s === ",")
      throw new le("expected value, found comma", {
        toml: e,
        ptr: t - 1
      });
    if (s === "#")
      t = Zo(e, t);
    else if (s !== " " && s !== "	" && s !== `
` && s !== "\r") {
      let a = Vo(e, t - 1, "]");
      r.push(a[0]), t = a[1];
    }
  }
  if (!s)
    throw new le("unfinished array encountered", {
      toml: e,
      ptr: t
    });
  return [r, t];
}
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
function Qc(e, t, r, s) {
  var g, _;
  let a = t, l = r, u, f = !1, d;
  for (let x = 0; x < e.length; x++) {
    if (x) {
      if (a = f ? a[u] : a[u] = {}, l = (d = l[u]).c, s === 0 && (d.t === 1 || d.t === 2))
        return null;
      if (d.t === 2) {
        let T = a.length - 1;
        a = a[T], l = l[T].c;
      }
    }
    if (u = e[x], (f = Object.hasOwn(a, u)) && ((g = l[u]) == null ? void 0 : g.t) === 0 && ((_ = l[u]) != null && _.d))
      return null;
    f || (u === "__proto__" && (Object.defineProperty(a, u, { enumerable: !0, configurable: !0, writable: !0 }), Object.defineProperty(l, u, { enumerable: !0, configurable: !0, writable: !0 })), l[u] = {
      t: x < e.length - 1 && s === 2 ? 3 : s,
      d: !1,
      i: 0,
      c: {}
    });
  }
  if (d = l[u], d.t !== s && !(s === 1 && d.t === 3) || (s === 2 && (d.d || (d.d = !0, a[u] = []), a[u].push(a = {}), d.c[d.i++] = d = { t: 1, d: !1, i: 0, c: {} }), d.d))
    return null;
  if (d.d = !0, s === 1)
    a = f ? a[u] : a[u] = {};
  else if (s === 0 && f)
    return null;
  return [u, a, d.c];
}
function Wx(e) {
  let t = {}, r = {}, s = t, a = r;
  for (let l = sn(e, 0); l < e.length; ) {
    if (e[l] === "[") {
      let u = e[++l] === "[", f = go(e, l += +u, "]");
      if (u) {
        if (e[f[1] - 1] !== "]")
          throw new le("expected end of table declaration", {
            toml: e,
            ptr: f[1] - 1
          });
        f[1]++;
      }
      let d = Qc(
        f[0],
        t,
        r,
        u ? 2 : 1
        /* Type.EXPLICIT */
      );
      if (!d)
        throw new le("trying to redefine an already defined table or value", {
          toml: e,
          ptr: l
        });
      a = d[2], s = d[1], l = f[1];
    } else {
      let u = go(e, l), f = Qc(
        u[0],
        s,
        a,
        0
        /* Type.DOTTED */
      );
      if (!f)
        throw new le("trying to redefine an already defined table or value", {
          toml: e,
          ptr: l
        });
      let d = Vo(e, u[1]);
      f[1][f[0]] = d[0], l = d[1];
    }
    if (l = sn(e, l, !0), e[l] && e[l] !== `
` && e[l] !== "\r")
      throw new le("each key-value declaration must be followed by an end-of-line", {
        toml: e,
        ptr: l
      });
    l = sn(e, l);
  }
  return t;
}
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
const Mf = /^[a-z0-9-_]+$/i;
function Rs(e) {
  let t = typeof e;
  if (t === "object") {
    if (Array.isArray(e))
      return "array";
    if (e instanceof Date)
      return "date";
  }
  return t;
}
function Ux(e) {
  for (let t = 0; t < e.length; t++)
    if (Rs(e[t]) !== "object")
      return !1;
  return e.length != 0;
}
function jo(e) {
  return JSON.stringify(e).replace(/\x7f/g, "\\u007f");
}
function Go(e, t = Rs(e)) {
  if (t === "number")
    return isNaN(e) ? "nan" : e === 1 / 0 ? "inf" : e === -1 / 0 ? "-inf" : e.toString();
  if (t === "bigint" || t === "boolean")
    return e.toString();
  if (t === "string")
    return jo(e);
  if (t === "date") {
    if (isNaN(e.getTime()))
      throw new TypeError("cannot serialize invalid date");
    return e.toISOString();
  }
  if (t === "object")
    return Hx(e);
  if (t === "array")
    return Zx(e);
}
function Hx(e) {
  let t = Object.keys(e);
  if (t.length === 0)
    return "{}";
  let r = "{ ";
  for (let s = 0; s < t.length; s++) {
    let a = t[s];
    s && (r += ", "), r += Mf.test(a) ? a : jo(a), r += " = ", r += Go(e[a]);
  }
  return r + " }";
}
function Zx(e) {
  if (e.length === 0)
    return "[]";
  let t = "[ ";
  for (let r = 0; r < e.length; r++) {
    if (r && (t += ", "), e[r] === null || e[r] === void 0)
      throw new TypeError("arrays cannot contain null or undefined values");
    t += Go(e[r]);
  }
  return t + " ]";
}
function Vx(e, t) {
  let r = "";
  for (let s = 0; s < e.length; s++)
    r += `[[${t}]]
`, r += Yo(e[s], t), r += `

`;
  return r;
}
function Yo(e, t = "") {
  let r = "", s = "", a = Object.keys(e);
  for (let l = 0; l < a.length; l++) {
    let u = a[l];
    if (e[u] !== null && e[u] !== void 0) {
      let f = Rs(e[u]);
      if (f === "symbol" || f === "function")
        throw new TypeError(`cannot serialize values of type '${f}'`);
      let d = Mf.test(u) ? u : jo(u);
      if (f === "array" && Ux(e[u]))
        s += Vx(e[u], t ? `${t}.${d}` : d);
      else if (f === "object") {
        let g = t ? `${t}.${d}` : d;
        s += `[${g}]
`, s += Yo(e[u], g), s += `

`;
      } else
        r += d, r += " = ", r += Go(e[u], f), r += `
`;
    }
  }
  return `${r}
${s}`.trim();
}
function jx(e) {
  if (Rs(e) !== "object")
    throw new TypeError("stringify can only be called with an object");
  return Yo(e);
}
var de;
(function(e) {
  e.assertEqual = (a) => a;
  function t(a) {
  }
  e.assertIs = t;
  function r(a) {
    throw new Error();
  }
  e.assertNever = r, e.arrayToEnum = (a) => {
    const l = {};
    for (const u of a)
      l[u] = u;
    return l;
  }, e.getValidEnumValues = (a) => {
    const l = e.objectKeys(a).filter((f) => typeof a[a[f]] != "number"), u = {};
    for (const f of l)
      u[f] = a[f];
    return e.objectValues(u);
  }, e.objectValues = (a) => e.objectKeys(a).map(function(l) {
    return a[l];
  }), e.objectKeys = typeof Object.keys == "function" ? (a) => Object.keys(a) : (a) => {
    const l = [];
    for (const u in a)
      Object.prototype.hasOwnProperty.call(a, u) && l.push(u);
    return l;
  }, e.find = (a, l) => {
    for (const u of a)
      if (l(u))
        return u;
  }, e.isInteger = typeof Number.isInteger == "function" ? (a) => Number.isInteger(a) : (a) => typeof a == "number" && isFinite(a) && Math.floor(a) === a;
  function s(a, l = " | ") {
    return a.map((u) => typeof u == "string" ? `'${u}'` : u).join(l);
  }
  e.joinValues = s, e.jsonStringifyReplacer = (a, l) => typeof l == "bigint" ? l.toString() : l;
})(de || (de = {}));
var ef;
(function(e) {
  e.mergeShapes = (t, r) => ({
    ...t,
    ...r
    // second overwrites first
  });
})(ef || (ef = {}));
const M = de.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), Un = (e) => {
  switch (typeof e) {
    case "undefined":
      return M.undefined;
    case "string":
      return M.string;
    case "number":
      return isNaN(e) ? M.nan : M.number;
    case "boolean":
      return M.boolean;
    case "function":
      return M.function;
    case "bigint":
      return M.bigint;
    case "symbol":
      return M.symbol;
    case "object":
      return Array.isArray(e) ? M.array : e === null ? M.null : e.then && typeof e.then == "function" && e.catch && typeof e.catch == "function" ? M.promise : typeof Map < "u" && e instanceof Map ? M.map : typeof Set < "u" && e instanceof Set ? M.set : typeof Date < "u" && e instanceof Date ? M.date : M.object;
    default:
      return M.unknown;
  }
}, R = de.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class Wt extends Error {
  constructor(t) {
    super(), this.issues = [], this.addIssue = (s) => {
      this.issues = [...this.issues, s];
    }, this.addIssues = (s = []) => {
      this.issues = [...this.issues, ...s];
    };
    const r = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, r) : this.__proto__ = r, this.name = "ZodError", this.issues = t;
  }
  get errors() {
    return this.issues;
  }
  format(t) {
    const r = t || function(l) {
      return l.message;
    }, s = { _errors: [] }, a = (l) => {
      for (const u of l.issues)
        if (u.code === "invalid_union")
          u.unionErrors.map(a);
        else if (u.code === "invalid_return_type")
          a(u.returnTypeError);
        else if (u.code === "invalid_arguments")
          a(u.argumentsError);
        else if (u.path.length === 0)
          s._errors.push(r(u));
        else {
          let f = s, d = 0;
          for (; d < u.path.length; ) {
            const g = u.path[d];
            d === u.path.length - 1 ? (f[g] = f[g] || { _errors: [] }, f[g]._errors.push(r(u))) : f[g] = f[g] || { _errors: [] }, f = f[g], d++;
          }
        }
    };
    return a(this), s;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, de.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(t = (r) => r.message) {
    const r = {}, s = [];
    for (const a of this.issues)
      a.path.length > 0 ? (r[a.path[0]] = r[a.path[0]] || [], r[a.path[0]].push(t(a))) : s.push(t(a));
    return { formErrors: s, fieldErrors: r };
  }
  get formErrors() {
    return this.flatten();
  }
}
Wt.create = (e) => new Wt(e);
const cs = (e, t) => {
  let r;
  switch (e.code) {
    case R.invalid_type:
      e.received === M.undefined ? r = "Required" : r = `Expected ${e.expected}, received ${e.received}`;
      break;
    case R.invalid_literal:
      r = `Invalid literal value, expected ${JSON.stringify(e.expected, de.jsonStringifyReplacer)}`;
      break;
    case R.unrecognized_keys:
      r = `Unrecognized key(s) in object: ${de.joinValues(e.keys, ", ")}`;
      break;
    case R.invalid_union:
      r = "Invalid input";
      break;
    case R.invalid_union_discriminator:
      r = `Invalid discriminator value. Expected ${de.joinValues(e.options)}`;
      break;
    case R.invalid_enum_value:
      r = `Invalid enum value. Expected ${de.joinValues(e.options)}, received '${e.received}'`;
      break;
    case R.invalid_arguments:
      r = "Invalid function arguments";
      break;
    case R.invalid_return_type:
      r = "Invalid function return type";
      break;
    case R.invalid_date:
      r = "Invalid date";
      break;
    case R.invalid_string:
      typeof e.validation == "object" ? "includes" in e.validation ? (r = `Invalid input: must include "${e.validation.includes}"`, typeof e.validation.position == "number" && (r = `${r} at one or more positions greater than or equal to ${e.validation.position}`)) : "startsWith" in e.validation ? r = `Invalid input: must start with "${e.validation.startsWith}"` : "endsWith" in e.validation ? r = `Invalid input: must end with "${e.validation.endsWith}"` : de.assertNever(e.validation) : e.validation !== "regex" ? r = `Invalid ${e.validation}` : r = "Invalid";
      break;
    case R.too_small:
      e.type === "array" ? r = `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "more than"} ${e.minimum} element(s)` : e.type === "string" ? r = `String must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "over"} ${e.minimum} character(s)` : e.type === "number" ? r = `Number must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${e.minimum}` : e.type === "date" ? r = `Date must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(e.minimum))}` : r = "Invalid input";
      break;
    case R.too_big:
      e.type === "array" ? r = `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "less than"} ${e.maximum} element(s)` : e.type === "string" ? r = `String must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "under"} ${e.maximum} character(s)` : e.type === "number" ? r = `Number must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : e.type === "bigint" ? r = `BigInt must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : e.type === "date" ? r = `Date must be ${e.exact ? "exactly" : e.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(e.maximum))}` : r = "Invalid input";
      break;
    case R.custom:
      r = "Invalid input";
      break;
    case R.invalid_intersection_types:
      r = "Intersection results could not be merged";
      break;
    case R.not_multiple_of:
      r = `Number must be a multiple of ${e.multipleOf}`;
      break;
    case R.not_finite:
      r = "Number must be finite";
      break;
    default:
      r = t.defaultError, de.assertNever(e);
  }
  return { message: r };
};
let Gx = cs;
function mo() {
  return Gx;
}
const vo = (e) => {
  const { data: t, path: r, errorMaps: s, issueData: a } = e, l = [...r, ...a.path || []], u = {
    ...a,
    path: l
  };
  let f = "";
  const d = s.filter((g) => !!g).slice().reverse();
  for (const g of d)
    f = g(u, { data: t, defaultError: f }).message;
  return {
    ...a,
    path: l,
    message: a.message || f
  };
};
function W(e, t) {
  const r = vo({
    issueData: t,
    data: e.data,
    path: e.path,
    errorMaps: [
      e.common.contextualErrorMap,
      e.schemaErrorMap,
      mo(),
      cs
      // then global default map
    ].filter((s) => !!s)
  });
  e.common.issues.push(r);
}
class qe {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(t, r) {
    const s = [];
    for (const a of r) {
      if (a.status === "aborted")
        return ee;
      a.status === "dirty" && t.dirty(), s.push(a.value);
    }
    return { status: t.value, value: s };
  }
  static async mergeObjectAsync(t, r) {
    const s = [];
    for (const a of r)
      s.push({
        key: await a.key,
        value: await a.value
      });
    return qe.mergeObjectSync(t, s);
  }
  static mergeObjectSync(t, r) {
    const s = {};
    for (const a of r) {
      const { key: l, value: u } = a;
      if (l.status === "aborted" || u.status === "aborted")
        return ee;
      l.status === "dirty" && t.dirty(), u.status === "dirty" && t.dirty(), (typeof u.value < "u" || a.alwaysSet) && (s[l.value] = u.value);
    }
    return { status: t.value, value: s };
  }
}
const ee = Object.freeze({
  status: "aborted"
}), Yx = (e) => ({ status: "dirty", value: e }), rt = (e) => ({ status: "valid", value: e }), tf = (e) => e.status === "aborted", nf = (e) => e.status === "dirty", yo = (e) => e.status === "valid", _o = (e) => typeof Promise < "u" && e instanceof Promise;
var G;
(function(e) {
  e.errToObj = (t) => typeof t == "string" ? { message: t } : t || {}, e.toString = (t) => typeof t == "string" ? t : t == null ? void 0 : t.message;
})(G || (G = {}));
class Zt {
  constructor(t, r, s, a) {
    this._cachedPath = [], this.parent = t, this.data = r, this._path = s, this._key = a;
  }
  get path() {
    return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const rf = (e, t) => {
  if (yo(t))
    return { success: !0, data: t.value };
  if (!e.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const r = new Wt(e.common.issues);
      return this._error = r, this._error;
    }
  };
};
function ne(e) {
  if (!e)
    return {};
  const { errorMap: t, invalid_type_error: r, required_error: s, description: a } = e;
  if (t && (r || s))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return t ? { errorMap: t, description: a } : { errorMap: (u, f) => u.code !== "invalid_type" ? { message: f.defaultError } : typeof f.data > "u" ? { message: s ?? f.defaultError } : { message: r ?? f.defaultError }, description: a };
}
class ue {
  constructor(t) {
    this.spa = this.safeParseAsync, this._def = t, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(t) {
    return Un(t.data);
  }
  _getOrReturnCtx(t, r) {
    return r || {
      common: t.parent.common,
      data: t.data,
      parsedType: Un(t.data),
      schemaErrorMap: this._def.errorMap,
      path: t.path,
      parent: t.parent
    };
  }
  _processInputParams(t) {
    return {
      status: new qe(),
      ctx: {
        common: t.parent.common,
        data: t.data,
        parsedType: Un(t.data),
        schemaErrorMap: this._def.errorMap,
        path: t.path,
        parent: t.parent
      }
    };
  }
  _parseSync(t) {
    const r = this._parse(t);
    if (_o(r))
      throw new Error("Synchronous parse encountered promise.");
    return r;
  }
  _parseAsync(t) {
    const r = this._parse(t);
    return Promise.resolve(r);
  }
  parse(t, r) {
    const s = this.safeParse(t, r);
    if (s.success)
      return s.data;
    throw s.error;
  }
  safeParse(t, r) {
    var s;
    const a = {
      common: {
        issues: [],
        async: (s = r == null ? void 0 : r.async) !== null && s !== void 0 ? s : !1,
        contextualErrorMap: r == null ? void 0 : r.errorMap
      },
      path: (r == null ? void 0 : r.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: t,
      parsedType: Un(t)
    }, l = this._parseSync({ data: t, path: a.path, parent: a });
    return rf(a, l);
  }
  async parseAsync(t, r) {
    const s = await this.safeParseAsync(t, r);
    if (s.success)
      return s.data;
    throw s.error;
  }
  async safeParseAsync(t, r) {
    const s = {
      common: {
        issues: [],
        contextualErrorMap: r == null ? void 0 : r.errorMap,
        async: !0
      },
      path: (r == null ? void 0 : r.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: t,
      parsedType: Un(t)
    }, a = this._parse({ data: t, path: s.path, parent: s }), l = await (_o(a) ? a : Promise.resolve(a));
    return rf(s, l);
  }
  refine(t, r) {
    const s = (a) => typeof r == "string" || typeof r > "u" ? { message: r } : typeof r == "function" ? r(a) : r;
    return this._refinement((a, l) => {
      const u = t(a), f = () => l.addIssue({
        code: R.custom,
        ...s(a)
      });
      return typeof Promise < "u" && u instanceof Promise ? u.then((d) => d ? !0 : (f(), !1)) : u ? !0 : (f(), !1);
    });
  }
  refinement(t, r) {
    return this._refinement((s, a) => t(s) ? !0 : (a.addIssue(typeof r == "function" ? r(s, a) : r), !1));
  }
  _refinement(t) {
    return new on({
      schema: this,
      typeName: X.ZodEffects,
      effect: { type: "refinement", refinement: t }
    });
  }
  superRefine(t) {
    return this._refinement(t);
  }
  optional() {
    return bn.create(this, this._def);
  }
  nullable() {
    return Nr.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Ut.create(this, this._def);
  }
  promise() {
    return oi.create(this, this._def);
  }
  or(t) {
    return hs.create([this, t], this._def);
  }
  and(t) {
    return ps.create(this, t, this._def);
  }
  transform(t) {
    return new on({
      ...ne(this._def),
      schema: this,
      typeName: X.ZodEffects,
      effect: { type: "transform", transform: t }
    });
  }
  default(t) {
    const r = typeof t == "function" ? t : () => t;
    return new _s({
      ...ne(this._def),
      innerType: this,
      defaultValue: r,
      typeName: X.ZodDefault
    });
  }
  brand() {
    return new sw({
      typeName: X.ZodBranded,
      type: this,
      ...ne(this._def)
    });
  }
  catch(t) {
    const r = typeof t == "function" ? t : () => t;
    return new To({
      ...ne(this._def),
      innerType: this,
      catchValue: r,
      typeName: X.ZodCatch
    });
  }
  describe(t) {
    const r = this.constructor;
    return new r({
      ...this._def,
      description: t
    });
  }
  pipe(t) {
    return Ps.create(this, t);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const qx = /^c[^\s-]{8,}$/i, zx = /^[a-z][a-z0-9]*$/, Kx = /[0-9A-HJKMNP-TV-Z]{26}/, Xx = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i, Jx = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/, Qx = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u, ew = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/, tw = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/, nw = (e) => e.precision ? e.offset ? new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`) : new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}Z$`) : e.precision === 0 ? e.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$") : e.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");
function rw(e, t) {
  return !!((t === "v4" || !t) && ew.test(e) || (t === "v6" || !t) && tw.test(e));
}
class rn extends ue {
  constructor() {
    super(...arguments), this._regex = (t, r, s) => this.refinement((a) => t.test(a), {
      validation: r,
      code: R.invalid_string,
      ...G.errToObj(s)
    }), this.nonempty = (t) => this.min(1, G.errToObj(t)), this.trim = () => new rn({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    }), this.toLowerCase = () => new rn({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    }), this.toUpperCase = () => new rn({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  _parse(t) {
    if (this._def.coerce && (t.data = String(t.data)), this._getType(t) !== M.string) {
      const l = this._getOrReturnCtx(t);
      return W(
        l,
        {
          code: R.invalid_type,
          expected: M.string,
          received: l.parsedType
        }
        //
      ), ee;
    }
    const s = new qe();
    let a;
    for (const l of this._def.checks)
      if (l.kind === "min")
        t.data.length < l.value && (a = this._getOrReturnCtx(t, a), W(a, {
          code: R.too_small,
          minimum: l.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: l.message
        }), s.dirty());
      else if (l.kind === "max")
        t.data.length > l.value && (a = this._getOrReturnCtx(t, a), W(a, {
          code: R.too_big,
          maximum: l.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: l.message
        }), s.dirty());
      else if (l.kind === "length") {
        const u = t.data.length > l.value, f = t.data.length < l.value;
        (u || f) && (a = this._getOrReturnCtx(t, a), u ? W(a, {
          code: R.too_big,
          maximum: l.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: l.message
        }) : f && W(a, {
          code: R.too_small,
          minimum: l.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: l.message
        }), s.dirty());
      } else if (l.kind === "email")
        Jx.test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "email",
          code: R.invalid_string,
          message: l.message
        }), s.dirty());
      else if (l.kind === "emoji")
        Qx.test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "emoji",
          code: R.invalid_string,
          message: l.message
        }), s.dirty());
      else if (l.kind === "uuid")
        Xx.test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "uuid",
          code: R.invalid_string,
          message: l.message
        }), s.dirty());
      else if (l.kind === "cuid")
        qx.test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "cuid",
          code: R.invalid_string,
          message: l.message
        }), s.dirty());
      else if (l.kind === "cuid2")
        zx.test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "cuid2",
          code: R.invalid_string,
          message: l.message
        }), s.dirty());
      else if (l.kind === "ulid")
        Kx.test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "ulid",
          code: R.invalid_string,
          message: l.message
        }), s.dirty());
      else if (l.kind === "url")
        try {
          new URL(t.data);
        } catch {
          a = this._getOrReturnCtx(t, a), W(a, {
            validation: "url",
            code: R.invalid_string,
            message: l.message
          }), s.dirty();
        }
      else
        l.kind === "regex" ? (l.regex.lastIndex = 0, l.regex.test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "regex",
          code: R.invalid_string,
          message: l.message
        }), s.dirty())) : l.kind === "trim" ? t.data = t.data.trim() : l.kind === "includes" ? t.data.includes(l.value, l.position) || (a = this._getOrReturnCtx(t, a), W(a, {
          code: R.invalid_string,
          validation: { includes: l.value, position: l.position },
          message: l.message
        }), s.dirty()) : l.kind === "toLowerCase" ? t.data = t.data.toLowerCase() : l.kind === "toUpperCase" ? t.data = t.data.toUpperCase() : l.kind === "startsWith" ? t.data.startsWith(l.value) || (a = this._getOrReturnCtx(t, a), W(a, {
          code: R.invalid_string,
          validation: { startsWith: l.value },
          message: l.message
        }), s.dirty()) : l.kind === "endsWith" ? t.data.endsWith(l.value) || (a = this._getOrReturnCtx(t, a), W(a, {
          code: R.invalid_string,
          validation: { endsWith: l.value },
          message: l.message
        }), s.dirty()) : l.kind === "datetime" ? nw(l).test(t.data) || (a = this._getOrReturnCtx(t, a), W(a, {
          code: R.invalid_string,
          validation: "datetime",
          message: l.message
        }), s.dirty()) : l.kind === "ip" ? rw(t.data, l.version) || (a = this._getOrReturnCtx(t, a), W(a, {
          validation: "ip",
          code: R.invalid_string,
          message: l.message
        }), s.dirty()) : de.assertNever(l);
    return { status: s.value, value: t.data };
  }
  _addCheck(t) {
    return new rn({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  email(t) {
    return this._addCheck({ kind: "email", ...G.errToObj(t) });
  }
  url(t) {
    return this._addCheck({ kind: "url", ...G.errToObj(t) });
  }
  emoji(t) {
    return this._addCheck({ kind: "emoji", ...G.errToObj(t) });
  }
  uuid(t) {
    return this._addCheck({ kind: "uuid", ...G.errToObj(t) });
  }
  cuid(t) {
    return this._addCheck({ kind: "cuid", ...G.errToObj(t) });
  }
  cuid2(t) {
    return this._addCheck({ kind: "cuid2", ...G.errToObj(t) });
  }
  ulid(t) {
    return this._addCheck({ kind: "ulid", ...G.errToObj(t) });
  }
  ip(t) {
    return this._addCheck({ kind: "ip", ...G.errToObj(t) });
  }
  datetime(t) {
    var r;
    return typeof t == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      message: t
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (t == null ? void 0 : t.precision) > "u" ? null : t == null ? void 0 : t.precision,
      offset: (r = t == null ? void 0 : t.offset) !== null && r !== void 0 ? r : !1,
      ...G.errToObj(t == null ? void 0 : t.message)
    });
  }
  regex(t, r) {
    return this._addCheck({
      kind: "regex",
      regex: t,
      ...G.errToObj(r)
    });
  }
  includes(t, r) {
    return this._addCheck({
      kind: "includes",
      value: t,
      position: r == null ? void 0 : r.position,
      ...G.errToObj(r == null ? void 0 : r.message)
    });
  }
  startsWith(t, r) {
    return this._addCheck({
      kind: "startsWith",
      value: t,
      ...G.errToObj(r)
    });
  }
  endsWith(t, r) {
    return this._addCheck({
      kind: "endsWith",
      value: t,
      ...G.errToObj(r)
    });
  }
  min(t, r) {
    return this._addCheck({
      kind: "min",
      value: t,
      ...G.errToObj(r)
    });
  }
  max(t, r) {
    return this._addCheck({
      kind: "max",
      value: t,
      ...G.errToObj(r)
    });
  }
  length(t, r) {
    return this._addCheck({
      kind: "length",
      value: t,
      ...G.errToObj(r)
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((t) => t.kind === "datetime");
  }
  get isEmail() {
    return !!this._def.checks.find((t) => t.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((t) => t.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((t) => t.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((t) => t.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((t) => t.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((t) => t.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((t) => t.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((t) => t.kind === "ip");
  }
  get minLength() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxLength() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
}
rn.create = (e) => {
  var t;
  return new rn({
    checks: [],
    typeName: X.ZodString,
    coerce: (t = e == null ? void 0 : e.coerce) !== null && t !== void 0 ? t : !1,
    ...ne(e)
  });
};
function iw(e, t) {
  const r = (e.toString().split(".")[1] || "").length, s = (t.toString().split(".")[1] || "").length, a = r > s ? r : s, l = parseInt(e.toFixed(a).replace(".", "")), u = parseInt(t.toFixed(a).replace(".", ""));
  return l % u / Math.pow(10, a);
}
class Sr extends ue {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(t) {
    if (this._def.coerce && (t.data = Number(t.data)), this._getType(t) !== M.number) {
      const l = this._getOrReturnCtx(t);
      return W(l, {
        code: R.invalid_type,
        expected: M.number,
        received: l.parsedType
      }), ee;
    }
    let s;
    const a = new qe();
    for (const l of this._def.checks)
      l.kind === "int" ? de.isInteger(t.data) || (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.invalid_type,
        expected: "integer",
        received: "float",
        message: l.message
      }), a.dirty()) : l.kind === "min" ? (l.inclusive ? t.data < l.value : t.data <= l.value) && (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.too_small,
        minimum: l.value,
        type: "number",
        inclusive: l.inclusive,
        exact: !1,
        message: l.message
      }), a.dirty()) : l.kind === "max" ? (l.inclusive ? t.data > l.value : t.data >= l.value) && (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.too_big,
        maximum: l.value,
        type: "number",
        inclusive: l.inclusive,
        exact: !1,
        message: l.message
      }), a.dirty()) : l.kind === "multipleOf" ? iw(t.data, l.value) !== 0 && (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.not_multiple_of,
        multipleOf: l.value,
        message: l.message
      }), a.dirty()) : l.kind === "finite" ? Number.isFinite(t.data) || (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.not_finite,
        message: l.message
      }), a.dirty()) : de.assertNever(l);
    return { status: a.value, value: t.data };
  }
  gte(t, r) {
    return this.setLimit("min", t, !0, G.toString(r));
  }
  gt(t, r) {
    return this.setLimit("min", t, !1, G.toString(r));
  }
  lte(t, r) {
    return this.setLimit("max", t, !0, G.toString(r));
  }
  lt(t, r) {
    return this.setLimit("max", t, !1, G.toString(r));
  }
  setLimit(t, r, s, a) {
    return new Sr({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: t,
          value: r,
          inclusive: s,
          message: G.toString(a)
        }
      ]
    });
  }
  _addCheck(t) {
    return new Sr({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  int(t) {
    return this._addCheck({
      kind: "int",
      message: G.toString(t)
    });
  }
  positive(t) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: G.toString(t)
    });
  }
  negative(t) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: G.toString(t)
    });
  }
  nonpositive(t) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: G.toString(t)
    });
  }
  nonnegative(t) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: G.toString(t)
    });
  }
  multipleOf(t, r) {
    return this._addCheck({
      kind: "multipleOf",
      value: t,
      message: G.toString(r)
    });
  }
  finite(t) {
    return this._addCheck({
      kind: "finite",
      message: G.toString(t)
    });
  }
  safe(t) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: G.toString(t)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: G.toString(t)
    });
  }
  get minValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
  get isInt() {
    return !!this._def.checks.find((t) => t.kind === "int" || t.kind === "multipleOf" && de.isInteger(t.value));
  }
  get isFinite() {
    let t = null, r = null;
    for (const s of this._def.checks) {
      if (s.kind === "finite" || s.kind === "int" || s.kind === "multipleOf")
        return !0;
      s.kind === "min" ? (r === null || s.value > r) && (r = s.value) : s.kind === "max" && (t === null || s.value < t) && (t = s.value);
    }
    return Number.isFinite(r) && Number.isFinite(t);
  }
}
Sr.create = (e) => new Sr({
  checks: [],
  typeName: X.ZodNumber,
  coerce: (e == null ? void 0 : e.coerce) || !1,
  ...ne(e)
});
class Lr extends ue {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(t) {
    if (this._def.coerce && (t.data = BigInt(t.data)), this._getType(t) !== M.bigint) {
      const l = this._getOrReturnCtx(t);
      return W(l, {
        code: R.invalid_type,
        expected: M.bigint,
        received: l.parsedType
      }), ee;
    }
    let s;
    const a = new qe();
    for (const l of this._def.checks)
      l.kind === "min" ? (l.inclusive ? t.data < l.value : t.data <= l.value) && (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.too_small,
        type: "bigint",
        minimum: l.value,
        inclusive: l.inclusive,
        message: l.message
      }), a.dirty()) : l.kind === "max" ? (l.inclusive ? t.data > l.value : t.data >= l.value) && (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.too_big,
        type: "bigint",
        maximum: l.value,
        inclusive: l.inclusive,
        message: l.message
      }), a.dirty()) : l.kind === "multipleOf" ? t.data % l.value !== BigInt(0) && (s = this._getOrReturnCtx(t, s), W(s, {
        code: R.not_multiple_of,
        multipleOf: l.value,
        message: l.message
      }), a.dirty()) : de.assertNever(l);
    return { status: a.value, value: t.data };
  }
  gte(t, r) {
    return this.setLimit("min", t, !0, G.toString(r));
  }
  gt(t, r) {
    return this.setLimit("min", t, !1, G.toString(r));
  }
  lte(t, r) {
    return this.setLimit("max", t, !0, G.toString(r));
  }
  lt(t, r) {
    return this.setLimit("max", t, !1, G.toString(r));
  }
  setLimit(t, r, s, a) {
    return new Lr({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: t,
          value: r,
          inclusive: s,
          message: G.toString(a)
        }
      ]
    });
  }
  _addCheck(t) {
    return new Lr({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  positive(t) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: G.toString(t)
    });
  }
  negative(t) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: G.toString(t)
    });
  }
  nonpositive(t) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: G.toString(t)
    });
  }
  nonnegative(t) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: G.toString(t)
    });
  }
  multipleOf(t, r) {
    return this._addCheck({
      kind: "multipleOf",
      value: t,
      message: G.toString(r)
    });
  }
  get minValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
}
Lr.create = (e) => {
  var t;
  return new Lr({
    checks: [],
    typeName: X.ZodBigInt,
    coerce: (t = e == null ? void 0 : e.coerce) !== null && t !== void 0 ? t : !1,
    ...ne(e)
  });
};
class xo extends ue {
  _parse(t) {
    if (this._def.coerce && (t.data = !!t.data), this._getType(t) !== M.boolean) {
      const s = this._getOrReturnCtx(t);
      return W(s, {
        code: R.invalid_type,
        expected: M.boolean,
        received: s.parsedType
      }), ee;
    }
    return rt(t.data);
  }
}
xo.create = (e) => new xo({
  typeName: X.ZodBoolean,
  coerce: (e == null ? void 0 : e.coerce) || !1,
  ...ne(e)
});
class ai extends ue {
  _parse(t) {
    if (this._def.coerce && (t.data = new Date(t.data)), this._getType(t) !== M.date) {
      const l = this._getOrReturnCtx(t);
      return W(l, {
        code: R.invalid_type,
        expected: M.date,
        received: l.parsedType
      }), ee;
    }
    if (isNaN(t.data.getTime())) {
      const l = this._getOrReturnCtx(t);
      return W(l, {
        code: R.invalid_date
      }), ee;
    }
    const s = new qe();
    let a;
    for (const l of this._def.checks)
      l.kind === "min" ? t.data.getTime() < l.value && (a = this._getOrReturnCtx(t, a), W(a, {
        code: R.too_small,
        message: l.message,
        inclusive: !0,
        exact: !1,
        minimum: l.value,
        type: "date"
      }), s.dirty()) : l.kind === "max" ? t.data.getTime() > l.value && (a = this._getOrReturnCtx(t, a), W(a, {
        code: R.too_big,
        message: l.message,
        inclusive: !0,
        exact: !1,
        maximum: l.value,
        type: "date"
      }), s.dirty()) : de.assertNever(l);
    return {
      status: s.value,
      value: new Date(t.data.getTime())
    };
  }
  _addCheck(t) {
    return new ai({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  min(t, r) {
    return this._addCheck({
      kind: "min",
      value: t.getTime(),
      message: G.toString(r)
    });
  }
  max(t, r) {
    return this._addCheck({
      kind: "max",
      value: t.getTime(),
      message: G.toString(r)
    });
  }
  get minDate() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t != null ? new Date(t) : null;
  }
  get maxDate() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t != null ? new Date(t) : null;
  }
}
ai.create = (e) => new ai({
  checks: [],
  coerce: (e == null ? void 0 : e.coerce) || !1,
  typeName: X.ZodDate,
  ...ne(e)
});
class wo extends ue {
  _parse(t) {
    if (this._getType(t) !== M.symbol) {
      const s = this._getOrReturnCtx(t);
      return W(s, {
        code: R.invalid_type,
        expected: M.symbol,
        received: s.parsedType
      }), ee;
    }
    return rt(t.data);
  }
}
wo.create = (e) => new wo({
  typeName: X.ZodSymbol,
  ...ne(e)
});
class fs extends ue {
  _parse(t) {
    if (this._getType(t) !== M.undefined) {
      const s = this._getOrReturnCtx(t);
      return W(s, {
        code: R.invalid_type,
        expected: M.undefined,
        received: s.parsedType
      }), ee;
    }
    return rt(t.data);
  }
}
fs.create = (e) => new fs({
  typeName: X.ZodUndefined,
  ...ne(e)
});
class ds extends ue {
  _parse(t) {
    if (this._getType(t) !== M.null) {
      const s = this._getOrReturnCtx(t);
      return W(s, {
        code: R.invalid_type,
        expected: M.null,
        received: s.parsedType
      }), ee;
    }
    return rt(t.data);
  }
}
ds.create = (e) => new ds({
  typeName: X.ZodNull,
  ...ne(e)
});
class bo extends ue {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(t) {
    return rt(t.data);
  }
}
bo.create = (e) => new bo({
  typeName: X.ZodAny,
  ...ne(e)
});
class Ar extends ue {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(t) {
    return rt(t.data);
  }
}
Ar.create = (e) => new Ar({
  typeName: X.ZodUnknown,
  ...ne(e)
});
class An extends ue {
  _parse(t) {
    const r = this._getOrReturnCtx(t);
    return W(r, {
      code: R.invalid_type,
      expected: M.never,
      received: r.parsedType
    }), ee;
  }
}
An.create = (e) => new An({
  typeName: X.ZodNever,
  ...ne(e)
});
class Eo extends ue {
  _parse(t) {
    if (this._getType(t) !== M.undefined) {
      const s = this._getOrReturnCtx(t);
      return W(s, {
        code: R.invalid_type,
        expected: M.void,
        received: s.parsedType
      }), ee;
    }
    return rt(t.data);
  }
}
Eo.create = (e) => new Eo({
  typeName: X.ZodVoid,
  ...ne(e)
});
class Ut extends ue {
  _parse(t) {
    const { ctx: r, status: s } = this._processInputParams(t), a = this._def;
    if (r.parsedType !== M.array)
      return W(r, {
        code: R.invalid_type,
        expected: M.array,
        received: r.parsedType
      }), ee;
    if (a.exactLength !== null) {
      const u = r.data.length > a.exactLength.value, f = r.data.length < a.exactLength.value;
      (u || f) && (W(r, {
        code: u ? R.too_big : R.too_small,
        minimum: f ? a.exactLength.value : void 0,
        maximum: u ? a.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: a.exactLength.message
      }), s.dirty());
    }
    if (a.minLength !== null && r.data.length < a.minLength.value && (W(r, {
      code: R.too_small,
      minimum: a.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: a.minLength.message
    }), s.dirty()), a.maxLength !== null && r.data.length > a.maxLength.value && (W(r, {
      code: R.too_big,
      maximum: a.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: a.maxLength.message
    }), s.dirty()), r.common.async)
      return Promise.all([...r.data].map((u, f) => a.type._parseAsync(new Zt(r, u, r.path, f)))).then((u) => qe.mergeArray(s, u));
    const l = [...r.data].map((u, f) => a.type._parseSync(new Zt(r, u, r.path, f)));
    return qe.mergeArray(s, l);
  }
  get element() {
    return this._def.type;
  }
  min(t, r) {
    return new Ut({
      ...this._def,
      minLength: { value: t, message: G.toString(r) }
    });
  }
  max(t, r) {
    return new Ut({
      ...this._def,
      maxLength: { value: t, message: G.toString(r) }
    });
  }
  length(t, r) {
    return new Ut({
      ...this._def,
      exactLength: { value: t, message: G.toString(r) }
    });
  }
  nonempty(t) {
    return this.min(1, t);
  }
}
Ut.create = (e, t) => new Ut({
  type: e,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: X.ZodArray,
  ...ne(t)
});
function yr(e) {
  if (e instanceof be) {
    const t = {};
    for (const r in e.shape) {
      const s = e.shape[r];
      t[r] = bn.create(yr(s));
    }
    return new be({
      ...e._def,
      shape: () => t
    });
  } else
    return e instanceof Ut ? new Ut({
      ...e._def,
      type: yr(e.element)
    }) : e instanceof bn ? bn.create(yr(e.unwrap())) : e instanceof Nr ? Nr.create(yr(e.unwrap())) : e instanceof an ? an.create(e.items.map((t) => yr(t))) : e;
}
class be extends ue {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const t = this._def.shape(), r = de.objectKeys(t);
    return this._cached = { shape: t, keys: r };
  }
  _parse(t) {
    if (this._getType(t) !== M.object) {
      const g = this._getOrReturnCtx(t);
      return W(g, {
        code: R.invalid_type,
        expected: M.object,
        received: g.parsedType
      }), ee;
    }
    const { status: s, ctx: a } = this._processInputParams(t), { shape: l, keys: u } = this._getCached(), f = [];
    if (!(this._def.catchall instanceof An && this._def.unknownKeys === "strip"))
      for (const g in a.data)
        u.includes(g) || f.push(g);
    const d = [];
    for (const g of u) {
      const _ = l[g], x = a.data[g];
      d.push({
        key: { status: "valid", value: g },
        value: _._parse(new Zt(a, x, a.path, g)),
        alwaysSet: g in a.data
      });
    }
    if (this._def.catchall instanceof An) {
      const g = this._def.unknownKeys;
      if (g === "passthrough")
        for (const _ of f)
          d.push({
            key: { status: "valid", value: _ },
            value: { status: "valid", value: a.data[_] }
          });
      else if (g === "strict")
        f.length > 0 && (W(a, {
          code: R.unrecognized_keys,
          keys: f
        }), s.dirty());
      else if (g !== "strip")
        throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const g = this._def.catchall;
      for (const _ of f) {
        const x = a.data[_];
        d.push({
          key: { status: "valid", value: _ },
          value: g._parse(
            new Zt(a, x, a.path, _)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: _ in a.data
        });
      }
    }
    return a.common.async ? Promise.resolve().then(async () => {
      const g = [];
      for (const _ of d) {
        const x = await _.key;
        g.push({
          key: x,
          value: await _.value,
          alwaysSet: _.alwaysSet
        });
      }
      return g;
    }).then((g) => qe.mergeObjectSync(s, g)) : qe.mergeObjectSync(s, d);
  }
  get shape() {
    return this._def.shape();
  }
  strict(t) {
    return G.errToObj, new be({
      ...this._def,
      unknownKeys: "strict",
      ...t !== void 0 ? {
        errorMap: (r, s) => {
          var a, l, u, f;
          const d = (u = (l = (a = this._def).errorMap) === null || l === void 0 ? void 0 : l.call(a, r, s).message) !== null && u !== void 0 ? u : s.defaultError;
          return r.code === "unrecognized_keys" ? {
            message: (f = G.errToObj(t).message) !== null && f !== void 0 ? f : d
          } : {
            message: d
          };
        }
      } : {}
    });
  }
  strip() {
    return new be({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new be({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(t) {
    return new be({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...t
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(t) {
    return new be({
      unknownKeys: t._def.unknownKeys,
      catchall: t._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...t._def.shape()
      }),
      typeName: X.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(t, r) {
    return this.augment({ [t]: r });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(t) {
    return new be({
      ...this._def,
      catchall: t
    });
  }
  pick(t) {
    const r = {};
    return de.objectKeys(t).forEach((s) => {
      t[s] && this.shape[s] && (r[s] = this.shape[s]);
    }), new be({
      ...this._def,
      shape: () => r
    });
  }
  omit(t) {
    const r = {};
    return de.objectKeys(this.shape).forEach((s) => {
      t[s] || (r[s] = this.shape[s]);
    }), new be({
      ...this._def,
      shape: () => r
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return yr(this);
  }
  partial(t) {
    const r = {};
    return de.objectKeys(this.shape).forEach((s) => {
      const a = this.shape[s];
      t && !t[s] ? r[s] = a : r[s] = a.optional();
    }), new be({
      ...this._def,
      shape: () => r
    });
  }
  required(t) {
    const r = {};
    return de.objectKeys(this.shape).forEach((s) => {
      if (t && !t[s])
        r[s] = this.shape[s];
      else {
        let l = this.shape[s];
        for (; l instanceof bn; )
          l = l._def.innerType;
        r[s] = l;
      }
    }), new be({
      ...this._def,
      shape: () => r
    });
  }
  keyof() {
    return $f(de.objectKeys(this.shape));
  }
}
be.create = (e, t) => new be({
  shape: () => e,
  unknownKeys: "strip",
  catchall: An.create(),
  typeName: X.ZodObject,
  ...ne(t)
});
be.strictCreate = (e, t) => new be({
  shape: () => e,
  unknownKeys: "strict",
  catchall: An.create(),
  typeName: X.ZodObject,
  ...ne(t)
});
be.lazycreate = (e, t) => new be({
  shape: e,
  unknownKeys: "strip",
  catchall: An.create(),
  typeName: X.ZodObject,
  ...ne(t)
});
class hs extends ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), s = this._def.options;
    function a(l) {
      for (const f of l)
        if (f.result.status === "valid")
          return f.result;
      for (const f of l)
        if (f.result.status === "dirty")
          return r.common.issues.push(...f.ctx.common.issues), f.result;
      const u = l.map((f) => new Wt(f.ctx.common.issues));
      return W(r, {
        code: R.invalid_union,
        unionErrors: u
      }), ee;
    }
    if (r.common.async)
      return Promise.all(s.map(async (l) => {
        const u = {
          ...r,
          common: {
            ...r.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await l._parseAsync({
            data: r.data,
            path: r.path,
            parent: u
          }),
          ctx: u
        };
      })).then(a);
    {
      let l;
      const u = [];
      for (const d of s) {
        const g = {
          ...r,
          common: {
            ...r.common,
            issues: []
          },
          parent: null
        }, _ = d._parseSync({
          data: r.data,
          path: r.path,
          parent: g
        });
        if (_.status === "valid")
          return _;
        _.status === "dirty" && !l && (l = { result: _, ctx: g }), g.common.issues.length && u.push(g.common.issues);
      }
      if (l)
        return r.common.issues.push(...l.ctx.common.issues), l.result;
      const f = u.map((d) => new Wt(d));
      return W(r, {
        code: R.invalid_union,
        unionErrors: f
      }), ee;
    }
  }
  get options() {
    return this._def.options;
  }
}
hs.create = (e, t) => new hs({
  options: e,
  typeName: X.ZodUnion,
  ...ne(t)
});
const os = (e) => e instanceof ms ? os(e.schema) : e instanceof on ? os(e.innerType()) : e instanceof vs ? [e.value] : e instanceof Jn ? e.options : e instanceof ys ? Object.keys(e.enum) : e instanceof _s ? os(e._def.innerType) : e instanceof fs ? [void 0] : e instanceof ds ? [null] : null;
class qo extends ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== M.object)
      return W(r, {
        code: R.invalid_type,
        expected: M.object,
        received: r.parsedType
      }), ee;
    const s = this.discriminator, a = r.data[s], l = this.optionsMap.get(a);
    return l ? r.common.async ? l._parseAsync({
      data: r.data,
      path: r.path,
      parent: r
    }) : l._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }) : (W(r, {
      code: R.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [s]
    }), ee);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(t, r, s) {
    const a = /* @__PURE__ */ new Map();
    for (const l of r) {
      const u = os(l.shape[t]);
      if (!u)
        throw new Error(`A discriminator value for key \`${t}\` could not be extracted from all schema options`);
      for (const f of u) {
        if (a.has(f))
          throw new Error(`Discriminator property ${String(t)} has duplicate value ${String(f)}`);
        a.set(f, l);
      }
    }
    return new qo({
      typeName: X.ZodDiscriminatedUnion,
      discriminator: t,
      options: r,
      optionsMap: a,
      ...ne(s)
    });
  }
}
function Ao(e, t) {
  const r = Un(e), s = Un(t);
  if (e === t)
    return { valid: !0, data: e };
  if (r === M.object && s === M.object) {
    const a = de.objectKeys(t), l = de.objectKeys(e).filter((f) => a.indexOf(f) !== -1), u = { ...e, ...t };
    for (const f of l) {
      const d = Ao(e[f], t[f]);
      if (!d.valid)
        return { valid: !1 };
      u[f] = d.data;
    }
    return { valid: !0, data: u };
  } else if (r === M.array && s === M.array) {
    if (e.length !== t.length)
      return { valid: !1 };
    const a = [];
    for (let l = 0; l < e.length; l++) {
      const u = e[l], f = t[l], d = Ao(u, f);
      if (!d.valid)
        return { valid: !1 };
      a.push(d.data);
    }
    return { valid: !0, data: a };
  } else
    return r === M.date && s === M.date && +e == +t ? { valid: !0, data: e } : { valid: !1 };
}
class ps extends ue {
  _parse(t) {
    const { status: r, ctx: s } = this._processInputParams(t), a = (l, u) => {
      if (tf(l) || tf(u))
        return ee;
      const f = Ao(l.value, u.value);
      return f.valid ? ((nf(l) || nf(u)) && r.dirty(), { status: r.value, value: f.data }) : (W(s, {
        code: R.invalid_intersection_types
      }), ee);
    };
    return s.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: s.data,
        path: s.path,
        parent: s
      }),
      this._def.right._parseAsync({
        data: s.data,
        path: s.path,
        parent: s
      })
    ]).then(([l, u]) => a(l, u)) : a(this._def.left._parseSync({
      data: s.data,
      path: s.path,
      parent: s
    }), this._def.right._parseSync({
      data: s.data,
      path: s.path,
      parent: s
    }));
  }
}
ps.create = (e, t, r) => new ps({
  left: e,
  right: t,
  typeName: X.ZodIntersection,
  ...ne(r)
});
class an extends ue {
  _parse(t) {
    const { status: r, ctx: s } = this._processInputParams(t);
    if (s.parsedType !== M.array)
      return W(s, {
        code: R.invalid_type,
        expected: M.array,
        received: s.parsedType
      }), ee;
    if (s.data.length < this._def.items.length)
      return W(s, {
        code: R.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), ee;
    !this._def.rest && s.data.length > this._def.items.length && (W(s, {
      code: R.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), r.dirty());
    const l = [...s.data].map((u, f) => {
      const d = this._def.items[f] || this._def.rest;
      return d ? d._parse(new Zt(s, u, s.path, f)) : null;
    }).filter((u) => !!u);
    return s.common.async ? Promise.all(l).then((u) => qe.mergeArray(r, u)) : qe.mergeArray(r, l);
  }
  get items() {
    return this._def.items;
  }
  rest(t) {
    return new an({
      ...this._def,
      rest: t
    });
  }
}
an.create = (e, t) => {
  if (!Array.isArray(e))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new an({
    items: e,
    typeName: X.ZodTuple,
    rest: null,
    ...ne(t)
  });
};
class gs extends ue {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(t) {
    const { status: r, ctx: s } = this._processInputParams(t);
    if (s.parsedType !== M.object)
      return W(s, {
        code: R.invalid_type,
        expected: M.object,
        received: s.parsedType
      }), ee;
    const a = [], l = this._def.keyType, u = this._def.valueType;
    for (const f in s.data)
      a.push({
        key: l._parse(new Zt(s, f, s.path, f)),
        value: u._parse(new Zt(s, s.data[f], s.path, f))
      });
    return s.common.async ? qe.mergeObjectAsync(r, a) : qe.mergeObjectSync(r, a);
  }
  get element() {
    return this._def.valueType;
  }
  static create(t, r, s) {
    return r instanceof ue ? new gs({
      keyType: t,
      valueType: r,
      typeName: X.ZodRecord,
      ...ne(s)
    }) : new gs({
      keyType: rn.create(),
      valueType: t,
      typeName: X.ZodRecord,
      ...ne(r)
    });
  }
}
class Co extends ue {
  _parse(t) {
    const { status: r, ctx: s } = this._processInputParams(t);
    if (s.parsedType !== M.map)
      return W(s, {
        code: R.invalid_type,
        expected: M.map,
        received: s.parsedType
      }), ee;
    const a = this._def.keyType, l = this._def.valueType, u = [...s.data.entries()].map(([f, d], g) => ({
      key: a._parse(new Zt(s, f, s.path, [g, "key"])),
      value: l._parse(new Zt(s, d, s.path, [g, "value"]))
    }));
    if (s.common.async) {
      const f = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const d of u) {
          const g = await d.key, _ = await d.value;
          if (g.status === "aborted" || _.status === "aborted")
            return ee;
          (g.status === "dirty" || _.status === "dirty") && r.dirty(), f.set(g.value, _.value);
        }
        return { status: r.value, value: f };
      });
    } else {
      const f = /* @__PURE__ */ new Map();
      for (const d of u) {
        const g = d.key, _ = d.value;
        if (g.status === "aborted" || _.status === "aborted")
          return ee;
        (g.status === "dirty" || _.status === "dirty") && r.dirty(), f.set(g.value, _.value);
      }
      return { status: r.value, value: f };
    }
  }
}
Co.create = (e, t, r) => new Co({
  valueType: t,
  keyType: e,
  typeName: X.ZodMap,
  ...ne(r)
});
class Or extends ue {
  _parse(t) {
    const { status: r, ctx: s } = this._processInputParams(t);
    if (s.parsedType !== M.set)
      return W(s, {
        code: R.invalid_type,
        expected: M.set,
        received: s.parsedType
      }), ee;
    const a = this._def;
    a.minSize !== null && s.data.size < a.minSize.value && (W(s, {
      code: R.too_small,
      minimum: a.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: a.minSize.message
    }), r.dirty()), a.maxSize !== null && s.data.size > a.maxSize.value && (W(s, {
      code: R.too_big,
      maximum: a.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: a.maxSize.message
    }), r.dirty());
    const l = this._def.valueType;
    function u(d) {
      const g = /* @__PURE__ */ new Set();
      for (const _ of d) {
        if (_.status === "aborted")
          return ee;
        _.status === "dirty" && r.dirty(), g.add(_.value);
      }
      return { status: r.value, value: g };
    }
    const f = [...s.data.values()].map((d, g) => l._parse(new Zt(s, d, s.path, g)));
    return s.common.async ? Promise.all(f).then((d) => u(d)) : u(f);
  }
  min(t, r) {
    return new Or({
      ...this._def,
      minSize: { value: t, message: G.toString(r) }
    });
  }
  max(t, r) {
    return new Or({
      ...this._def,
      maxSize: { value: t, message: G.toString(r) }
    });
  }
  size(t, r) {
    return this.min(t, r).max(t, r);
  }
  nonempty(t) {
    return this.min(1, t);
  }
}
Or.create = (e, t) => new Or({
  valueType: e,
  minSize: null,
  maxSize: null,
  typeName: X.ZodSet,
  ...ne(t)
});
class si extends ue {
  constructor() {
    super(...arguments), this.validate = this.implement;
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== M.function)
      return W(r, {
        code: R.invalid_type,
        expected: M.function,
        received: r.parsedType
      }), ee;
    function s(f, d) {
      return vo({
        data: f,
        path: r.path,
        errorMaps: [
          r.common.contextualErrorMap,
          r.schemaErrorMap,
          mo(),
          cs
        ].filter((g) => !!g),
        issueData: {
          code: R.invalid_arguments,
          argumentsError: d
        }
      });
    }
    function a(f, d) {
      return vo({
        data: f,
        path: r.path,
        errorMaps: [
          r.common.contextualErrorMap,
          r.schemaErrorMap,
          mo(),
          cs
        ].filter((g) => !!g),
        issueData: {
          code: R.invalid_return_type,
          returnTypeError: d
        }
      });
    }
    const l = { errorMap: r.common.contextualErrorMap }, u = r.data;
    return this._def.returns instanceof oi ? rt(async (...f) => {
      const d = new Wt([]), g = await this._def.args.parseAsync(f, l).catch((T) => {
        throw d.addIssue(s(f, T)), d;
      }), _ = await u(...g);
      return await this._def.returns._def.type.parseAsync(_, l).catch((T) => {
        throw d.addIssue(a(_, T)), d;
      });
    }) : rt((...f) => {
      const d = this._def.args.safeParse(f, l);
      if (!d.success)
        throw new Wt([s(f, d.error)]);
      const g = u(...d.data), _ = this._def.returns.safeParse(g, l);
      if (!_.success)
        throw new Wt([a(g, _.error)]);
      return _.data;
    });
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...t) {
    return new si({
      ...this._def,
      args: an.create(t).rest(Ar.create())
    });
  }
  returns(t) {
    return new si({
      ...this._def,
      returns: t
    });
  }
  implement(t) {
    return this.parse(t);
  }
  strictImplement(t) {
    return this.parse(t);
  }
  static create(t, r, s) {
    return new si({
      args: t || an.create([]).rest(Ar.create()),
      returns: r || Ar.create(),
      typeName: X.ZodFunction,
      ...ne(s)
    });
  }
}
class ms extends ue {
  get schema() {
    return this._def.getter();
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    return this._def.getter()._parse({ data: r.data, path: r.path, parent: r });
  }
}
ms.create = (e, t) => new ms({
  getter: e,
  typeName: X.ZodLazy,
  ...ne(t)
});
class vs extends ue {
  _parse(t) {
    if (t.data !== this._def.value) {
      const r = this._getOrReturnCtx(t);
      return W(r, {
        received: r.data,
        code: R.invalid_literal,
        expected: this._def.value
      }), ee;
    }
    return { status: "valid", value: t.data };
  }
  get value() {
    return this._def.value;
  }
}
vs.create = (e, t) => new vs({
  value: e,
  typeName: X.ZodLiteral,
  ...ne(t)
});
function $f(e, t) {
  return new Jn({
    values: e,
    typeName: X.ZodEnum,
    ...ne(t)
  });
}
class Jn extends ue {
  _parse(t) {
    if (typeof t.data != "string") {
      const r = this._getOrReturnCtx(t), s = this._def.values;
      return W(r, {
        expected: de.joinValues(s),
        received: r.parsedType,
        code: R.invalid_type
      }), ee;
    }
    if (this._def.values.indexOf(t.data) === -1) {
      const r = this._getOrReturnCtx(t), s = this._def.values;
      return W(r, {
        received: r.data,
        code: R.invalid_enum_value,
        options: s
      }), ee;
    }
    return rt(t.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  get Values() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  get Enum() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  extract(t) {
    return Jn.create(t);
  }
  exclude(t) {
    return Jn.create(this.options.filter((r) => !t.includes(r)));
  }
}
Jn.create = $f;
class ys extends ue {
  _parse(t) {
    const r = de.getValidEnumValues(this._def.values), s = this._getOrReturnCtx(t);
    if (s.parsedType !== M.string && s.parsedType !== M.number) {
      const a = de.objectValues(r);
      return W(s, {
        expected: de.joinValues(a),
        received: s.parsedType,
        code: R.invalid_type
      }), ee;
    }
    if (r.indexOf(t.data) === -1) {
      const a = de.objectValues(r);
      return W(s, {
        received: s.data,
        code: R.invalid_enum_value,
        options: a
      }), ee;
    }
    return rt(t.data);
  }
  get enum() {
    return this._def.values;
  }
}
ys.create = (e, t) => new ys({
  values: e,
  typeName: X.ZodNativeEnum,
  ...ne(t)
});
class oi extends ue {
  unwrap() {
    return this._def.type;
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== M.promise && r.common.async === !1)
      return W(r, {
        code: R.invalid_type,
        expected: M.promise,
        received: r.parsedType
      }), ee;
    const s = r.parsedType === M.promise ? r.data : Promise.resolve(r.data);
    return rt(s.then((a) => this._def.type.parseAsync(a, {
      path: r.path,
      errorMap: r.common.contextualErrorMap
    })));
  }
}
oi.create = (e, t) => new oi({
  type: e,
  typeName: X.ZodPromise,
  ...ne(t)
});
class on extends ue {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === X.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(t) {
    const { status: r, ctx: s } = this._processInputParams(t), a = this._def.effect || null;
    if (a.type === "preprocess") {
      const u = a.transform(s.data);
      return s.common.async ? Promise.resolve(u).then((f) => this._def.schema._parseAsync({
        data: f,
        path: s.path,
        parent: s
      })) : this._def.schema._parseSync({
        data: u,
        path: s.path,
        parent: s
      });
    }
    const l = {
      addIssue: (u) => {
        W(s, u), u.fatal ? r.abort() : r.dirty();
      },
      get path() {
        return s.path;
      }
    };
    if (l.addIssue = l.addIssue.bind(l), a.type === "refinement") {
      const u = (f) => {
        const d = a.refinement(f, l);
        if (s.common.async)
          return Promise.resolve(d);
        if (d instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return f;
      };
      if (s.common.async === !1) {
        const f = this._def.schema._parseSync({
          data: s.data,
          path: s.path,
          parent: s
        });
        return f.status === "aborted" ? ee : (f.status === "dirty" && r.dirty(), u(f.value), { status: r.value, value: f.value });
      } else
        return this._def.schema._parseAsync({ data: s.data, path: s.path, parent: s }).then((f) => f.status === "aborted" ? ee : (f.status === "dirty" && r.dirty(), u(f.value).then(() => ({ status: r.value, value: f.value }))));
    }
    if (a.type === "transform")
      if (s.common.async === !1) {
        const u = this._def.schema._parseSync({
          data: s.data,
          path: s.path,
          parent: s
        });
        if (!yo(u))
          return u;
        const f = a.transform(u.value, l);
        if (f instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: r.value, value: f };
      } else
        return this._def.schema._parseAsync({ data: s.data, path: s.path, parent: s }).then((u) => yo(u) ? Promise.resolve(a.transform(u.value, l)).then((f) => ({ status: r.value, value: f })) : u);
    de.assertNever(a);
  }
}
on.create = (e, t, r) => new on({
  schema: e,
  typeName: X.ZodEffects,
  effect: t,
  ...ne(r)
});
on.createWithPreprocess = (e, t, r) => new on({
  schema: t,
  effect: { type: "preprocess", transform: e },
  typeName: X.ZodEffects,
  ...ne(r)
});
class bn extends ue {
  _parse(t) {
    return this._getType(t) === M.undefined ? rt(void 0) : this._def.innerType._parse(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
bn.create = (e, t) => new bn({
  innerType: e,
  typeName: X.ZodOptional,
  ...ne(t)
});
class Nr extends ue {
  _parse(t) {
    return this._getType(t) === M.null ? rt(null) : this._def.innerType._parse(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Nr.create = (e, t) => new Nr({
  innerType: e,
  typeName: X.ZodNullable,
  ...ne(t)
});
class _s extends ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    let s = r.data;
    return r.parsedType === M.undefined && (s = this._def.defaultValue()), this._def.innerType._parse({
      data: s,
      path: r.path,
      parent: r
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
_s.create = (e, t) => new _s({
  innerType: e,
  typeName: X.ZodDefault,
  defaultValue: typeof t.default == "function" ? t.default : () => t.default,
  ...ne(t)
});
class To extends ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), s = {
      ...r,
      common: {
        ...r.common,
        issues: []
      }
    }, a = this._def.innerType._parse({
      data: s.data,
      path: s.path,
      parent: {
        ...s
      }
    });
    return _o(a) ? a.then((l) => ({
      status: "valid",
      value: l.status === "valid" ? l.value : this._def.catchValue({
        get error() {
          return new Wt(s.common.issues);
        },
        input: s.data
      })
    })) : {
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new Wt(s.common.issues);
        },
        input: s.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
To.create = (e, t) => new To({
  innerType: e,
  typeName: X.ZodCatch,
  catchValue: typeof t.catch == "function" ? t.catch : () => t.catch,
  ...ne(t)
});
class So extends ue {
  _parse(t) {
    if (this._getType(t) !== M.nan) {
      const s = this._getOrReturnCtx(t);
      return W(s, {
        code: R.invalid_type,
        expected: M.nan,
        received: s.parsedType
      }), ee;
    }
    return { status: "valid", value: t.data };
  }
}
So.create = (e) => new So({
  typeName: X.ZodNaN,
  ...ne(e)
});
class sw extends ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), s = r.data;
    return this._def.type._parse({
      data: s,
      path: r.path,
      parent: r
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Ps extends ue {
  _parse(t) {
    const { status: r, ctx: s } = this._processInputParams(t);
    if (s.common.async)
      return (async () => {
        const l = await this._def.in._parseAsync({
          data: s.data,
          path: s.path,
          parent: s
        });
        return l.status === "aborted" ? ee : l.status === "dirty" ? (r.dirty(), Yx(l.value)) : this._def.out._parseAsync({
          data: l.value,
          path: s.path,
          parent: s
        });
      })();
    {
      const a = this._def.in._parseSync({
        data: s.data,
        path: s.path,
        parent: s
      });
      return a.status === "aborted" ? ee : a.status === "dirty" ? (r.dirty(), {
        status: "dirty",
        value: a.value
      }) : this._def.out._parseSync({
        data: a.value,
        path: s.path,
        parent: s
      });
    }
  }
  static create(t, r) {
    return new Ps({
      in: t,
      out: r,
      typeName: X.ZodPipeline
    });
  }
}
be.lazycreate;
var X;
(function(e) {
  e.ZodString = "ZodString", e.ZodNumber = "ZodNumber", e.ZodNaN = "ZodNaN", e.ZodBigInt = "ZodBigInt", e.ZodBoolean = "ZodBoolean", e.ZodDate = "ZodDate", e.ZodSymbol = "ZodSymbol", e.ZodUndefined = "ZodUndefined", e.ZodNull = "ZodNull", e.ZodAny = "ZodAny", e.ZodUnknown = "ZodUnknown", e.ZodNever = "ZodNever", e.ZodVoid = "ZodVoid", e.ZodArray = "ZodArray", e.ZodObject = "ZodObject", e.ZodUnion = "ZodUnion", e.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", e.ZodIntersection = "ZodIntersection", e.ZodTuple = "ZodTuple", e.ZodRecord = "ZodRecord", e.ZodMap = "ZodMap", e.ZodSet = "ZodSet", e.ZodFunction = "ZodFunction", e.ZodLazy = "ZodLazy", e.ZodLiteral = "ZodLiteral", e.ZodEnum = "ZodEnum", e.ZodEffects = "ZodEffects", e.ZodNativeEnum = "ZodNativeEnum", e.ZodOptional = "ZodOptional", e.ZodNullable = "ZodNullable", e.ZodDefault = "ZodDefault", e.ZodCatch = "ZodCatch", e.ZodPromise = "ZodPromise", e.ZodBranded = "ZodBranded", e.ZodPipeline = "ZodPipeline";
})(X || (X = {}));
const Kn = rn.create;
Sr.create;
So.create;
Lr.create;
const _r = xo.create;
ai.create;
wo.create;
fs.create;
ds.create;
const sf = bo.create;
Ar.create;
An.create;
Eo.create;
const aw = Ut.create, zo = be.create;
be.strictCreate;
hs.create;
qo.create;
ps.create;
an.create;
gs.create;
Co.create;
Or.create;
const ow = si.create;
ms.create;
vs.create;
Jn.create;
const lw = ys.create;
oi.create;
on.create;
bn.create;
Nr.create;
on.createWithPreprocess;
Ps.create;
var et = /* @__PURE__ */ ((e) => (e.Js = "js", e.Json = "json", e.Yaml = "yaml", e.Xml = "xml", e.Toml = "toml", e))(et || {}), Ne = /* @__PURE__ */ ((e) => (e.String = "string", e.Number = "number", e.Boolean = "boolean", e.Object = "object", e.Array = "array", e.Null = "null", e.Undefined = "undefined", e.NaN = "NaN", e.Date = "Date", e))(Ne || {});
const uw = zo({
  elementSelector: Kn(),
  data: sf(),
  dataType: Kn(),
  rootContainerName: Kn().default("root"),
  withoutContainer: _r().default(!1),
  flipBackgroundColors: _r().default(!1),
  expandFieldsToFullWidth: _r().default(!1),
  readOnlyMode: _r().default(!1),
  onChange: ow().optional(),
  xmlRootName: sf(),
  fullScreen: _r().default(!1)
}), cw = uw.extend({
  dataType: lw(et)
}), af = {
  _path: [],
  _key: "",
  _valueType: Ne.String,
  _value: "",
  _fieldType: void 0
};
const Lo = Math.min, Cr = Math.max, xs = Math.round, Cn = (e) => ({
  x: e,
  y: e
}), fw = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
}, dw = {
  start: "end",
  end: "start"
};
function of(e, t, r) {
  return Cr(e, Lo(t, r));
}
function Fs(e, t) {
  return typeof e == "function" ? e(t) : e;
}
function Qn(e) {
  return e.split("-")[0];
}
function Bs(e) {
  return e.split("-")[1];
}
function Df(e) {
  return e === "x" ? "y" : "x";
}
function Wf(e) {
  return e === "y" ? "height" : "width";
}
function Ms(e) {
  return ["top", "bottom"].includes(Qn(e)) ? "y" : "x";
}
function Uf(e) {
  return Df(Ms(e));
}
function hw(e, t, r) {
  r === void 0 && (r = !1);
  const s = Bs(e), a = Uf(e), l = Wf(a);
  let u = a === "x" ? s === (r ? "end" : "start") ? "right" : "left" : s === "start" ? "bottom" : "top";
  return t.reference[l] > t.floating[l] && (u = ws(u)), [u, ws(u)];
}
function pw(e) {
  const t = ws(e);
  return [Oo(e), t, Oo(t)];
}
function Oo(e) {
  return e.replace(/start|end/g, (t) => dw[t]);
}
function gw(e, t, r) {
  const s = ["left", "right"], a = ["right", "left"], l = ["top", "bottom"], u = ["bottom", "top"];
  switch (e) {
    case "top":
    case "bottom":
      return r ? t ? a : s : t ? s : a;
    case "left":
    case "right":
      return t ? l : u;
    default:
      return [];
  }
}
function mw(e, t, r, s) {
  const a = Bs(e);
  let l = gw(Qn(e), r === "start", s);
  return a && (l = l.map((u) => u + "-" + a), t && (l = l.concat(l.map(Oo)))), l;
}
function ws(e) {
  return e.replace(/left|right|bottom|top/g, (t) => fw[t]);
}
function vw(e) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...e
  };
}
function yw(e) {
  return typeof e != "number" ? vw(e) : {
    top: e,
    right: e,
    bottom: e,
    left: e
  };
}
function bs(e) {
  return {
    ...e,
    top: e.y,
    left: e.x,
    right: e.x + e.width,
    bottom: e.y + e.height
  };
}
function lf(e, t, r) {
  let {
    reference: s,
    floating: a
  } = e;
  const l = Ms(t), u = Uf(t), f = Wf(u), d = Qn(t), g = l === "y", _ = s.x + s.width / 2 - a.width / 2, x = s.y + s.height / 2 - a.height / 2, T = s[f] / 2 - a[f] / 2;
  let A;
  switch (d) {
    case "top":
      A = {
        x: _,
        y: s.y - a.height
      };
      break;
    case "bottom":
      A = {
        x: _,
        y: s.y + s.height
      };
      break;
    case "right":
      A = {
        x: s.x + s.width,
        y: x
      };
      break;
    case "left":
      A = {
        x: s.x - a.width,
        y: x
      };
      break;
    default:
      A = {
        x: s.x,
        y: s.y
      };
  }
  switch (Bs(t)) {
    case "start":
      A[u] -= T * (r && g ? -1 : 1);
      break;
    case "end":
      A[u] += T * (r && g ? -1 : 1);
      break;
  }
  return A;
}
const _w = async (e, t, r) => {
  const {
    placement: s = "bottom",
    strategy: a = "absolute",
    middleware: l = [],
    platform: u
  } = r, f = l.filter(Boolean), d = await (u.isRTL == null ? void 0 : u.isRTL(t));
  let g = await u.getElementRects({
    reference: e,
    floating: t,
    strategy: a
  }), {
    x: _,
    y: x
  } = lf(g, s, d), T = s, A = {}, C = 0;
  for (let E = 0; E < f.length; E++) {
    const {
      name: P,
      fn: U
    } = f[E], {
      x: H,
      y: $,
      data: Z,
      reset: k
    } = await U({
      x: _,
      y: x,
      initialPlacement: s,
      placement: T,
      strategy: a,
      middlewareData: A,
      rects: g,
      platform: u,
      elements: {
        reference: e,
        floating: t
      }
    });
    if (_ = H ?? _, x = $ ?? x, A = {
      ...A,
      [P]: {
        ...A[P],
        ...Z
      }
    }, k && C <= 50) {
      C++, typeof k == "object" && (k.placement && (T = k.placement), k.rects && (g = k.rects === !0 ? await u.getElementRects({
        reference: e,
        floating: t,
        strategy: a
      }) : k.rects), {
        x: _,
        y: x
      } = lf(g, T, d)), E = -1;
      continue;
    }
  }
  return {
    x: _,
    y: x,
    placement: T,
    strategy: a,
    middlewareData: A
  };
};
async function Hf(e, t) {
  var r;
  t === void 0 && (t = {});
  const {
    x: s,
    y: a,
    platform: l,
    rects: u,
    elements: f,
    strategy: d
  } = e, {
    boundary: g = "clippingAncestors",
    rootBoundary: _ = "viewport",
    elementContext: x = "floating",
    altBoundary: T = !1,
    padding: A = 0
  } = Fs(t, e), C = yw(A), P = f[T ? x === "floating" ? "reference" : "floating" : x], U = bs(await l.getClippingRect({
    element: (r = await (l.isElement == null ? void 0 : l.isElement(P))) == null || r ? P : P.contextElement || await (l.getDocumentElement == null ? void 0 : l.getDocumentElement(f.floating)),
    boundary: g,
    rootBoundary: _,
    strategy: d
  })), H = x === "floating" ? {
    ...u.floating,
    x: s,
    y: a
  } : u.reference, $ = await (l.getOffsetParent == null ? void 0 : l.getOffsetParent(f.floating)), Z = await (l.isElement == null ? void 0 : l.isElement($)) ? await (l.getScale == null ? void 0 : l.getScale($)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, k = bs(l.convertOffsetParentRelativeRectToViewportRelativeRect ? await l.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect: H,
    offsetParent: $,
    strategy: d
  }) : H);
  return {
    top: (U.top - k.top + C.top) / Z.y,
    bottom: (k.bottom - U.bottom + C.bottom) / Z.y,
    left: (U.left - k.left + C.left) / Z.x,
    right: (k.right - U.right + C.right) / Z.x
  };
}
const xw = function(e) {
  return e === void 0 && (e = {}), {
    name: "flip",
    options: e,
    async fn(t) {
      var r, s;
      const {
        placement: a,
        middlewareData: l,
        rects: u,
        initialPlacement: f,
        platform: d,
        elements: g
      } = t, {
        mainAxis: _ = !0,
        crossAxis: x = !0,
        fallbackPlacements: T,
        fallbackStrategy: A = "bestFit",
        fallbackAxisSideDirection: C = "none",
        flipAlignment: E = !0,
        ...P
      } = Fs(e, t);
      if ((r = l.arrow) != null && r.alignmentOffset)
        return {};
      const U = Qn(a), H = Qn(f) === f, $ = await (d.isRTL == null ? void 0 : d.isRTL(g.floating)), Z = T || (H || !E ? [ws(f)] : pw(f));
      !T && C !== "none" && Z.push(...mw(f, E, C, $));
      const k = [f, ...Z], se = await Hf(t, P), Y = [];
      let ge = ((s = l.flip) == null ? void 0 : s.overflows) || [];
      if (_ && Y.push(se[U]), x) {
        const dt = hw(a, u, $);
        Y.push(se[dt[0]], se[dt[1]]);
      }
      if (ge = [...ge, {
        placement: a,
        overflows: Y
      }], !Y.every((dt) => dt <= 0)) {
        var jt, Me;
        const dt = (((jt = l.flip) == null ? void 0 : jt.index) || 0) + 1, Gt = k[dt];
        if (Gt)
          return {
            data: {
              index: dt,
              overflows: ge
            },
            reset: {
              placement: Gt
            }
          };
        let Ze = (Me = ge.filter((At) => At.overflows[0] <= 0).sort((At, it) => At.overflows[1] - it.overflows[1])[0]) == null ? void 0 : Me.placement;
        if (!Ze)
          switch (A) {
            case "bestFit": {
              var cn;
              const At = (cn = ge.map((it) => [it.placement, it.overflows.filter((Se) => Se > 0).reduce((Se, $e) => Se + $e, 0)]).sort((it, Se) => it[1] - Se[1])[0]) == null ? void 0 : cn[0];
              At && (Ze = At);
              break;
            }
            case "initialPlacement":
              Ze = f;
              break;
          }
        if (a !== Ze)
          return {
            reset: {
              placement: Ze
            }
          };
      }
      return {};
    }
  };
};
async function ww(e, t) {
  const {
    placement: r,
    platform: s,
    elements: a
  } = e, l = await (s.isRTL == null ? void 0 : s.isRTL(a.floating)), u = Qn(r), f = Bs(r), d = Ms(r) === "y", g = ["left", "top"].includes(u) ? -1 : 1, _ = l && d ? -1 : 1, x = Fs(t, e);
  let {
    mainAxis: T,
    crossAxis: A,
    alignmentAxis: C
  } = typeof x == "number" ? {
    mainAxis: x,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...x
  };
  return f && typeof C == "number" && (A = f === "end" ? C * -1 : C), d ? {
    x: A * _,
    y: T * g
  } : {
    x: T * g,
    y: A * _
  };
}
const bw = function(e) {
  return e === void 0 && (e = 0), {
    name: "offset",
    options: e,
    async fn(t) {
      var r, s;
      const {
        x: a,
        y: l,
        placement: u,
        middlewareData: f
      } = t, d = await ww(t, e);
      return u === ((r = f.offset) == null ? void 0 : r.placement) && (s = f.arrow) != null && s.alignmentOffset ? {} : {
        x: a + d.x,
        y: l + d.y,
        data: {
          ...d,
          placement: u
        }
      };
    }
  };
}, Ew = function(e) {
  return e === void 0 && (e = {}), {
    name: "shift",
    options: e,
    async fn(t) {
      const {
        x: r,
        y: s,
        placement: a
      } = t, {
        mainAxis: l = !0,
        crossAxis: u = !1,
        limiter: f = {
          fn: (P) => {
            let {
              x: U,
              y: H
            } = P;
            return {
              x: U,
              y: H
            };
          }
        },
        ...d
      } = Fs(e, t), g = {
        x: r,
        y: s
      }, _ = await Hf(t, d), x = Ms(Qn(a)), T = Df(x);
      let A = g[T], C = g[x];
      if (l) {
        const P = T === "y" ? "top" : "left", U = T === "y" ? "bottom" : "right", H = A + _[P], $ = A - _[U];
        A = of(H, A, $);
      }
      if (u) {
        const P = x === "y" ? "top" : "left", U = x === "y" ? "bottom" : "right", H = C + _[P], $ = C - _[U];
        C = of(H, C, $);
      }
      const E = f.fn({
        ...t,
        [T]: A,
        [x]: C
      });
      return {
        ...E,
        data: {
          x: E.x - r,
          y: E.y - s
        }
      };
    }
  };
};
function Tn(e) {
  return Zf(e) ? (e.nodeName || "").toLowerCase() : "#document";
}
function ft(e) {
  var t;
  return (e == null || (t = e.ownerDocument) == null ? void 0 : t.defaultView) || window;
}
function On(e) {
  var t;
  return (t = (Zf(e) ? e.ownerDocument : e.document) || window.document) == null ? void 0 : t.documentElement;
}
function Zf(e) {
  return e instanceof Node || e instanceof ft(e).Node;
}
function ln(e) {
  return e instanceof Element || e instanceof ft(e).Element;
}
function Vt(e) {
  return e instanceof HTMLElement || e instanceof ft(e).HTMLElement;
}
function uf(e) {
  return typeof ShadowRoot > "u" ? !1 : e instanceof ShadowRoot || e instanceof ft(e).ShadowRoot;
}
function hi(e) {
  const {
    overflow: t,
    overflowX: r,
    overflowY: s,
    display: a
  } = Et(e);
  return /auto|scroll|overlay|hidden|clip/.test(t + s + r) && !["inline", "contents"].includes(a);
}
function Aw(e) {
  return ["table", "td", "th"].includes(Tn(e));
}
function Ko(e) {
  const t = Xo(), r = Et(e);
  return r.transform !== "none" || r.perspective !== "none" || (r.containerType ? r.containerType !== "normal" : !1) || !t && (r.backdropFilter ? r.backdropFilter !== "none" : !1) || !t && (r.filter ? r.filter !== "none" : !1) || ["transform", "perspective", "filter"].some((s) => (r.willChange || "").includes(s)) || ["paint", "layout", "strict", "content"].some((s) => (r.contain || "").includes(s));
}
function Cw(e) {
  let t = Ir(e);
  for (; Vt(t) && !$s(t); ) {
    if (Ko(t))
      return t;
    t = Ir(t);
  }
  return null;
}
function Xo() {
  return typeof CSS > "u" || !CSS.supports ? !1 : CSS.supports("-webkit-backdrop-filter", "none");
}
function $s(e) {
  return ["html", "body", "#document"].includes(Tn(e));
}
function Et(e) {
  return ft(e).getComputedStyle(e);
}
function Ds(e) {
  return ln(e) ? {
    scrollLeft: e.scrollLeft,
    scrollTop: e.scrollTop
  } : {
    scrollLeft: e.pageXOffset,
    scrollTop: e.pageYOffset
  };
}
function Ir(e) {
  if (Tn(e) === "html")
    return e;
  const t = (
    // Step into the shadow DOM of the parent of a slotted node.
    e.assignedSlot || // DOM Element detected.
    e.parentNode || // ShadowRoot detected.
    uf(e) && e.host || // Fallback.
    On(e)
  );
  return uf(t) ? t.host : t;
}
function Vf(e) {
  const t = Ir(e);
  return $s(t) ? e.ownerDocument ? e.ownerDocument.body : e.body : Vt(t) && hi(t) ? t : Vf(t);
}
function No(e, t, r) {
  var s;
  t === void 0 && (t = []), r === void 0 && (r = !0);
  const a = Vf(e), l = a === ((s = e.ownerDocument) == null ? void 0 : s.body), u = ft(a);
  return l ? t.concat(u, u.visualViewport || [], hi(a) ? a : [], u.frameElement && r ? No(u.frameElement) : []) : t.concat(a, No(a, [], r));
}
function jf(e) {
  const t = Et(e);
  let r = parseFloat(t.width) || 0, s = parseFloat(t.height) || 0;
  const a = Vt(e), l = a ? e.offsetWidth : r, u = a ? e.offsetHeight : s, f = xs(r) !== l || xs(s) !== u;
  return f && (r = l, s = u), {
    width: r,
    height: s,
    $: f
  };
}
function Gf(e) {
  return ln(e) ? e : e.contextElement;
}
function Tr(e) {
  const t = Gf(e);
  if (!Vt(t))
    return Cn(1);
  const r = t.getBoundingClientRect(), {
    width: s,
    height: a,
    $: l
  } = jf(t);
  let u = (l ? xs(r.width) : r.width) / s, f = (l ? xs(r.height) : r.height) / a;
  return (!u || !Number.isFinite(u)) && (u = 1), (!f || !Number.isFinite(f)) && (f = 1), {
    x: u,
    y: f
  };
}
const Tw = /* @__PURE__ */ Cn(0);
function Yf(e) {
  const t = ft(e);
  return !Xo() || !t.visualViewport ? Tw : {
    x: t.visualViewport.offsetLeft,
    y: t.visualViewport.offsetTop
  };
}
function Sw(e, t, r) {
  return t === void 0 && (t = !1), !r || t && r !== ft(e) ? !1 : t;
}
function li(e, t, r, s) {
  t === void 0 && (t = !1), r === void 0 && (r = !1);
  const a = e.getBoundingClientRect(), l = Gf(e);
  let u = Cn(1);
  t && (s ? ln(s) && (u = Tr(s)) : u = Tr(e));
  const f = Sw(l, r, s) ? Yf(l) : Cn(0);
  let d = (a.left + f.x) / u.x, g = (a.top + f.y) / u.y, _ = a.width / u.x, x = a.height / u.y;
  if (l) {
    const T = ft(l), A = s && ln(s) ? ft(s) : s;
    let C = T.frameElement;
    for (; C && s && A !== T; ) {
      const E = Tr(C), P = C.getBoundingClientRect(), U = Et(C), H = P.left + (C.clientLeft + parseFloat(U.paddingLeft)) * E.x, $ = P.top + (C.clientTop + parseFloat(U.paddingTop)) * E.y;
      d *= E.x, g *= E.y, _ *= E.x, x *= E.y, d += H, g += $, C = ft(C).frameElement;
    }
  }
  return bs({
    width: _,
    height: x,
    x: d,
    y: g
  });
}
function Lw(e) {
  let {
    rect: t,
    offsetParent: r,
    strategy: s
  } = e;
  const a = Vt(r), l = On(r);
  if (r === l)
    return t;
  let u = {
    scrollLeft: 0,
    scrollTop: 0
  }, f = Cn(1);
  const d = Cn(0);
  if ((a || !a && s !== "fixed") && ((Tn(r) !== "body" || hi(l)) && (u = Ds(r)), Vt(r))) {
    const g = li(r);
    f = Tr(r), d.x = g.x + r.clientLeft, d.y = g.y + r.clientTop;
  }
  return {
    width: t.width * f.x,
    height: t.height * f.y,
    x: t.x * f.x - u.scrollLeft * f.x + d.x,
    y: t.y * f.y - u.scrollTop * f.y + d.y
  };
}
function Ow(e) {
  return Array.from(e.getClientRects());
}
function qf(e) {
  return li(On(e)).left + Ds(e).scrollLeft;
}
function Nw(e) {
  const t = On(e), r = Ds(e), s = e.ownerDocument.body, a = Cr(t.scrollWidth, t.clientWidth, s.scrollWidth, s.clientWidth), l = Cr(t.scrollHeight, t.clientHeight, s.scrollHeight, s.clientHeight);
  let u = -r.scrollLeft + qf(e);
  const f = -r.scrollTop;
  return Et(s).direction === "rtl" && (u += Cr(t.clientWidth, s.clientWidth) - a), {
    width: a,
    height: l,
    x: u,
    y: f
  };
}
function Iw(e, t) {
  const r = ft(e), s = On(e), a = r.visualViewport;
  let l = s.clientWidth, u = s.clientHeight, f = 0, d = 0;
  if (a) {
    l = a.width, u = a.height;
    const g = Xo();
    (!g || g && t === "fixed") && (f = a.offsetLeft, d = a.offsetTop);
  }
  return {
    width: l,
    height: u,
    x: f,
    y: d
  };
}
function kw(e, t) {
  const r = li(e, !0, t === "fixed"), s = r.top + e.clientTop, a = r.left + e.clientLeft, l = Vt(e) ? Tr(e) : Cn(1), u = e.clientWidth * l.x, f = e.clientHeight * l.y, d = a * l.x, g = s * l.y;
  return {
    width: u,
    height: f,
    x: d,
    y: g
  };
}
function cf(e, t, r) {
  let s;
  if (t === "viewport")
    s = Iw(e, r);
  else if (t === "document")
    s = Nw(On(e));
  else if (ln(t))
    s = kw(t, r);
  else {
    const a = Yf(e);
    s = {
      ...t,
      x: t.x - a.x,
      y: t.y - a.y
    };
  }
  return bs(s);
}
function zf(e, t) {
  const r = Ir(e);
  return r === t || !ln(r) || $s(r) ? !1 : Et(r).position === "fixed" || zf(r, t);
}
function Rw(e, t) {
  const r = t.get(e);
  if (r)
    return r;
  let s = No(e, [], !1).filter((f) => ln(f) && Tn(f) !== "body"), a = null;
  const l = Et(e).position === "fixed";
  let u = l ? Ir(e) : e;
  for (; ln(u) && !$s(u); ) {
    const f = Et(u), d = Ko(u);
    !d && f.position === "fixed" && (a = null), (l ? !d && !a : !d && f.position === "static" && !!a && ["absolute", "fixed"].includes(a.position) || hi(u) && !d && zf(e, u)) ? s = s.filter((_) => _ !== u) : a = f, u = Ir(u);
  }
  return t.set(e, s), s;
}
function Pw(e) {
  let {
    element: t,
    boundary: r,
    rootBoundary: s,
    strategy: a
  } = e;
  const u = [...r === "clippingAncestors" ? Rw(t, this._c) : [].concat(r), s], f = u[0], d = u.reduce((g, _) => {
    const x = cf(t, _, a);
    return g.top = Cr(x.top, g.top), g.right = Lo(x.right, g.right), g.bottom = Lo(x.bottom, g.bottom), g.left = Cr(x.left, g.left), g;
  }, cf(t, f, a));
  return {
    width: d.right - d.left,
    height: d.bottom - d.top,
    x: d.left,
    y: d.top
  };
}
function Fw(e) {
  const {
    width: t,
    height: r
  } = jf(e);
  return {
    width: t,
    height: r
  };
}
function Bw(e, t, r) {
  const s = Vt(t), a = On(t), l = r === "fixed", u = li(e, !0, l, t);
  let f = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const d = Cn(0);
  if (s || !s && !l)
    if ((Tn(t) !== "body" || hi(a)) && (f = Ds(t)), s) {
      const g = li(t, !0, l, t);
      d.x = g.x + t.clientLeft, d.y = g.y + t.clientTop;
    } else
      a && (d.x = qf(a));
  return {
    x: u.left + f.scrollLeft - d.x,
    y: u.top + f.scrollTop - d.y,
    width: u.width,
    height: u.height
  };
}
function ff(e, t) {
  return !Vt(e) || Et(e).position === "fixed" ? null : t ? t(e) : e.offsetParent;
}
function Kf(e, t) {
  const r = ft(e);
  if (!Vt(e))
    return r;
  let s = ff(e, t);
  for (; s && Aw(s) && Et(s).position === "static"; )
    s = ff(s, t);
  return s && (Tn(s) === "html" || Tn(s) === "body" && Et(s).position === "static" && !Ko(s)) ? r : s || Cw(e) || r;
}
const Mw = async function(e) {
  let {
    reference: t,
    floating: r,
    strategy: s
  } = e;
  const a = this.getOffsetParent || Kf, l = this.getDimensions;
  return {
    reference: Bw(t, await a(r), s),
    floating: {
      x: 0,
      y: 0,
      ...await l(r)
    }
  };
};
function $w(e) {
  return Et(e).direction === "rtl";
}
const Dw = {
  convertOffsetParentRelativeRectToViewportRelativeRect: Lw,
  getDocumentElement: On,
  getClippingRect: Pw,
  getOffsetParent: Kf,
  getElementRects: Mw,
  getClientRects: Ow,
  getDimensions: Fw,
  getScale: Tr,
  isElement: ln,
  isRTL: $w
}, Ww = Ew, Uw = xw, Hw = (e, t, r) => {
  const s = /* @__PURE__ */ new Map(), a = {
    platform: Dw,
    ...r
  }, l = {
    ...a.platform,
    _c: s
  };
  return _w(e, t, {
    ...a,
    platform: l
  });
};
var Es = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
Es.exports;
(function(e, t) {
  (function() {
    var r, s = "4.17.21", a = 200, l = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", u = "Expected a function", f = "Invalid `variable` option passed into `_.template`", d = "__lodash_hash_undefined__", g = 500, _ = "__lodash_placeholder__", x = 1, T = 2, A = 4, C = 1, E = 2, P = 1, U = 2, H = 4, $ = 8, Z = 16, k = 32, se = 64, Y = 128, ge = 256, jt = 512, Me = 30, cn = "...", dt = 800, Gt = 16, Ze = 1, At = 2, it = 3, Se = 1 / 0, $e = 9007199254740991, Nn = 17976931348623157e292, er = 0 / 0, Rt = 4294967295, Ed = Rt - 1, Ad = Rt >>> 1, Cd = [
      ["ary", Y],
      ["bind", P],
      ["bindKey", U],
      ["curry", $],
      ["curryRight", Z],
      ["flip", jt],
      ["partial", k],
      ["partialRight", se],
      ["rearg", ge]
    ], tr = "[object Arguments]", pi = "[object Array]", Td = "[object AsyncFunction]", Pr = "[object Boolean]", Fr = "[object Date]", Sd = "[object DOMException]", gi = "[object Error]", mi = "[object Function]", dl = "[object GeneratorFunction]", Ct = "[object Map]", Br = "[object Number]", Ld = "[object Null]", Yt = "[object Object]", hl = "[object Promise]", Od = "[object Proxy]", Mr = "[object RegExp]", Tt = "[object Set]", $r = "[object String]", vi = "[object Symbol]", Nd = "[object Undefined]", Dr = "[object WeakMap]", Id = "[object WeakSet]", Wr = "[object ArrayBuffer]", nr = "[object DataView]", Hs = "[object Float32Array]", Zs = "[object Float64Array]", Vs = "[object Int8Array]", js = "[object Int16Array]", Gs = "[object Int32Array]", Ys = "[object Uint8Array]", qs = "[object Uint8ClampedArray]", zs = "[object Uint16Array]", Ks = "[object Uint32Array]", kd = /\b__p \+= '';/g, Rd = /\b(__p \+=) '' \+/g, Pd = /(__e\(.*?\)|\b__t\)) \+\n'';/g, pl = /&(?:amp|lt|gt|quot|#39);/g, gl = /[&<>"']/g, Fd = RegExp(pl.source), Bd = RegExp(gl.source), Md = /<%-([\s\S]+?)%>/g, $d = /<%([\s\S]+?)%>/g, ml = /<%=([\s\S]+?)%>/g, Dd = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Wd = /^\w*$/, Ud = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, Xs = /[\\^$.*+?()[\]{}|]/g, Hd = RegExp(Xs.source), Js = /^\s+/, Zd = /\s/, Vd = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, jd = /\{\n\/\* \[wrapped with (.+)\] \*/, Gd = /,? & /, Yd = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, qd = /[()=,{}\[\]\/\s]/, zd = /\\(\\)?/g, Kd = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, vl = /\w*$/, Xd = /^[-+]0x[0-9a-f]+$/i, Jd = /^0b[01]+$/i, Qd = /^\[object .+?Constructor\]$/, eh = /^0o[0-7]+$/i, th = /^(?:0|[1-9]\d*)$/, nh = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, yi = /($^)/, rh = /['\n\r\u2028\u2029\\]/g, _i = "\\ud800-\\udfff", ih = "\\u0300-\\u036f", sh = "\\ufe20-\\ufe2f", ah = "\\u20d0-\\u20ff", yl = ih + sh + ah, _l = "\\u2700-\\u27bf", xl = "a-z\\xdf-\\xf6\\xf8-\\xff", oh = "\\xac\\xb1\\xd7\\xf7", lh = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", uh = "\\u2000-\\u206f", ch = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", wl = "A-Z\\xc0-\\xd6\\xd8-\\xde", bl = "\\ufe0e\\ufe0f", El = oh + lh + uh + ch, Qs = "['’]", fh = "[" + _i + "]", Al = "[" + El + "]", xi = "[" + yl + "]", Cl = "\\d+", dh = "[" + _l + "]", Tl = "[" + xl + "]", Sl = "[^" + _i + El + Cl + _l + xl + wl + "]", ea = "\\ud83c[\\udffb-\\udfff]", hh = "(?:" + xi + "|" + ea + ")", Ll = "[^" + _i + "]", ta = "(?:\\ud83c[\\udde6-\\uddff]){2}", na = "[\\ud800-\\udbff][\\udc00-\\udfff]", rr = "[" + wl + "]", Ol = "\\u200d", Nl = "(?:" + Tl + "|" + Sl + ")", ph = "(?:" + rr + "|" + Sl + ")", Il = "(?:" + Qs + "(?:d|ll|m|re|s|t|ve))?", kl = "(?:" + Qs + "(?:D|LL|M|RE|S|T|VE))?", Rl = hh + "?", Pl = "[" + bl + "]?", gh = "(?:" + Ol + "(?:" + [Ll, ta, na].join("|") + ")" + Pl + Rl + ")*", mh = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", vh = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", Fl = Pl + Rl + gh, yh = "(?:" + [dh, ta, na].join("|") + ")" + Fl, _h = "(?:" + [Ll + xi + "?", xi, ta, na, fh].join("|") + ")", xh = RegExp(Qs, "g"), wh = RegExp(xi, "g"), ra = RegExp(ea + "(?=" + ea + ")|" + _h + Fl, "g"), bh = RegExp([
      rr + "?" + Tl + "+" + Il + "(?=" + [Al, rr, "$"].join("|") + ")",
      ph + "+" + kl + "(?=" + [Al, rr + Nl, "$"].join("|") + ")",
      rr + "?" + Nl + "+" + Il,
      rr + "+" + kl,
      vh,
      mh,
      Cl,
      yh
    ].join("|"), "g"), Eh = RegExp("[" + Ol + _i + yl + bl + "]"), Ah = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Ch = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ], Th = -1, ye = {};
    ye[Hs] = ye[Zs] = ye[Vs] = ye[js] = ye[Gs] = ye[Ys] = ye[qs] = ye[zs] = ye[Ks] = !0, ye[tr] = ye[pi] = ye[Wr] = ye[Pr] = ye[nr] = ye[Fr] = ye[gi] = ye[mi] = ye[Ct] = ye[Br] = ye[Yt] = ye[Mr] = ye[Tt] = ye[$r] = ye[Dr] = !1;
    var ve = {};
    ve[tr] = ve[pi] = ve[Wr] = ve[nr] = ve[Pr] = ve[Fr] = ve[Hs] = ve[Zs] = ve[Vs] = ve[js] = ve[Gs] = ve[Ct] = ve[Br] = ve[Yt] = ve[Mr] = ve[Tt] = ve[$r] = ve[vi] = ve[Ys] = ve[qs] = ve[zs] = ve[Ks] = !0, ve[gi] = ve[mi] = ve[Dr] = !1;
    var Sh = {
      // Latin-1 Supplement block.
      À: "A",
      Á: "A",
      Â: "A",
      Ã: "A",
      Ä: "A",
      Å: "A",
      à: "a",
      á: "a",
      â: "a",
      ã: "a",
      ä: "a",
      å: "a",
      Ç: "C",
      ç: "c",
      Ð: "D",
      ð: "d",
      È: "E",
      É: "E",
      Ê: "E",
      Ë: "E",
      è: "e",
      é: "e",
      ê: "e",
      ë: "e",
      Ì: "I",
      Í: "I",
      Î: "I",
      Ï: "I",
      ì: "i",
      í: "i",
      î: "i",
      ï: "i",
      Ñ: "N",
      ñ: "n",
      Ò: "O",
      Ó: "O",
      Ô: "O",
      Õ: "O",
      Ö: "O",
      Ø: "O",
      ò: "o",
      ó: "o",
      ô: "o",
      õ: "o",
      ö: "o",
      ø: "o",
      Ù: "U",
      Ú: "U",
      Û: "U",
      Ü: "U",
      ù: "u",
      ú: "u",
      û: "u",
      ü: "u",
      Ý: "Y",
      ý: "y",
      ÿ: "y",
      Æ: "Ae",
      æ: "ae",
      Þ: "Th",
      þ: "th",
      ß: "ss",
      // Latin Extended-A block.
      Ā: "A",
      Ă: "A",
      Ą: "A",
      ā: "a",
      ă: "a",
      ą: "a",
      Ć: "C",
      Ĉ: "C",
      Ċ: "C",
      Č: "C",
      ć: "c",
      ĉ: "c",
      ċ: "c",
      č: "c",
      Ď: "D",
      Đ: "D",
      ď: "d",
      đ: "d",
      Ē: "E",
      Ĕ: "E",
      Ė: "E",
      Ę: "E",
      Ě: "E",
      ē: "e",
      ĕ: "e",
      ė: "e",
      ę: "e",
      ě: "e",
      Ĝ: "G",
      Ğ: "G",
      Ġ: "G",
      Ģ: "G",
      ĝ: "g",
      ğ: "g",
      ġ: "g",
      ģ: "g",
      Ĥ: "H",
      Ħ: "H",
      ĥ: "h",
      ħ: "h",
      Ĩ: "I",
      Ī: "I",
      Ĭ: "I",
      Į: "I",
      İ: "I",
      ĩ: "i",
      ī: "i",
      ĭ: "i",
      į: "i",
      ı: "i",
      Ĵ: "J",
      ĵ: "j",
      Ķ: "K",
      ķ: "k",
      ĸ: "k",
      Ĺ: "L",
      Ļ: "L",
      Ľ: "L",
      Ŀ: "L",
      Ł: "L",
      ĺ: "l",
      ļ: "l",
      ľ: "l",
      ŀ: "l",
      ł: "l",
      Ń: "N",
      Ņ: "N",
      Ň: "N",
      Ŋ: "N",
      ń: "n",
      ņ: "n",
      ň: "n",
      ŋ: "n",
      Ō: "O",
      Ŏ: "O",
      Ő: "O",
      ō: "o",
      ŏ: "o",
      ő: "o",
      Ŕ: "R",
      Ŗ: "R",
      Ř: "R",
      ŕ: "r",
      ŗ: "r",
      ř: "r",
      Ś: "S",
      Ŝ: "S",
      Ş: "S",
      Š: "S",
      ś: "s",
      ŝ: "s",
      ş: "s",
      š: "s",
      Ţ: "T",
      Ť: "T",
      Ŧ: "T",
      ţ: "t",
      ť: "t",
      ŧ: "t",
      Ũ: "U",
      Ū: "U",
      Ŭ: "U",
      Ů: "U",
      Ű: "U",
      Ų: "U",
      ũ: "u",
      ū: "u",
      ŭ: "u",
      ů: "u",
      ű: "u",
      ų: "u",
      Ŵ: "W",
      ŵ: "w",
      Ŷ: "Y",
      ŷ: "y",
      Ÿ: "Y",
      Ź: "Z",
      Ż: "Z",
      Ž: "Z",
      ź: "z",
      ż: "z",
      ž: "z",
      Ĳ: "IJ",
      ĳ: "ij",
      Œ: "Oe",
      œ: "oe",
      ŉ: "'n",
      ſ: "s"
    }, Lh = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    }, Oh = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    }, Nh = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    }, Ih = parseFloat, kh = parseInt, Bl = typeof Wn == "object" && Wn && Wn.Object === Object && Wn, Rh = typeof self == "object" && self && self.Object === Object && self, Fe = Bl || Rh || Function("return this")(), ia = t && !t.nodeType && t, In = ia && !0 && e && !e.nodeType && e, Ml = In && In.exports === ia, sa = Ml && Bl.process, ht = function() {
      try {
        var w = In && In.require && In.require("util").types;
        return w || sa && sa.binding && sa.binding("util");
      } catch {
      }
    }(), $l = ht && ht.isArrayBuffer, Dl = ht && ht.isDate, Wl = ht && ht.isMap, Ul = ht && ht.isRegExp, Hl = ht && ht.isSet, Zl = ht && ht.isTypedArray;
    function st(w, L, S) {
      switch (S.length) {
        case 0:
          return w.call(L);
        case 1:
          return w.call(L, S[0]);
        case 2:
          return w.call(L, S[0], S[1]);
        case 3:
          return w.call(L, S[0], S[1], S[2]);
      }
      return w.apply(L, S);
    }
    function Ph(w, L, S, D) {
      for (var J = -1, fe = w == null ? 0 : w.length; ++J < fe; ) {
        var Le = w[J];
        L(D, Le, S(Le), w);
      }
      return D;
    }
    function pt(w, L) {
      for (var S = -1, D = w == null ? 0 : w.length; ++S < D && L(w[S], S, w) !== !1; )
        ;
      return w;
    }
    function Fh(w, L) {
      for (var S = w == null ? 0 : w.length; S-- && L(w[S], S, w) !== !1; )
        ;
      return w;
    }
    function Vl(w, L) {
      for (var S = -1, D = w == null ? 0 : w.length; ++S < D; )
        if (!L(w[S], S, w))
          return !1;
      return !0;
    }
    function fn(w, L) {
      for (var S = -1, D = w == null ? 0 : w.length, J = 0, fe = []; ++S < D; ) {
        var Le = w[S];
        L(Le, S, w) && (fe[J++] = Le);
      }
      return fe;
    }
    function wi(w, L) {
      var S = w == null ? 0 : w.length;
      return !!S && ir(w, L, 0) > -1;
    }
    function aa(w, L, S) {
      for (var D = -1, J = w == null ? 0 : w.length; ++D < J; )
        if (S(L, w[D]))
          return !0;
      return !1;
    }
    function _e(w, L) {
      for (var S = -1, D = w == null ? 0 : w.length, J = Array(D); ++S < D; )
        J[S] = L(w[S], S, w);
      return J;
    }
    function dn(w, L) {
      for (var S = -1, D = L.length, J = w.length; ++S < D; )
        w[J + S] = L[S];
      return w;
    }
    function oa(w, L, S, D) {
      var J = -1, fe = w == null ? 0 : w.length;
      for (D && fe && (S = w[++J]); ++J < fe; )
        S = L(S, w[J], J, w);
      return S;
    }
    function Bh(w, L, S, D) {
      var J = w == null ? 0 : w.length;
      for (D && J && (S = w[--J]); J--; )
        S = L(S, w[J], J, w);
      return S;
    }
    function la(w, L) {
      for (var S = -1, D = w == null ? 0 : w.length; ++S < D; )
        if (L(w[S], S, w))
          return !0;
      return !1;
    }
    var Mh = ua("length");
    function $h(w) {
      return w.split("");
    }
    function Dh(w) {
      return w.match(Yd) || [];
    }
    function jl(w, L, S) {
      var D;
      return S(w, function(J, fe, Le) {
        if (L(J, fe, Le))
          return D = fe, !1;
      }), D;
    }
    function bi(w, L, S, D) {
      for (var J = w.length, fe = S + (D ? 1 : -1); D ? fe-- : ++fe < J; )
        if (L(w[fe], fe, w))
          return fe;
      return -1;
    }
    function ir(w, L, S) {
      return L === L ? Xh(w, L, S) : bi(w, Gl, S);
    }
    function Wh(w, L, S, D) {
      for (var J = S - 1, fe = w.length; ++J < fe; )
        if (D(w[J], L))
          return J;
      return -1;
    }
    function Gl(w) {
      return w !== w;
    }
    function Yl(w, L) {
      var S = w == null ? 0 : w.length;
      return S ? fa(w, L) / S : er;
    }
    function ua(w) {
      return function(L) {
        return L == null ? r : L[w];
      };
    }
    function ca(w) {
      return function(L) {
        return w == null ? r : w[L];
      };
    }
    function ql(w, L, S, D, J) {
      return J(w, function(fe, Le, me) {
        S = D ? (D = !1, fe) : L(S, fe, Le, me);
      }), S;
    }
    function Uh(w, L) {
      var S = w.length;
      for (w.sort(L); S--; )
        w[S] = w[S].value;
      return w;
    }
    function fa(w, L) {
      for (var S, D = -1, J = w.length; ++D < J; ) {
        var fe = L(w[D]);
        fe !== r && (S = S === r ? fe : S + fe);
      }
      return S;
    }
    function da(w, L) {
      for (var S = -1, D = Array(w); ++S < w; )
        D[S] = L(S);
      return D;
    }
    function Hh(w, L) {
      return _e(L, function(S) {
        return [S, w[S]];
      });
    }
    function zl(w) {
      return w && w.slice(0, Ql(w) + 1).replace(Js, "");
    }
    function at(w) {
      return function(L) {
        return w(L);
      };
    }
    function ha(w, L) {
      return _e(L, function(S) {
        return w[S];
      });
    }
    function Ur(w, L) {
      return w.has(L);
    }
    function Kl(w, L) {
      for (var S = -1, D = w.length; ++S < D && ir(L, w[S], 0) > -1; )
        ;
      return S;
    }
    function Xl(w, L) {
      for (var S = w.length; S-- && ir(L, w[S], 0) > -1; )
        ;
      return S;
    }
    function Zh(w, L) {
      for (var S = w.length, D = 0; S--; )
        w[S] === L && ++D;
      return D;
    }
    var Vh = ca(Sh), jh = ca(Lh);
    function Gh(w) {
      return "\\" + Nh[w];
    }
    function Yh(w, L) {
      return w == null ? r : w[L];
    }
    function sr(w) {
      return Eh.test(w);
    }
    function qh(w) {
      return Ah.test(w);
    }
    function zh(w) {
      for (var L, S = []; !(L = w.next()).done; )
        S.push(L.value);
      return S;
    }
    function pa(w) {
      var L = -1, S = Array(w.size);
      return w.forEach(function(D, J) {
        S[++L] = [J, D];
      }), S;
    }
    function Jl(w, L) {
      return function(S) {
        return w(L(S));
      };
    }
    function hn(w, L) {
      for (var S = -1, D = w.length, J = 0, fe = []; ++S < D; ) {
        var Le = w[S];
        (Le === L || Le === _) && (w[S] = _, fe[J++] = S);
      }
      return fe;
    }
    function Ei(w) {
      var L = -1, S = Array(w.size);
      return w.forEach(function(D) {
        S[++L] = D;
      }), S;
    }
    function Kh(w) {
      var L = -1, S = Array(w.size);
      return w.forEach(function(D) {
        S[++L] = [D, D];
      }), S;
    }
    function Xh(w, L, S) {
      for (var D = S - 1, J = w.length; ++D < J; )
        if (w[D] === L)
          return D;
      return -1;
    }
    function Jh(w, L, S) {
      for (var D = S + 1; D--; )
        if (w[D] === L)
          return D;
      return D;
    }
    function ar(w) {
      return sr(w) ? ep(w) : Mh(w);
    }
    function St(w) {
      return sr(w) ? tp(w) : $h(w);
    }
    function Ql(w) {
      for (var L = w.length; L-- && Zd.test(w.charAt(L)); )
        ;
      return L;
    }
    var Qh = ca(Oh);
    function ep(w) {
      for (var L = ra.lastIndex = 0; ra.test(w); )
        ++L;
      return L;
    }
    function tp(w) {
      return w.match(ra) || [];
    }
    function np(w) {
      return w.match(bh) || [];
    }
    var rp = function w(L) {
      L = L == null ? Fe : or.defaults(Fe.Object(), L, or.pick(Fe, Ch));
      var S = L.Array, D = L.Date, J = L.Error, fe = L.Function, Le = L.Math, me = L.Object, ga = L.RegExp, ip = L.String, gt = L.TypeError, Ai = S.prototype, sp = fe.prototype, lr = me.prototype, Ci = L["__core-js_shared__"], Ti = sp.toString, pe = lr.hasOwnProperty, ap = 0, eu = function() {
        var n = /[^.]+$/.exec(Ci && Ci.keys && Ci.keys.IE_PROTO || "");
        return n ? "Symbol(src)_1." + n : "";
      }(), Si = lr.toString, op = Ti.call(me), lp = Fe._, up = ga(
        "^" + Ti.call(pe).replace(Xs, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      ), Li = Ml ? L.Buffer : r, pn = L.Symbol, Oi = L.Uint8Array, tu = Li ? Li.allocUnsafe : r, Ni = Jl(me.getPrototypeOf, me), nu = me.create, ru = lr.propertyIsEnumerable, Ii = Ai.splice, iu = pn ? pn.isConcatSpreadable : r, Hr = pn ? pn.iterator : r, kn = pn ? pn.toStringTag : r, ki = function() {
        try {
          var n = Mn(me, "defineProperty");
          return n({}, "", {}), n;
        } catch {
        }
      }(), cp = L.clearTimeout !== Fe.clearTimeout && L.clearTimeout, fp = D && D.now !== Fe.Date.now && D.now, dp = L.setTimeout !== Fe.setTimeout && L.setTimeout, Ri = Le.ceil, Pi = Le.floor, ma = me.getOwnPropertySymbols, hp = Li ? Li.isBuffer : r, su = L.isFinite, pp = Ai.join, gp = Jl(me.keys, me), Oe = Le.max, De = Le.min, mp = D.now, vp = L.parseInt, au = Le.random, yp = Ai.reverse, va = Mn(L, "DataView"), Zr = Mn(L, "Map"), ya = Mn(L, "Promise"), ur = Mn(L, "Set"), Vr = Mn(L, "WeakMap"), jr = Mn(me, "create"), Fi = Vr && new Vr(), cr = {}, _p = $n(va), xp = $n(Zr), wp = $n(ya), bp = $n(ur), Ep = $n(Vr), Bi = pn ? pn.prototype : r, Gr = Bi ? Bi.valueOf : r, ou = Bi ? Bi.toString : r;
      function p(n) {
        if (we(n) && !Q(n) && !(n instanceof oe)) {
          if (n instanceof mt)
            return n;
          if (pe.call(n, "__wrapped__"))
            return lc(n);
        }
        return new mt(n);
      }
      var fr = function() {
        function n() {
        }
        return function(i) {
          if (!xe(i))
            return {};
          if (nu)
            return nu(i);
          n.prototype = i;
          var o = new n();
          return n.prototype = r, o;
        };
      }();
      function Mi() {
      }
      function mt(n, i) {
        this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!i, this.__index__ = 0, this.__values__ = r;
      }
      p.templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        escape: Md,
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        evaluate: $d,
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        interpolate: ml,
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        variable: "",
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        imports: {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          _: p
        }
      }, p.prototype = Mi.prototype, p.prototype.constructor = p, mt.prototype = fr(Mi.prototype), mt.prototype.constructor = mt;
      function oe(n) {
        this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Rt, this.__views__ = [];
      }
      function Ap() {
        var n = new oe(this.__wrapped__);
        return n.__actions__ = ze(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = ze(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = ze(this.__views__), n;
      }
      function Cp() {
        if (this.__filtered__) {
          var n = new oe(this);
          n.__dir__ = -1, n.__filtered__ = !0;
        } else
          n = this.clone(), n.__dir__ *= -1;
        return n;
      }
      function Tp() {
        var n = this.__wrapped__.value(), i = this.__dir__, o = Q(n), c = i < 0, h = o ? n.length : 0, m = $g(0, h, this.__views__), v = m.start, y = m.end, b = y - v, O = c ? y : v - 1, N = this.__iteratees__, I = N.length, F = 0, V = De(b, this.__takeCount__);
        if (!o || !c && h == b && V == b)
          return Iu(n, this.__actions__);
        var z = [];
        e:
          for (; b-- && F < V; ) {
            O += i;
            for (var re = -1, K = n[O]; ++re < I; ) {
              var ae = N[re], ce = ae.iteratee, ut = ae.type, Ge = ce(K);
              if (ut == At)
                K = Ge;
              else if (!Ge) {
                if (ut == Ze)
                  continue e;
                break e;
              }
            }
            z[F++] = K;
          }
        return z;
      }
      oe.prototype = fr(Mi.prototype), oe.prototype.constructor = oe;
      function Rn(n) {
        var i = -1, o = n == null ? 0 : n.length;
        for (this.clear(); ++i < o; ) {
          var c = n[i];
          this.set(c[0], c[1]);
        }
      }
      function Sp() {
        this.__data__ = jr ? jr(null) : {}, this.size = 0;
      }
      function Lp(n) {
        var i = this.has(n) && delete this.__data__[n];
        return this.size -= i ? 1 : 0, i;
      }
      function Op(n) {
        var i = this.__data__;
        if (jr) {
          var o = i[n];
          return o === d ? r : o;
        }
        return pe.call(i, n) ? i[n] : r;
      }
      function Np(n) {
        var i = this.__data__;
        return jr ? i[n] !== r : pe.call(i, n);
      }
      function Ip(n, i) {
        var o = this.__data__;
        return this.size += this.has(n) ? 0 : 1, o[n] = jr && i === r ? d : i, this;
      }
      Rn.prototype.clear = Sp, Rn.prototype.delete = Lp, Rn.prototype.get = Op, Rn.prototype.has = Np, Rn.prototype.set = Ip;
      function qt(n) {
        var i = -1, o = n == null ? 0 : n.length;
        for (this.clear(); ++i < o; ) {
          var c = n[i];
          this.set(c[0], c[1]);
        }
      }
      function kp() {
        this.__data__ = [], this.size = 0;
      }
      function Rp(n) {
        var i = this.__data__, o = $i(i, n);
        if (o < 0)
          return !1;
        var c = i.length - 1;
        return o == c ? i.pop() : Ii.call(i, o, 1), --this.size, !0;
      }
      function Pp(n) {
        var i = this.__data__, o = $i(i, n);
        return o < 0 ? r : i[o][1];
      }
      function Fp(n) {
        return $i(this.__data__, n) > -1;
      }
      function Bp(n, i) {
        var o = this.__data__, c = $i(o, n);
        return c < 0 ? (++this.size, o.push([n, i])) : o[c][1] = i, this;
      }
      qt.prototype.clear = kp, qt.prototype.delete = Rp, qt.prototype.get = Pp, qt.prototype.has = Fp, qt.prototype.set = Bp;
      function zt(n) {
        var i = -1, o = n == null ? 0 : n.length;
        for (this.clear(); ++i < o; ) {
          var c = n[i];
          this.set(c[0], c[1]);
        }
      }
      function Mp() {
        this.size = 0, this.__data__ = {
          hash: new Rn(),
          map: new (Zr || qt)(),
          string: new Rn()
        };
      }
      function $p(n) {
        var i = Ki(this, n).delete(n);
        return this.size -= i ? 1 : 0, i;
      }
      function Dp(n) {
        return Ki(this, n).get(n);
      }
      function Wp(n) {
        return Ki(this, n).has(n);
      }
      function Up(n, i) {
        var o = Ki(this, n), c = o.size;
        return o.set(n, i), this.size += o.size == c ? 0 : 1, this;
      }
      zt.prototype.clear = Mp, zt.prototype.delete = $p, zt.prototype.get = Dp, zt.prototype.has = Wp, zt.prototype.set = Up;
      function Pn(n) {
        var i = -1, o = n == null ? 0 : n.length;
        for (this.__data__ = new zt(); ++i < o; )
          this.add(n[i]);
      }
      function Hp(n) {
        return this.__data__.set(n, d), this;
      }
      function Zp(n) {
        return this.__data__.has(n);
      }
      Pn.prototype.add = Pn.prototype.push = Hp, Pn.prototype.has = Zp;
      function Lt(n) {
        var i = this.__data__ = new qt(n);
        this.size = i.size;
      }
      function Vp() {
        this.__data__ = new qt(), this.size = 0;
      }
      function jp(n) {
        var i = this.__data__, o = i.delete(n);
        return this.size = i.size, o;
      }
      function Gp(n) {
        return this.__data__.get(n);
      }
      function Yp(n) {
        return this.__data__.has(n);
      }
      function qp(n, i) {
        var o = this.__data__;
        if (o instanceof qt) {
          var c = o.__data__;
          if (!Zr || c.length < a - 1)
            return c.push([n, i]), this.size = ++o.size, this;
          o = this.__data__ = new zt(c);
        }
        return o.set(n, i), this.size = o.size, this;
      }
      Lt.prototype.clear = Vp, Lt.prototype.delete = jp, Lt.prototype.get = Gp, Lt.prototype.has = Yp, Lt.prototype.set = qp;
      function lu(n, i) {
        var o = Q(n), c = !o && Dn(n), h = !o && !c && _n(n), m = !o && !c && !h && gr(n), v = o || c || h || m, y = v ? da(n.length, ip) : [], b = y.length;
        for (var O in n)
          (i || pe.call(n, O)) && !(v && // Safari 9 has enumerable `arguments.length` in strict mode.
          (O == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          h && (O == "offset" || O == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          m && (O == "buffer" || O == "byteLength" || O == "byteOffset") || // Skip index properties.
          Qt(O, b))) && y.push(O);
        return y;
      }
      function uu(n) {
        var i = n.length;
        return i ? n[Oa(0, i - 1)] : r;
      }
      function zp(n, i) {
        return Xi(ze(n), Fn(i, 0, n.length));
      }
      function Kp(n) {
        return Xi(ze(n));
      }
      function _a(n, i, o) {
        (o !== r && !Ot(n[i], o) || o === r && !(i in n)) && Kt(n, i, o);
      }
      function Yr(n, i, o) {
        var c = n[i];
        (!(pe.call(n, i) && Ot(c, o)) || o === r && !(i in n)) && Kt(n, i, o);
      }
      function $i(n, i) {
        for (var o = n.length; o--; )
          if (Ot(n[o][0], i))
            return o;
        return -1;
      }
      function Xp(n, i, o, c) {
        return gn(n, function(h, m, v) {
          i(c, h, o(h), v);
        }), c;
      }
      function cu(n, i) {
        return n && Ft(i, Re(i), n);
      }
      function Jp(n, i) {
        return n && Ft(i, Xe(i), n);
      }
      function Kt(n, i, o) {
        i == "__proto__" && ki ? ki(n, i, {
          configurable: !0,
          enumerable: !0,
          value: o,
          writable: !0
        }) : n[i] = o;
      }
      function xa(n, i) {
        for (var o = -1, c = i.length, h = S(c), m = n == null; ++o < c; )
          h[o] = m ? r : eo(n, i[o]);
        return h;
      }
      function Fn(n, i, o) {
        return n === n && (o !== r && (n = n <= o ? n : o), i !== r && (n = n >= i ? n : i)), n;
      }
      function vt(n, i, o, c, h, m) {
        var v, y = i & x, b = i & T, O = i & A;
        if (o && (v = h ? o(n, c, h, m) : o(n)), v !== r)
          return v;
        if (!xe(n))
          return n;
        var N = Q(n);
        if (N) {
          if (v = Wg(n), !y)
            return ze(n, v);
        } else {
          var I = We(n), F = I == mi || I == dl;
          if (_n(n))
            return Pu(n, y);
          if (I == Yt || I == tr || F && !h) {
            if (v = b || F ? {} : Qu(n), !y)
              return b ? Og(n, Jp(v, n)) : Lg(n, cu(v, n));
          } else {
            if (!ve[I])
              return h ? n : {};
            v = Ug(n, I, y);
          }
        }
        m || (m = new Lt());
        var V = m.get(n);
        if (V)
          return V;
        m.set(n, v), Lc(n) ? n.forEach(function(K) {
          v.add(vt(K, i, o, K, n, m));
        }) : Tc(n) && n.forEach(function(K, ae) {
          v.set(ae, vt(K, i, o, ae, n, m));
        });
        var z = O ? b ? Wa : Da : b ? Xe : Re, re = N ? r : z(n);
        return pt(re || n, function(K, ae) {
          re && (ae = K, K = n[ae]), Yr(v, ae, vt(K, i, o, ae, n, m));
        }), v;
      }
      function Qp(n) {
        var i = Re(n);
        return function(o) {
          return fu(o, n, i);
        };
      }
      function fu(n, i, o) {
        var c = o.length;
        if (n == null)
          return !c;
        for (n = me(n); c--; ) {
          var h = o[c], m = i[h], v = n[h];
          if (v === r && !(h in n) || !m(v))
            return !1;
        }
        return !0;
      }
      function du(n, i, o) {
        if (typeof n != "function")
          throw new gt(u);
        return ei(function() {
          n.apply(r, o);
        }, i);
      }
      function qr(n, i, o, c) {
        var h = -1, m = wi, v = !0, y = n.length, b = [], O = i.length;
        if (!y)
          return b;
        o && (i = _e(i, at(o))), c ? (m = aa, v = !1) : i.length >= a && (m = Ur, v = !1, i = new Pn(i));
        e:
          for (; ++h < y; ) {
            var N = n[h], I = o == null ? N : o(N);
            if (N = c || N !== 0 ? N : 0, v && I === I) {
              for (var F = O; F--; )
                if (i[F] === I)
                  continue e;
              b.push(N);
            } else
              m(i, I, c) || b.push(N);
          }
        return b;
      }
      var gn = Du(Pt), hu = Du(ba, !0);
      function eg(n, i) {
        var o = !0;
        return gn(n, function(c, h, m) {
          return o = !!i(c, h, m), o;
        }), o;
      }
      function Di(n, i, o) {
        for (var c = -1, h = n.length; ++c < h; ) {
          var m = n[c], v = i(m);
          if (v != null && (y === r ? v === v && !lt(v) : o(v, y)))
            var y = v, b = m;
        }
        return b;
      }
      function tg(n, i, o, c) {
        var h = n.length;
        for (o = te(o), o < 0 && (o = -o > h ? 0 : h + o), c = c === r || c > h ? h : te(c), c < 0 && (c += h), c = o > c ? 0 : Nc(c); o < c; )
          n[o++] = i;
        return n;
      }
      function pu(n, i) {
        var o = [];
        return gn(n, function(c, h, m) {
          i(c, h, m) && o.push(c);
        }), o;
      }
      function Be(n, i, o, c, h) {
        var m = -1, v = n.length;
        for (o || (o = Zg), h || (h = []); ++m < v; ) {
          var y = n[m];
          i > 0 && o(y) ? i > 1 ? Be(y, i - 1, o, c, h) : dn(h, y) : c || (h[h.length] = y);
        }
        return h;
      }
      var wa = Wu(), gu = Wu(!0);
      function Pt(n, i) {
        return n && wa(n, i, Re);
      }
      function ba(n, i) {
        return n && gu(n, i, Re);
      }
      function Wi(n, i) {
        return fn(i, function(o) {
          return en(n[o]);
        });
      }
      function Bn(n, i) {
        i = vn(i, n);
        for (var o = 0, c = i.length; n != null && o < c; )
          n = n[Bt(i[o++])];
        return o && o == c ? n : r;
      }
      function mu(n, i, o) {
        var c = i(n);
        return Q(n) ? c : dn(c, o(n));
      }
      function Ve(n) {
        return n == null ? n === r ? Nd : Ld : kn && kn in me(n) ? Mg(n) : Kg(n);
      }
      function Ea(n, i) {
        return n > i;
      }
      function ng(n, i) {
        return n != null && pe.call(n, i);
      }
      function rg(n, i) {
        return n != null && i in me(n);
      }
      function ig(n, i, o) {
        return n >= De(i, o) && n < Oe(i, o);
      }
      function Aa(n, i, o) {
        for (var c = o ? aa : wi, h = n[0].length, m = n.length, v = m, y = S(m), b = 1 / 0, O = []; v--; ) {
          var N = n[v];
          v && i && (N = _e(N, at(i))), b = De(N.length, b), y[v] = !o && (i || h >= 120 && N.length >= 120) ? new Pn(v && N) : r;
        }
        N = n[0];
        var I = -1, F = y[0];
        e:
          for (; ++I < h && O.length < b; ) {
            var V = N[I], z = i ? i(V) : V;
            if (V = o || V !== 0 ? V : 0, !(F ? Ur(F, z) : c(O, z, o))) {
              for (v = m; --v; ) {
                var re = y[v];
                if (!(re ? Ur(re, z) : c(n[v], z, o)))
                  continue e;
              }
              F && F.push(z), O.push(V);
            }
          }
        return O;
      }
      function sg(n, i, o, c) {
        return Pt(n, function(h, m, v) {
          i(c, o(h), m, v);
        }), c;
      }
      function zr(n, i, o) {
        i = vn(i, n), n = rc(n, i);
        var c = n == null ? n : n[Bt(_t(i))];
        return c == null ? r : st(c, n, o);
      }
      function vu(n) {
        return we(n) && Ve(n) == tr;
      }
      function ag(n) {
        return we(n) && Ve(n) == Wr;
      }
      function og(n) {
        return we(n) && Ve(n) == Fr;
      }
      function Kr(n, i, o, c, h) {
        return n === i ? !0 : n == null || i == null || !we(n) && !we(i) ? n !== n && i !== i : lg(n, i, o, c, Kr, h);
      }
      function lg(n, i, o, c, h, m) {
        var v = Q(n), y = Q(i), b = v ? pi : We(n), O = y ? pi : We(i);
        b = b == tr ? Yt : b, O = O == tr ? Yt : O;
        var N = b == Yt, I = O == Yt, F = b == O;
        if (F && _n(n)) {
          if (!_n(i))
            return !1;
          v = !0, N = !1;
        }
        if (F && !N)
          return m || (m = new Lt()), v || gr(n) ? Ku(n, i, o, c, h, m) : Fg(n, i, b, o, c, h, m);
        if (!(o & C)) {
          var V = N && pe.call(n, "__wrapped__"), z = I && pe.call(i, "__wrapped__");
          if (V || z) {
            var re = V ? n.value() : n, K = z ? i.value() : i;
            return m || (m = new Lt()), h(re, K, o, c, m);
          }
        }
        return F ? (m || (m = new Lt()), Bg(n, i, o, c, h, m)) : !1;
      }
      function ug(n) {
        return we(n) && We(n) == Ct;
      }
      function Ca(n, i, o, c) {
        var h = o.length, m = h, v = !c;
        if (n == null)
          return !m;
        for (n = me(n); h--; ) {
          var y = o[h];
          if (v && y[2] ? y[1] !== n[y[0]] : !(y[0] in n))
            return !1;
        }
        for (; ++h < m; ) {
          y = o[h];
          var b = y[0], O = n[b], N = y[1];
          if (v && y[2]) {
            if (O === r && !(b in n))
              return !1;
          } else {
            var I = new Lt();
            if (c)
              var F = c(O, N, b, n, i, I);
            if (!(F === r ? Kr(N, O, C | E, c, I) : F))
              return !1;
          }
        }
        return !0;
      }
      function yu(n) {
        if (!xe(n) || jg(n))
          return !1;
        var i = en(n) ? up : Qd;
        return i.test($n(n));
      }
      function cg(n) {
        return we(n) && Ve(n) == Mr;
      }
      function fg(n) {
        return we(n) && We(n) == Tt;
      }
      function dg(n) {
        return we(n) && rs(n.length) && !!ye[Ve(n)];
      }
      function _u(n) {
        return typeof n == "function" ? n : n == null ? Je : typeof n == "object" ? Q(n) ? bu(n[0], n[1]) : wu(n) : Uc(n);
      }
      function Ta(n) {
        if (!Qr(n))
          return gp(n);
        var i = [];
        for (var o in me(n))
          pe.call(n, o) && o != "constructor" && i.push(o);
        return i;
      }
      function hg(n) {
        if (!xe(n))
          return zg(n);
        var i = Qr(n), o = [];
        for (var c in n)
          c == "constructor" && (i || !pe.call(n, c)) || o.push(c);
        return o;
      }
      function Sa(n, i) {
        return n < i;
      }
      function xu(n, i) {
        var o = -1, c = Ke(n) ? S(n.length) : [];
        return gn(n, function(h, m, v) {
          c[++o] = i(h, m, v);
        }), c;
      }
      function wu(n) {
        var i = Ha(n);
        return i.length == 1 && i[0][2] ? tc(i[0][0], i[0][1]) : function(o) {
          return o === n || Ca(o, n, i);
        };
      }
      function bu(n, i) {
        return Va(n) && ec(i) ? tc(Bt(n), i) : function(o) {
          var c = eo(o, n);
          return c === r && c === i ? to(o, n) : Kr(i, c, C | E);
        };
      }
      function Ui(n, i, o, c, h) {
        n !== i && wa(i, function(m, v) {
          if (h || (h = new Lt()), xe(m))
            pg(n, i, v, o, Ui, c, h);
          else {
            var y = c ? c(Ga(n, v), m, v + "", n, i, h) : r;
            y === r && (y = m), _a(n, v, y);
          }
        }, Xe);
      }
      function pg(n, i, o, c, h, m, v) {
        var y = Ga(n, o), b = Ga(i, o), O = v.get(b);
        if (O) {
          _a(n, o, O);
          return;
        }
        var N = m ? m(y, b, o + "", n, i, v) : r, I = N === r;
        if (I) {
          var F = Q(b), V = !F && _n(b), z = !F && !V && gr(b);
          N = b, F || V || z ? Q(y) ? N = y : Ee(y) ? N = ze(y) : V ? (I = !1, N = Pu(b, !0)) : z ? (I = !1, N = Fu(b, !0)) : N = [] : ti(b) || Dn(b) ? (N = y, Dn(y) ? N = Ic(y) : (!xe(y) || en(y)) && (N = Qu(b))) : I = !1;
        }
        I && (v.set(b, N), h(N, b, c, m, v), v.delete(b)), _a(n, o, N);
      }
      function Eu(n, i) {
        var o = n.length;
        if (o)
          return i += i < 0 ? o : 0, Qt(i, o) ? n[i] : r;
      }
      function Au(n, i, o) {
        i.length ? i = _e(i, function(m) {
          return Q(m) ? function(v) {
            return Bn(v, m.length === 1 ? m[0] : m);
          } : m;
        }) : i = [Je];
        var c = -1;
        i = _e(i, at(q()));
        var h = xu(n, function(m, v, y) {
          var b = _e(i, function(O) {
            return O(m);
          });
          return { criteria: b, index: ++c, value: m };
        });
        return Uh(h, function(m, v) {
          return Sg(m, v, o);
        });
      }
      function gg(n, i) {
        return Cu(n, i, function(o, c) {
          return to(n, c);
        });
      }
      function Cu(n, i, o) {
        for (var c = -1, h = i.length, m = {}; ++c < h; ) {
          var v = i[c], y = Bn(n, v);
          o(y, v) && Xr(m, vn(v, n), y);
        }
        return m;
      }
      function mg(n) {
        return function(i) {
          return Bn(i, n);
        };
      }
      function La(n, i, o, c) {
        var h = c ? Wh : ir, m = -1, v = i.length, y = n;
        for (n === i && (i = ze(i)), o && (y = _e(n, at(o))); ++m < v; )
          for (var b = 0, O = i[m], N = o ? o(O) : O; (b = h(y, N, b, c)) > -1; )
            y !== n && Ii.call(y, b, 1), Ii.call(n, b, 1);
        return n;
      }
      function Tu(n, i) {
        for (var o = n ? i.length : 0, c = o - 1; o--; ) {
          var h = i[o];
          if (o == c || h !== m) {
            var m = h;
            Qt(h) ? Ii.call(n, h, 1) : ka(n, h);
          }
        }
        return n;
      }
      function Oa(n, i) {
        return n + Pi(au() * (i - n + 1));
      }
      function vg(n, i, o, c) {
        for (var h = -1, m = Oe(Ri((i - n) / (o || 1)), 0), v = S(m); m--; )
          v[c ? m : ++h] = n, n += o;
        return v;
      }
      function Na(n, i) {
        var o = "";
        if (!n || i < 1 || i > $e)
          return o;
        do
          i % 2 && (o += n), i = Pi(i / 2), i && (n += n);
        while (i);
        return o;
      }
      function ie(n, i) {
        return Ya(nc(n, i, Je), n + "");
      }
      function yg(n) {
        return uu(mr(n));
      }
      function _g(n, i) {
        var o = mr(n);
        return Xi(o, Fn(i, 0, o.length));
      }
      function Xr(n, i, o, c) {
        if (!xe(n))
          return n;
        i = vn(i, n);
        for (var h = -1, m = i.length, v = m - 1, y = n; y != null && ++h < m; ) {
          var b = Bt(i[h]), O = o;
          if (b === "__proto__" || b === "constructor" || b === "prototype")
            return n;
          if (h != v) {
            var N = y[b];
            O = c ? c(N, b, y) : r, O === r && (O = xe(N) ? N : Qt(i[h + 1]) ? [] : {});
          }
          Yr(y, b, O), y = y[b];
        }
        return n;
      }
      var Su = Fi ? function(n, i) {
        return Fi.set(n, i), n;
      } : Je, xg = ki ? function(n, i) {
        return ki(n, "toString", {
          configurable: !0,
          enumerable: !1,
          value: ro(i),
          writable: !0
        });
      } : Je;
      function wg(n) {
        return Xi(mr(n));
      }
      function yt(n, i, o) {
        var c = -1, h = n.length;
        i < 0 && (i = -i > h ? 0 : h + i), o = o > h ? h : o, o < 0 && (o += h), h = i > o ? 0 : o - i >>> 0, i >>>= 0;
        for (var m = S(h); ++c < h; )
          m[c] = n[c + i];
        return m;
      }
      function bg(n, i) {
        var o;
        return gn(n, function(c, h, m) {
          return o = i(c, h, m), !o;
        }), !!o;
      }
      function Hi(n, i, o) {
        var c = 0, h = n == null ? c : n.length;
        if (typeof i == "number" && i === i && h <= Ad) {
          for (; c < h; ) {
            var m = c + h >>> 1, v = n[m];
            v !== null && !lt(v) && (o ? v <= i : v < i) ? c = m + 1 : h = m;
          }
          return h;
        }
        return Ia(n, i, Je, o);
      }
      function Ia(n, i, o, c) {
        var h = 0, m = n == null ? 0 : n.length;
        if (m === 0)
          return 0;
        i = o(i);
        for (var v = i !== i, y = i === null, b = lt(i), O = i === r; h < m; ) {
          var N = Pi((h + m) / 2), I = o(n[N]), F = I !== r, V = I === null, z = I === I, re = lt(I);
          if (v)
            var K = c || z;
          else
            O ? K = z && (c || F) : y ? K = z && F && (c || !V) : b ? K = z && F && !V && (c || !re) : V || re ? K = !1 : K = c ? I <= i : I < i;
          K ? h = N + 1 : m = N;
        }
        return De(m, Ed);
      }
      function Lu(n, i) {
        for (var o = -1, c = n.length, h = 0, m = []; ++o < c; ) {
          var v = n[o], y = i ? i(v) : v;
          if (!o || !Ot(y, b)) {
            var b = y;
            m[h++] = v === 0 ? 0 : v;
          }
        }
        return m;
      }
      function Ou(n) {
        return typeof n == "number" ? n : lt(n) ? er : +n;
      }
      function ot(n) {
        if (typeof n == "string")
          return n;
        if (Q(n))
          return _e(n, ot) + "";
        if (lt(n))
          return ou ? ou.call(n) : "";
        var i = n + "";
        return i == "0" && 1 / n == -Se ? "-0" : i;
      }
      function mn(n, i, o) {
        var c = -1, h = wi, m = n.length, v = !0, y = [], b = y;
        if (o)
          v = !1, h = aa;
        else if (m >= a) {
          var O = i ? null : Rg(n);
          if (O)
            return Ei(O);
          v = !1, h = Ur, b = new Pn();
        } else
          b = i ? [] : y;
        e:
          for (; ++c < m; ) {
            var N = n[c], I = i ? i(N) : N;
            if (N = o || N !== 0 ? N : 0, v && I === I) {
              for (var F = b.length; F--; )
                if (b[F] === I)
                  continue e;
              i && b.push(I), y.push(N);
            } else
              h(b, I, o) || (b !== y && b.push(I), y.push(N));
          }
        return y;
      }
      function ka(n, i) {
        return i = vn(i, n), n = rc(n, i), n == null || delete n[Bt(_t(i))];
      }
      function Nu(n, i, o, c) {
        return Xr(n, i, o(Bn(n, i)), c);
      }
      function Zi(n, i, o, c) {
        for (var h = n.length, m = c ? h : -1; (c ? m-- : ++m < h) && i(n[m], m, n); )
          ;
        return o ? yt(n, c ? 0 : m, c ? m + 1 : h) : yt(n, c ? m + 1 : 0, c ? h : m);
      }
      function Iu(n, i) {
        var o = n;
        return o instanceof oe && (o = o.value()), oa(i, function(c, h) {
          return h.func.apply(h.thisArg, dn([c], h.args));
        }, o);
      }
      function Ra(n, i, o) {
        var c = n.length;
        if (c < 2)
          return c ? mn(n[0]) : [];
        for (var h = -1, m = S(c); ++h < c; )
          for (var v = n[h], y = -1; ++y < c; )
            y != h && (m[h] = qr(m[h] || v, n[y], i, o));
        return mn(Be(m, 1), i, o);
      }
      function ku(n, i, o) {
        for (var c = -1, h = n.length, m = i.length, v = {}; ++c < h; ) {
          var y = c < m ? i[c] : r;
          o(v, n[c], y);
        }
        return v;
      }
      function Pa(n) {
        return Ee(n) ? n : [];
      }
      function Fa(n) {
        return typeof n == "function" ? n : Je;
      }
      function vn(n, i) {
        return Q(n) ? n : Va(n, i) ? [n] : oc(he(n));
      }
      var Eg = ie;
      function yn(n, i, o) {
        var c = n.length;
        return o = o === r ? c : o, !i && o >= c ? n : yt(n, i, o);
      }
      var Ru = cp || function(n) {
        return Fe.clearTimeout(n);
      };
      function Pu(n, i) {
        if (i)
          return n.slice();
        var o = n.length, c = tu ? tu(o) : new n.constructor(o);
        return n.copy(c), c;
      }
      function Ba(n) {
        var i = new n.constructor(n.byteLength);
        return new Oi(i).set(new Oi(n)), i;
      }
      function Ag(n, i) {
        var o = i ? Ba(n.buffer) : n.buffer;
        return new n.constructor(o, n.byteOffset, n.byteLength);
      }
      function Cg(n) {
        var i = new n.constructor(n.source, vl.exec(n));
        return i.lastIndex = n.lastIndex, i;
      }
      function Tg(n) {
        return Gr ? me(Gr.call(n)) : {};
      }
      function Fu(n, i) {
        var o = i ? Ba(n.buffer) : n.buffer;
        return new n.constructor(o, n.byteOffset, n.length);
      }
      function Bu(n, i) {
        if (n !== i) {
          var o = n !== r, c = n === null, h = n === n, m = lt(n), v = i !== r, y = i === null, b = i === i, O = lt(i);
          if (!y && !O && !m && n > i || m && v && b && !y && !O || c && v && b || !o && b || !h)
            return 1;
          if (!c && !m && !O && n < i || O && o && h && !c && !m || y && o && h || !v && h || !b)
            return -1;
        }
        return 0;
      }
      function Sg(n, i, o) {
        for (var c = -1, h = n.criteria, m = i.criteria, v = h.length, y = o.length; ++c < v; ) {
          var b = Bu(h[c], m[c]);
          if (b) {
            if (c >= y)
              return b;
            var O = o[c];
            return b * (O == "desc" ? -1 : 1);
          }
        }
        return n.index - i.index;
      }
      function Mu(n, i, o, c) {
        for (var h = -1, m = n.length, v = o.length, y = -1, b = i.length, O = Oe(m - v, 0), N = S(b + O), I = !c; ++y < b; )
          N[y] = i[y];
        for (; ++h < v; )
          (I || h < m) && (N[o[h]] = n[h]);
        for (; O--; )
          N[y++] = n[h++];
        return N;
      }
      function $u(n, i, o, c) {
        for (var h = -1, m = n.length, v = -1, y = o.length, b = -1, O = i.length, N = Oe(m - y, 0), I = S(N + O), F = !c; ++h < N; )
          I[h] = n[h];
        for (var V = h; ++b < O; )
          I[V + b] = i[b];
        for (; ++v < y; )
          (F || h < m) && (I[V + o[v]] = n[h++]);
        return I;
      }
      function ze(n, i) {
        var o = -1, c = n.length;
        for (i || (i = S(c)); ++o < c; )
          i[o] = n[o];
        return i;
      }
      function Ft(n, i, o, c) {
        var h = !o;
        o || (o = {});
        for (var m = -1, v = i.length; ++m < v; ) {
          var y = i[m], b = c ? c(o[y], n[y], y, o, n) : r;
          b === r && (b = n[y]), h ? Kt(o, y, b) : Yr(o, y, b);
        }
        return o;
      }
      function Lg(n, i) {
        return Ft(n, Za(n), i);
      }
      function Og(n, i) {
        return Ft(n, Xu(n), i);
      }
      function Vi(n, i) {
        return function(o, c) {
          var h = Q(o) ? Ph : Xp, m = i ? i() : {};
          return h(o, n, q(c, 2), m);
        };
      }
      function dr(n) {
        return ie(function(i, o) {
          var c = -1, h = o.length, m = h > 1 ? o[h - 1] : r, v = h > 2 ? o[2] : r;
          for (m = n.length > 3 && typeof m == "function" ? (h--, m) : r, v && je(o[0], o[1], v) && (m = h < 3 ? r : m, h = 1), i = me(i); ++c < h; ) {
            var y = o[c];
            y && n(i, y, c, m);
          }
          return i;
        });
      }
      function Du(n, i) {
        return function(o, c) {
          if (o == null)
            return o;
          if (!Ke(o))
            return n(o, c);
          for (var h = o.length, m = i ? h : -1, v = me(o); (i ? m-- : ++m < h) && c(v[m], m, v) !== !1; )
            ;
          return o;
        };
      }
      function Wu(n) {
        return function(i, o, c) {
          for (var h = -1, m = me(i), v = c(i), y = v.length; y--; ) {
            var b = v[n ? y : ++h];
            if (o(m[b], b, m) === !1)
              break;
          }
          return i;
        };
      }
      function Ng(n, i, o) {
        var c = i & P, h = Jr(n);
        function m() {
          var v = this && this !== Fe && this instanceof m ? h : n;
          return v.apply(c ? o : this, arguments);
        }
        return m;
      }
      function Uu(n) {
        return function(i) {
          i = he(i);
          var o = sr(i) ? St(i) : r, c = o ? o[0] : i.charAt(0), h = o ? yn(o, 1).join("") : i.slice(1);
          return c[n]() + h;
        };
      }
      function hr(n) {
        return function(i) {
          return oa(Dc($c(i).replace(xh, "")), n, "");
        };
      }
      function Jr(n) {
        return function() {
          var i = arguments;
          switch (i.length) {
            case 0:
              return new n();
            case 1:
              return new n(i[0]);
            case 2:
              return new n(i[0], i[1]);
            case 3:
              return new n(i[0], i[1], i[2]);
            case 4:
              return new n(i[0], i[1], i[2], i[3]);
            case 5:
              return new n(i[0], i[1], i[2], i[3], i[4]);
            case 6:
              return new n(i[0], i[1], i[2], i[3], i[4], i[5]);
            case 7:
              return new n(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
          }
          var o = fr(n.prototype), c = n.apply(o, i);
          return xe(c) ? c : o;
        };
      }
      function Ig(n, i, o) {
        var c = Jr(n);
        function h() {
          for (var m = arguments.length, v = S(m), y = m, b = pr(h); y--; )
            v[y] = arguments[y];
          var O = m < 3 && v[0] !== b && v[m - 1] !== b ? [] : hn(v, b);
          if (m -= O.length, m < o)
            return Gu(
              n,
              i,
              ji,
              h.placeholder,
              r,
              v,
              O,
              r,
              r,
              o - m
            );
          var N = this && this !== Fe && this instanceof h ? c : n;
          return st(N, this, v);
        }
        return h;
      }
      function Hu(n) {
        return function(i, o, c) {
          var h = me(i);
          if (!Ke(i)) {
            var m = q(o, 3);
            i = Re(i), o = function(y) {
              return m(h[y], y, h);
            };
          }
          var v = n(i, o, c);
          return v > -1 ? h[m ? i[v] : v] : r;
        };
      }
      function Zu(n) {
        return Jt(function(i) {
          var o = i.length, c = o, h = mt.prototype.thru;
          for (n && i.reverse(); c--; ) {
            var m = i[c];
            if (typeof m != "function")
              throw new gt(u);
            if (h && !v && zi(m) == "wrapper")
              var v = new mt([], !0);
          }
          for (c = v ? c : o; ++c < o; ) {
            m = i[c];
            var y = zi(m), b = y == "wrapper" ? Ua(m) : r;
            b && ja(b[0]) && b[1] == (Y | $ | k | ge) && !b[4].length && b[9] == 1 ? v = v[zi(b[0])].apply(v, b[3]) : v = m.length == 1 && ja(m) ? v[y]() : v.thru(m);
          }
          return function() {
            var O = arguments, N = O[0];
            if (v && O.length == 1 && Q(N))
              return v.plant(N).value();
            for (var I = 0, F = o ? i[I].apply(this, O) : N; ++I < o; )
              F = i[I].call(this, F);
            return F;
          };
        });
      }
      function ji(n, i, o, c, h, m, v, y, b, O) {
        var N = i & Y, I = i & P, F = i & U, V = i & ($ | Z), z = i & jt, re = F ? r : Jr(n);
        function K() {
          for (var ae = arguments.length, ce = S(ae), ut = ae; ut--; )
            ce[ut] = arguments[ut];
          if (V)
            var Ge = pr(K), ct = Zh(ce, Ge);
          if (c && (ce = Mu(ce, c, h, V)), m && (ce = $u(ce, m, v, V)), ae -= ct, V && ae < O) {
            var Ae = hn(ce, Ge);
            return Gu(
              n,
              i,
              ji,
              K.placeholder,
              o,
              ce,
              Ae,
              y,
              b,
              O - ae
            );
          }
          var Nt = I ? o : this, nn = F ? Nt[n] : n;
          return ae = ce.length, y ? ce = Xg(ce, y) : z && ae > 1 && ce.reverse(), N && b < ae && (ce.length = b), this && this !== Fe && this instanceof K && (nn = re || Jr(nn)), nn.apply(Nt, ce);
        }
        return K;
      }
      function Vu(n, i) {
        return function(o, c) {
          return sg(o, n, i(c), {});
        };
      }
      function Gi(n, i) {
        return function(o, c) {
          var h;
          if (o === r && c === r)
            return i;
          if (o !== r && (h = o), c !== r) {
            if (h === r)
              return c;
            typeof o == "string" || typeof c == "string" ? (o = ot(o), c = ot(c)) : (o = Ou(o), c = Ou(c)), h = n(o, c);
          }
          return h;
        };
      }
      function Ma(n) {
        return Jt(function(i) {
          return i = _e(i, at(q())), ie(function(o) {
            var c = this;
            return n(i, function(h) {
              return st(h, c, o);
            });
          });
        });
      }
      function Yi(n, i) {
        i = i === r ? " " : ot(i);
        var o = i.length;
        if (o < 2)
          return o ? Na(i, n) : i;
        var c = Na(i, Ri(n / ar(i)));
        return sr(i) ? yn(St(c), 0, n).join("") : c.slice(0, n);
      }
      function kg(n, i, o, c) {
        var h = i & P, m = Jr(n);
        function v() {
          for (var y = -1, b = arguments.length, O = -1, N = c.length, I = S(N + b), F = this && this !== Fe && this instanceof v ? m : n; ++O < N; )
            I[O] = c[O];
          for (; b--; )
            I[O++] = arguments[++y];
          return st(F, h ? o : this, I);
        }
        return v;
      }
      function ju(n) {
        return function(i, o, c) {
          return c && typeof c != "number" && je(i, o, c) && (o = c = r), i = tn(i), o === r ? (o = i, i = 0) : o = tn(o), c = c === r ? i < o ? 1 : -1 : tn(c), vg(i, o, c, n);
        };
      }
      function qi(n) {
        return function(i, o) {
          return typeof i == "string" && typeof o == "string" || (i = xt(i), o = xt(o)), n(i, o);
        };
      }
      function Gu(n, i, o, c, h, m, v, y, b, O) {
        var N = i & $, I = N ? v : r, F = N ? r : v, V = N ? m : r, z = N ? r : m;
        i |= N ? k : se, i &= ~(N ? se : k), i & H || (i &= ~(P | U));
        var re = [
          n,
          i,
          h,
          V,
          I,
          z,
          F,
          y,
          b,
          O
        ], K = o.apply(r, re);
        return ja(n) && ic(K, re), K.placeholder = c, sc(K, n, i);
      }
      function $a(n) {
        var i = Le[n];
        return function(o, c) {
          if (o = xt(o), c = c == null ? 0 : De(te(c), 292), c && su(o)) {
            var h = (he(o) + "e").split("e"), m = i(h[0] + "e" + (+h[1] + c));
            return h = (he(m) + "e").split("e"), +(h[0] + "e" + (+h[1] - c));
          }
          return i(o);
        };
      }
      var Rg = ur && 1 / Ei(new ur([, -0]))[1] == Se ? function(n) {
        return new ur(n);
      } : ao;
      function Yu(n) {
        return function(i) {
          var o = We(i);
          return o == Ct ? pa(i) : o == Tt ? Kh(i) : Hh(i, n(i));
        };
      }
      function Xt(n, i, o, c, h, m, v, y) {
        var b = i & U;
        if (!b && typeof n != "function")
          throw new gt(u);
        var O = c ? c.length : 0;
        if (O || (i &= ~(k | se), c = h = r), v = v === r ? v : Oe(te(v), 0), y = y === r ? y : te(y), O -= h ? h.length : 0, i & se) {
          var N = c, I = h;
          c = h = r;
        }
        var F = b ? r : Ua(n), V = [
          n,
          i,
          o,
          c,
          h,
          N,
          I,
          m,
          v,
          y
        ];
        if (F && qg(V, F), n = V[0], i = V[1], o = V[2], c = V[3], h = V[4], y = V[9] = V[9] === r ? b ? 0 : n.length : Oe(V[9] - O, 0), !y && i & ($ | Z) && (i &= ~($ | Z)), !i || i == P)
          var z = Ng(n, i, o);
        else
          i == $ || i == Z ? z = Ig(n, i, y) : (i == k || i == (P | k)) && !h.length ? z = kg(n, i, o, c) : z = ji.apply(r, V);
        var re = F ? Su : ic;
        return sc(re(z, V), n, i);
      }
      function qu(n, i, o, c) {
        return n === r || Ot(n, lr[o]) && !pe.call(c, o) ? i : n;
      }
      function zu(n, i, o, c, h, m) {
        return xe(n) && xe(i) && (m.set(i, n), Ui(n, i, r, zu, m), m.delete(i)), n;
      }
      function Pg(n) {
        return ti(n) ? r : n;
      }
      function Ku(n, i, o, c, h, m) {
        var v = o & C, y = n.length, b = i.length;
        if (y != b && !(v && b > y))
          return !1;
        var O = m.get(n), N = m.get(i);
        if (O && N)
          return O == i && N == n;
        var I = -1, F = !0, V = o & E ? new Pn() : r;
        for (m.set(n, i), m.set(i, n); ++I < y; ) {
          var z = n[I], re = i[I];
          if (c)
            var K = v ? c(re, z, I, i, n, m) : c(z, re, I, n, i, m);
          if (K !== r) {
            if (K)
              continue;
            F = !1;
            break;
          }
          if (V) {
            if (!la(i, function(ae, ce) {
              if (!Ur(V, ce) && (z === ae || h(z, ae, o, c, m)))
                return V.push(ce);
            })) {
              F = !1;
              break;
            }
          } else if (!(z === re || h(z, re, o, c, m))) {
            F = !1;
            break;
          }
        }
        return m.delete(n), m.delete(i), F;
      }
      function Fg(n, i, o, c, h, m, v) {
        switch (o) {
          case nr:
            if (n.byteLength != i.byteLength || n.byteOffset != i.byteOffset)
              return !1;
            n = n.buffer, i = i.buffer;
          case Wr:
            return !(n.byteLength != i.byteLength || !m(new Oi(n), new Oi(i)));
          case Pr:
          case Fr:
          case Br:
            return Ot(+n, +i);
          case gi:
            return n.name == i.name && n.message == i.message;
          case Mr:
          case $r:
            return n == i + "";
          case Ct:
            var y = pa;
          case Tt:
            var b = c & C;
            if (y || (y = Ei), n.size != i.size && !b)
              return !1;
            var O = v.get(n);
            if (O)
              return O == i;
            c |= E, v.set(n, i);
            var N = Ku(y(n), y(i), c, h, m, v);
            return v.delete(n), N;
          case vi:
            if (Gr)
              return Gr.call(n) == Gr.call(i);
        }
        return !1;
      }
      function Bg(n, i, o, c, h, m) {
        var v = o & C, y = Da(n), b = y.length, O = Da(i), N = O.length;
        if (b != N && !v)
          return !1;
        for (var I = b; I--; ) {
          var F = y[I];
          if (!(v ? F in i : pe.call(i, F)))
            return !1;
        }
        var V = m.get(n), z = m.get(i);
        if (V && z)
          return V == i && z == n;
        var re = !0;
        m.set(n, i), m.set(i, n);
        for (var K = v; ++I < b; ) {
          F = y[I];
          var ae = n[F], ce = i[F];
          if (c)
            var ut = v ? c(ce, ae, F, i, n, m) : c(ae, ce, F, n, i, m);
          if (!(ut === r ? ae === ce || h(ae, ce, o, c, m) : ut)) {
            re = !1;
            break;
          }
          K || (K = F == "constructor");
        }
        if (re && !K) {
          var Ge = n.constructor, ct = i.constructor;
          Ge != ct && "constructor" in n && "constructor" in i && !(typeof Ge == "function" && Ge instanceof Ge && typeof ct == "function" && ct instanceof ct) && (re = !1);
        }
        return m.delete(n), m.delete(i), re;
      }
      function Jt(n) {
        return Ya(nc(n, r, fc), n + "");
      }
      function Da(n) {
        return mu(n, Re, Za);
      }
      function Wa(n) {
        return mu(n, Xe, Xu);
      }
      var Ua = Fi ? function(n) {
        return Fi.get(n);
      } : ao;
      function zi(n) {
        for (var i = n.name + "", o = cr[i], c = pe.call(cr, i) ? o.length : 0; c--; ) {
          var h = o[c], m = h.func;
          if (m == null || m == n)
            return h.name;
        }
        return i;
      }
      function pr(n) {
        var i = pe.call(p, "placeholder") ? p : n;
        return i.placeholder;
      }
      function q() {
        var n = p.iteratee || io;
        return n = n === io ? _u : n, arguments.length ? n(arguments[0], arguments[1]) : n;
      }
      function Ki(n, i) {
        var o = n.__data__;
        return Vg(i) ? o[typeof i == "string" ? "string" : "hash"] : o.map;
      }
      function Ha(n) {
        for (var i = Re(n), o = i.length; o--; ) {
          var c = i[o], h = n[c];
          i[o] = [c, h, ec(h)];
        }
        return i;
      }
      function Mn(n, i) {
        var o = Yh(n, i);
        return yu(o) ? o : r;
      }
      function Mg(n) {
        var i = pe.call(n, kn), o = n[kn];
        try {
          n[kn] = r;
          var c = !0;
        } catch {
        }
        var h = Si.call(n);
        return c && (i ? n[kn] = o : delete n[kn]), h;
      }
      var Za = ma ? function(n) {
        return n == null ? [] : (n = me(n), fn(ma(n), function(i) {
          return ru.call(n, i);
        }));
      } : oo, Xu = ma ? function(n) {
        for (var i = []; n; )
          dn(i, Za(n)), n = Ni(n);
        return i;
      } : oo, We = Ve;
      (va && We(new va(new ArrayBuffer(1))) != nr || Zr && We(new Zr()) != Ct || ya && We(ya.resolve()) != hl || ur && We(new ur()) != Tt || Vr && We(new Vr()) != Dr) && (We = function(n) {
        var i = Ve(n), o = i == Yt ? n.constructor : r, c = o ? $n(o) : "";
        if (c)
          switch (c) {
            case _p:
              return nr;
            case xp:
              return Ct;
            case wp:
              return hl;
            case bp:
              return Tt;
            case Ep:
              return Dr;
          }
        return i;
      });
      function $g(n, i, o) {
        for (var c = -1, h = o.length; ++c < h; ) {
          var m = o[c], v = m.size;
          switch (m.type) {
            case "drop":
              n += v;
              break;
            case "dropRight":
              i -= v;
              break;
            case "take":
              i = De(i, n + v);
              break;
            case "takeRight":
              n = Oe(n, i - v);
              break;
          }
        }
        return { start: n, end: i };
      }
      function Dg(n) {
        var i = n.match(jd);
        return i ? i[1].split(Gd) : [];
      }
      function Ju(n, i, o) {
        i = vn(i, n);
        for (var c = -1, h = i.length, m = !1; ++c < h; ) {
          var v = Bt(i[c]);
          if (!(m = n != null && o(n, v)))
            break;
          n = n[v];
        }
        return m || ++c != h ? m : (h = n == null ? 0 : n.length, !!h && rs(h) && Qt(v, h) && (Q(n) || Dn(n)));
      }
      function Wg(n) {
        var i = n.length, o = new n.constructor(i);
        return i && typeof n[0] == "string" && pe.call(n, "index") && (o.index = n.index, o.input = n.input), o;
      }
      function Qu(n) {
        return typeof n.constructor == "function" && !Qr(n) ? fr(Ni(n)) : {};
      }
      function Ug(n, i, o) {
        var c = n.constructor;
        switch (i) {
          case Wr:
            return Ba(n);
          case Pr:
          case Fr:
            return new c(+n);
          case nr:
            return Ag(n, o);
          case Hs:
          case Zs:
          case Vs:
          case js:
          case Gs:
          case Ys:
          case qs:
          case zs:
          case Ks:
            return Fu(n, o);
          case Ct:
            return new c();
          case Br:
          case $r:
            return new c(n);
          case Mr:
            return Cg(n);
          case Tt:
            return new c();
          case vi:
            return Tg(n);
        }
      }
      function Hg(n, i) {
        var o = i.length;
        if (!o)
          return n;
        var c = o - 1;
        return i[c] = (o > 1 ? "& " : "") + i[c], i = i.join(o > 2 ? ", " : " "), n.replace(Vd, `{
/* [wrapped with ` + i + `] */
`);
      }
      function Zg(n) {
        return Q(n) || Dn(n) || !!(iu && n && n[iu]);
      }
      function Qt(n, i) {
        var o = typeof n;
        return i = i ?? $e, !!i && (o == "number" || o != "symbol" && th.test(n)) && n > -1 && n % 1 == 0 && n < i;
      }
      function je(n, i, o) {
        if (!xe(o))
          return !1;
        var c = typeof i;
        return (c == "number" ? Ke(o) && Qt(i, o.length) : c == "string" && i in o) ? Ot(o[i], n) : !1;
      }
      function Va(n, i) {
        if (Q(n))
          return !1;
        var o = typeof n;
        return o == "number" || o == "symbol" || o == "boolean" || n == null || lt(n) ? !0 : Wd.test(n) || !Dd.test(n) || i != null && n in me(i);
      }
      function Vg(n) {
        var i = typeof n;
        return i == "string" || i == "number" || i == "symbol" || i == "boolean" ? n !== "__proto__" : n === null;
      }
      function ja(n) {
        var i = zi(n), o = p[i];
        if (typeof o != "function" || !(i in oe.prototype))
          return !1;
        if (n === o)
          return !0;
        var c = Ua(o);
        return !!c && n === c[0];
      }
      function jg(n) {
        return !!eu && eu in n;
      }
      var Gg = Ci ? en : lo;
      function Qr(n) {
        var i = n && n.constructor, o = typeof i == "function" && i.prototype || lr;
        return n === o;
      }
      function ec(n) {
        return n === n && !xe(n);
      }
      function tc(n, i) {
        return function(o) {
          return o == null ? !1 : o[n] === i && (i !== r || n in me(o));
        };
      }
      function Yg(n) {
        var i = ts(n, function(c) {
          return o.size === g && o.clear(), c;
        }), o = i.cache;
        return i;
      }
      function qg(n, i) {
        var o = n[1], c = i[1], h = o | c, m = h < (P | U | Y), v = c == Y && o == $ || c == Y && o == ge && n[7].length <= i[8] || c == (Y | ge) && i[7].length <= i[8] && o == $;
        if (!(m || v))
          return n;
        c & P && (n[2] = i[2], h |= o & P ? 0 : H);
        var y = i[3];
        if (y) {
          var b = n[3];
          n[3] = b ? Mu(b, y, i[4]) : y, n[4] = b ? hn(n[3], _) : i[4];
        }
        return y = i[5], y && (b = n[5], n[5] = b ? $u(b, y, i[6]) : y, n[6] = b ? hn(n[5], _) : i[6]), y = i[7], y && (n[7] = y), c & Y && (n[8] = n[8] == null ? i[8] : De(n[8], i[8])), n[9] == null && (n[9] = i[9]), n[0] = i[0], n[1] = h, n;
      }
      function zg(n) {
        var i = [];
        if (n != null)
          for (var o in me(n))
            i.push(o);
        return i;
      }
      function Kg(n) {
        return Si.call(n);
      }
      function nc(n, i, o) {
        return i = Oe(i === r ? n.length - 1 : i, 0), function() {
          for (var c = arguments, h = -1, m = Oe(c.length - i, 0), v = S(m); ++h < m; )
            v[h] = c[i + h];
          h = -1;
          for (var y = S(i + 1); ++h < i; )
            y[h] = c[h];
          return y[i] = o(v), st(n, this, y);
        };
      }
      function rc(n, i) {
        return i.length < 2 ? n : Bn(n, yt(i, 0, -1));
      }
      function Xg(n, i) {
        for (var o = n.length, c = De(i.length, o), h = ze(n); c--; ) {
          var m = i[c];
          n[c] = Qt(m, o) ? h[m] : r;
        }
        return n;
      }
      function Ga(n, i) {
        if (!(i === "constructor" && typeof n[i] == "function") && i != "__proto__")
          return n[i];
      }
      var ic = ac(Su), ei = dp || function(n, i) {
        return Fe.setTimeout(n, i);
      }, Ya = ac(xg);
      function sc(n, i, o) {
        var c = i + "";
        return Ya(n, Hg(c, Jg(Dg(c), o)));
      }
      function ac(n) {
        var i = 0, o = 0;
        return function() {
          var c = mp(), h = Gt - (c - o);
          if (o = c, h > 0) {
            if (++i >= dt)
              return arguments[0];
          } else
            i = 0;
          return n.apply(r, arguments);
        };
      }
      function Xi(n, i) {
        var o = -1, c = n.length, h = c - 1;
        for (i = i === r ? c : i; ++o < i; ) {
          var m = Oa(o, h), v = n[m];
          n[m] = n[o], n[o] = v;
        }
        return n.length = i, n;
      }
      var oc = Yg(function(n) {
        var i = [];
        return n.charCodeAt(0) === 46 && i.push(""), n.replace(Ud, function(o, c, h, m) {
          i.push(h ? m.replace(zd, "$1") : c || o);
        }), i;
      });
      function Bt(n) {
        if (typeof n == "string" || lt(n))
          return n;
        var i = n + "";
        return i == "0" && 1 / n == -Se ? "-0" : i;
      }
      function $n(n) {
        if (n != null) {
          try {
            return Ti.call(n);
          } catch {
          }
          try {
            return n + "";
          } catch {
          }
        }
        return "";
      }
      function Jg(n, i) {
        return pt(Cd, function(o) {
          var c = "_." + o[0];
          i & o[1] && !wi(n, c) && n.push(c);
        }), n.sort();
      }
      function lc(n) {
        if (n instanceof oe)
          return n.clone();
        var i = new mt(n.__wrapped__, n.__chain__);
        return i.__actions__ = ze(n.__actions__), i.__index__ = n.__index__, i.__values__ = n.__values__, i;
      }
      function Qg(n, i, o) {
        (o ? je(n, i, o) : i === r) ? i = 1 : i = Oe(te(i), 0);
        var c = n == null ? 0 : n.length;
        if (!c || i < 1)
          return [];
        for (var h = 0, m = 0, v = S(Ri(c / i)); h < c; )
          v[m++] = yt(n, h, h += i);
        return v;
      }
      function em(n) {
        for (var i = -1, o = n == null ? 0 : n.length, c = 0, h = []; ++i < o; ) {
          var m = n[i];
          m && (h[c++] = m);
        }
        return h;
      }
      function tm() {
        var n = arguments.length;
        if (!n)
          return [];
        for (var i = S(n - 1), o = arguments[0], c = n; c--; )
          i[c - 1] = arguments[c];
        return dn(Q(o) ? ze(o) : [o], Be(i, 1));
      }
      var nm = ie(function(n, i) {
        return Ee(n) ? qr(n, Be(i, 1, Ee, !0)) : [];
      }), rm = ie(function(n, i) {
        var o = _t(i);
        return Ee(o) && (o = r), Ee(n) ? qr(n, Be(i, 1, Ee, !0), q(o, 2)) : [];
      }), im = ie(function(n, i) {
        var o = _t(i);
        return Ee(o) && (o = r), Ee(n) ? qr(n, Be(i, 1, Ee, !0), r, o) : [];
      });
      function sm(n, i, o) {
        var c = n == null ? 0 : n.length;
        return c ? (i = o || i === r ? 1 : te(i), yt(n, i < 0 ? 0 : i, c)) : [];
      }
      function am(n, i, o) {
        var c = n == null ? 0 : n.length;
        return c ? (i = o || i === r ? 1 : te(i), i = c - i, yt(n, 0, i < 0 ? 0 : i)) : [];
      }
      function om(n, i) {
        return n && n.length ? Zi(n, q(i, 3), !0, !0) : [];
      }
      function lm(n, i) {
        return n && n.length ? Zi(n, q(i, 3), !0) : [];
      }
      function um(n, i, o, c) {
        var h = n == null ? 0 : n.length;
        return h ? (o && typeof o != "number" && je(n, i, o) && (o = 0, c = h), tg(n, i, o, c)) : [];
      }
      function uc(n, i, o) {
        var c = n == null ? 0 : n.length;
        if (!c)
          return -1;
        var h = o == null ? 0 : te(o);
        return h < 0 && (h = Oe(c + h, 0)), bi(n, q(i, 3), h);
      }
      function cc(n, i, o) {
        var c = n == null ? 0 : n.length;
        if (!c)
          return -1;
        var h = c - 1;
        return o !== r && (h = te(o), h = o < 0 ? Oe(c + h, 0) : De(h, c - 1)), bi(n, q(i, 3), h, !0);
      }
      function fc(n) {
        var i = n == null ? 0 : n.length;
        return i ? Be(n, 1) : [];
      }
      function cm(n) {
        var i = n == null ? 0 : n.length;
        return i ? Be(n, Se) : [];
      }
      function fm(n, i) {
        var o = n == null ? 0 : n.length;
        return o ? (i = i === r ? 1 : te(i), Be(n, i)) : [];
      }
      function dm(n) {
        for (var i = -1, o = n == null ? 0 : n.length, c = {}; ++i < o; ) {
          var h = n[i];
          c[h[0]] = h[1];
        }
        return c;
      }
      function dc(n) {
        return n && n.length ? n[0] : r;
      }
      function hm(n, i, o) {
        var c = n == null ? 0 : n.length;
        if (!c)
          return -1;
        var h = o == null ? 0 : te(o);
        return h < 0 && (h = Oe(c + h, 0)), ir(n, i, h);
      }
      function pm(n) {
        var i = n == null ? 0 : n.length;
        return i ? yt(n, 0, -1) : [];
      }
      var gm = ie(function(n) {
        var i = _e(n, Pa);
        return i.length && i[0] === n[0] ? Aa(i) : [];
      }), mm = ie(function(n) {
        var i = _t(n), o = _e(n, Pa);
        return i === _t(o) ? i = r : o.pop(), o.length && o[0] === n[0] ? Aa(o, q(i, 2)) : [];
      }), vm = ie(function(n) {
        var i = _t(n), o = _e(n, Pa);
        return i = typeof i == "function" ? i : r, i && o.pop(), o.length && o[0] === n[0] ? Aa(o, r, i) : [];
      });
      function ym(n, i) {
        return n == null ? "" : pp.call(n, i);
      }
      function _t(n) {
        var i = n == null ? 0 : n.length;
        return i ? n[i - 1] : r;
      }
      function _m(n, i, o) {
        var c = n == null ? 0 : n.length;
        if (!c)
          return -1;
        var h = c;
        return o !== r && (h = te(o), h = h < 0 ? Oe(c + h, 0) : De(h, c - 1)), i === i ? Jh(n, i, h) : bi(n, Gl, h, !0);
      }
      function xm(n, i) {
        return n && n.length ? Eu(n, te(i)) : r;
      }
      var wm = ie(hc);
      function hc(n, i) {
        return n && n.length && i && i.length ? La(n, i) : n;
      }
      function bm(n, i, o) {
        return n && n.length && i && i.length ? La(n, i, q(o, 2)) : n;
      }
      function Em(n, i, o) {
        return n && n.length && i && i.length ? La(n, i, r, o) : n;
      }
      var Am = Jt(function(n, i) {
        var o = n == null ? 0 : n.length, c = xa(n, i);
        return Tu(n, _e(i, function(h) {
          return Qt(h, o) ? +h : h;
        }).sort(Bu)), c;
      });
      function Cm(n, i) {
        var o = [];
        if (!(n && n.length))
          return o;
        var c = -1, h = [], m = n.length;
        for (i = q(i, 3); ++c < m; ) {
          var v = n[c];
          i(v, c, n) && (o.push(v), h.push(c));
        }
        return Tu(n, h), o;
      }
      function qa(n) {
        return n == null ? n : yp.call(n);
      }
      function Tm(n, i, o) {
        var c = n == null ? 0 : n.length;
        return c ? (o && typeof o != "number" && je(n, i, o) ? (i = 0, o = c) : (i = i == null ? 0 : te(i), o = o === r ? c : te(o)), yt(n, i, o)) : [];
      }
      function Sm(n, i) {
        return Hi(n, i);
      }
      function Lm(n, i, o) {
        return Ia(n, i, q(o, 2));
      }
      function Om(n, i) {
        var o = n == null ? 0 : n.length;
        if (o) {
          var c = Hi(n, i);
          if (c < o && Ot(n[c], i))
            return c;
        }
        return -1;
      }
      function Nm(n, i) {
        return Hi(n, i, !0);
      }
      function Im(n, i, o) {
        return Ia(n, i, q(o, 2), !0);
      }
      function km(n, i) {
        var o = n == null ? 0 : n.length;
        if (o) {
          var c = Hi(n, i, !0) - 1;
          if (Ot(n[c], i))
            return c;
        }
        return -1;
      }
      function Rm(n) {
        return n && n.length ? Lu(n) : [];
      }
      function Pm(n, i) {
        return n && n.length ? Lu(n, q(i, 2)) : [];
      }
      function Fm(n) {
        var i = n == null ? 0 : n.length;
        return i ? yt(n, 1, i) : [];
      }
      function Bm(n, i, o) {
        return n && n.length ? (i = o || i === r ? 1 : te(i), yt(n, 0, i < 0 ? 0 : i)) : [];
      }
      function Mm(n, i, o) {
        var c = n == null ? 0 : n.length;
        return c ? (i = o || i === r ? 1 : te(i), i = c - i, yt(n, i < 0 ? 0 : i, c)) : [];
      }
      function $m(n, i) {
        return n && n.length ? Zi(n, q(i, 3), !1, !0) : [];
      }
      function Dm(n, i) {
        return n && n.length ? Zi(n, q(i, 3)) : [];
      }
      var Wm = ie(function(n) {
        return mn(Be(n, 1, Ee, !0));
      }), Um = ie(function(n) {
        var i = _t(n);
        return Ee(i) && (i = r), mn(Be(n, 1, Ee, !0), q(i, 2));
      }), Hm = ie(function(n) {
        var i = _t(n);
        return i = typeof i == "function" ? i : r, mn(Be(n, 1, Ee, !0), r, i);
      });
      function Zm(n) {
        return n && n.length ? mn(n) : [];
      }
      function Vm(n, i) {
        return n && n.length ? mn(n, q(i, 2)) : [];
      }
      function jm(n, i) {
        return i = typeof i == "function" ? i : r, n && n.length ? mn(n, r, i) : [];
      }
      function za(n) {
        if (!(n && n.length))
          return [];
        var i = 0;
        return n = fn(n, function(o) {
          if (Ee(o))
            return i = Oe(o.length, i), !0;
        }), da(i, function(o) {
          return _e(n, ua(o));
        });
      }
      function pc(n, i) {
        if (!(n && n.length))
          return [];
        var o = za(n);
        return i == null ? o : _e(o, function(c) {
          return st(i, r, c);
        });
      }
      var Gm = ie(function(n, i) {
        return Ee(n) ? qr(n, i) : [];
      }), Ym = ie(function(n) {
        return Ra(fn(n, Ee));
      }), qm = ie(function(n) {
        var i = _t(n);
        return Ee(i) && (i = r), Ra(fn(n, Ee), q(i, 2));
      }), zm = ie(function(n) {
        var i = _t(n);
        return i = typeof i == "function" ? i : r, Ra(fn(n, Ee), r, i);
      }), Km = ie(za);
      function Xm(n, i) {
        return ku(n || [], i || [], Yr);
      }
      function Jm(n, i) {
        return ku(n || [], i || [], Xr);
      }
      var Qm = ie(function(n) {
        var i = n.length, o = i > 1 ? n[i - 1] : r;
        return o = typeof o == "function" ? (n.pop(), o) : r, pc(n, o);
      });
      function gc(n) {
        var i = p(n);
        return i.__chain__ = !0, i;
      }
      function ev(n, i) {
        return i(n), n;
      }
      function Ji(n, i) {
        return i(n);
      }
      var tv = Jt(function(n) {
        var i = n.length, o = i ? n[0] : 0, c = this.__wrapped__, h = function(m) {
          return xa(m, n);
        };
        return i > 1 || this.__actions__.length || !(c instanceof oe) || !Qt(o) ? this.thru(h) : (c = c.slice(o, +o + (i ? 1 : 0)), c.__actions__.push({
          func: Ji,
          args: [h],
          thisArg: r
        }), new mt(c, this.__chain__).thru(function(m) {
          return i && !m.length && m.push(r), m;
        }));
      });
      function nv() {
        return gc(this);
      }
      function rv() {
        return new mt(this.value(), this.__chain__);
      }
      function iv() {
        this.__values__ === r && (this.__values__ = Oc(this.value()));
        var n = this.__index__ >= this.__values__.length, i = n ? r : this.__values__[this.__index__++];
        return { done: n, value: i };
      }
      function sv() {
        return this;
      }
      function av(n) {
        for (var i, o = this; o instanceof Mi; ) {
          var c = lc(o);
          c.__index__ = 0, c.__values__ = r, i ? h.__wrapped__ = c : i = c;
          var h = c;
          o = o.__wrapped__;
        }
        return h.__wrapped__ = n, i;
      }
      function ov() {
        var n = this.__wrapped__;
        if (n instanceof oe) {
          var i = n;
          return this.__actions__.length && (i = new oe(this)), i = i.reverse(), i.__actions__.push({
            func: Ji,
            args: [qa],
            thisArg: r
          }), new mt(i, this.__chain__);
        }
        return this.thru(qa);
      }
      function lv() {
        return Iu(this.__wrapped__, this.__actions__);
      }
      var uv = Vi(function(n, i, o) {
        pe.call(n, o) ? ++n[o] : Kt(n, o, 1);
      });
      function cv(n, i, o) {
        var c = Q(n) ? Vl : eg;
        return o && je(n, i, o) && (i = r), c(n, q(i, 3));
      }
      function fv(n, i) {
        var o = Q(n) ? fn : pu;
        return o(n, q(i, 3));
      }
      var dv = Hu(uc), hv = Hu(cc);
      function pv(n, i) {
        return Be(Qi(n, i), 1);
      }
      function gv(n, i) {
        return Be(Qi(n, i), Se);
      }
      function mv(n, i, o) {
        return o = o === r ? 1 : te(o), Be(Qi(n, i), o);
      }
      function mc(n, i) {
        var o = Q(n) ? pt : gn;
        return o(n, q(i, 3));
      }
      function vc(n, i) {
        var o = Q(n) ? Fh : hu;
        return o(n, q(i, 3));
      }
      var vv = Vi(function(n, i, o) {
        pe.call(n, o) ? n[o].push(i) : Kt(n, o, [i]);
      });
      function yv(n, i, o, c) {
        n = Ke(n) ? n : mr(n), o = o && !c ? te(o) : 0;
        var h = n.length;
        return o < 0 && (o = Oe(h + o, 0)), is(n) ? o <= h && n.indexOf(i, o) > -1 : !!h && ir(n, i, o) > -1;
      }
      var _v = ie(function(n, i, o) {
        var c = -1, h = typeof i == "function", m = Ke(n) ? S(n.length) : [];
        return gn(n, function(v) {
          m[++c] = h ? st(i, v, o) : zr(v, i, o);
        }), m;
      }), xv = Vi(function(n, i, o) {
        Kt(n, o, i);
      });
      function Qi(n, i) {
        var o = Q(n) ? _e : xu;
        return o(n, q(i, 3));
      }
      function wv(n, i, o, c) {
        return n == null ? [] : (Q(i) || (i = i == null ? [] : [i]), o = c ? r : o, Q(o) || (o = o == null ? [] : [o]), Au(n, i, o));
      }
      var bv = Vi(function(n, i, o) {
        n[o ? 0 : 1].push(i);
      }, function() {
        return [[], []];
      });
      function Ev(n, i, o) {
        var c = Q(n) ? oa : ql, h = arguments.length < 3;
        return c(n, q(i, 4), o, h, gn);
      }
      function Av(n, i, o) {
        var c = Q(n) ? Bh : ql, h = arguments.length < 3;
        return c(n, q(i, 4), o, h, hu);
      }
      function Cv(n, i) {
        var o = Q(n) ? fn : pu;
        return o(n, ns(q(i, 3)));
      }
      function Tv(n) {
        var i = Q(n) ? uu : yg;
        return i(n);
      }
      function Sv(n, i, o) {
        (o ? je(n, i, o) : i === r) ? i = 1 : i = te(i);
        var c = Q(n) ? zp : _g;
        return c(n, i);
      }
      function Lv(n) {
        var i = Q(n) ? Kp : wg;
        return i(n);
      }
      function Ov(n) {
        if (n == null)
          return 0;
        if (Ke(n))
          return is(n) ? ar(n) : n.length;
        var i = We(n);
        return i == Ct || i == Tt ? n.size : Ta(n).length;
      }
      function Nv(n, i, o) {
        var c = Q(n) ? la : bg;
        return o && je(n, i, o) && (i = r), c(n, q(i, 3));
      }
      var Iv = ie(function(n, i) {
        if (n == null)
          return [];
        var o = i.length;
        return o > 1 && je(n, i[0], i[1]) ? i = [] : o > 2 && je(i[0], i[1], i[2]) && (i = [i[0]]), Au(n, Be(i, 1), []);
      }), es = fp || function() {
        return Fe.Date.now();
      };
      function kv(n, i) {
        if (typeof i != "function")
          throw new gt(u);
        return n = te(n), function() {
          if (--n < 1)
            return i.apply(this, arguments);
        };
      }
      function yc(n, i, o) {
        return i = o ? r : i, i = n && i == null ? n.length : i, Xt(n, Y, r, r, r, r, i);
      }
      function _c(n, i) {
        var o;
        if (typeof i != "function")
          throw new gt(u);
        return n = te(n), function() {
          return --n > 0 && (o = i.apply(this, arguments)), n <= 1 && (i = r), o;
        };
      }
      var Ka = ie(function(n, i, o) {
        var c = P;
        if (o.length) {
          var h = hn(o, pr(Ka));
          c |= k;
        }
        return Xt(n, c, i, o, h);
      }), xc = ie(function(n, i, o) {
        var c = P | U;
        if (o.length) {
          var h = hn(o, pr(xc));
          c |= k;
        }
        return Xt(i, c, n, o, h);
      });
      function wc(n, i, o) {
        i = o ? r : i;
        var c = Xt(n, $, r, r, r, r, r, i);
        return c.placeholder = wc.placeholder, c;
      }
      function bc(n, i, o) {
        i = o ? r : i;
        var c = Xt(n, Z, r, r, r, r, r, i);
        return c.placeholder = bc.placeholder, c;
      }
      function Ec(n, i, o) {
        var c, h, m, v, y, b, O = 0, N = !1, I = !1, F = !0;
        if (typeof n != "function")
          throw new gt(u);
        i = xt(i) || 0, xe(o) && (N = !!o.leading, I = "maxWait" in o, m = I ? Oe(xt(o.maxWait) || 0, i) : m, F = "trailing" in o ? !!o.trailing : F);
        function V(Ae) {
          var Nt = c, nn = h;
          return c = h = r, O = Ae, v = n.apply(nn, Nt), v;
        }
        function z(Ae) {
          return O = Ae, y = ei(ae, i), N ? V(Ae) : v;
        }
        function re(Ae) {
          var Nt = Ae - b, nn = Ae - O, Hc = i - Nt;
          return I ? De(Hc, m - nn) : Hc;
        }
        function K(Ae) {
          var Nt = Ae - b, nn = Ae - O;
          return b === r || Nt >= i || Nt < 0 || I && nn >= m;
        }
        function ae() {
          var Ae = es();
          if (K(Ae))
            return ce(Ae);
          y = ei(ae, re(Ae));
        }
        function ce(Ae) {
          return y = r, F && c ? V(Ae) : (c = h = r, v);
        }
        function ut() {
          y !== r && Ru(y), O = 0, c = b = h = y = r;
        }
        function Ge() {
          return y === r ? v : ce(es());
        }
        function ct() {
          var Ae = es(), Nt = K(Ae);
          if (c = arguments, h = this, b = Ae, Nt) {
            if (y === r)
              return z(b);
            if (I)
              return Ru(y), y = ei(ae, i), V(b);
          }
          return y === r && (y = ei(ae, i)), v;
        }
        return ct.cancel = ut, ct.flush = Ge, ct;
      }
      var Rv = ie(function(n, i) {
        return du(n, 1, i);
      }), Pv = ie(function(n, i, o) {
        return du(n, xt(i) || 0, o);
      });
      function Fv(n) {
        return Xt(n, jt);
      }
      function ts(n, i) {
        if (typeof n != "function" || i != null && typeof i != "function")
          throw new gt(u);
        var o = function() {
          var c = arguments, h = i ? i.apply(this, c) : c[0], m = o.cache;
          if (m.has(h))
            return m.get(h);
          var v = n.apply(this, c);
          return o.cache = m.set(h, v) || m, v;
        };
        return o.cache = new (ts.Cache || zt)(), o;
      }
      ts.Cache = zt;
      function ns(n) {
        if (typeof n != "function")
          throw new gt(u);
        return function() {
          var i = arguments;
          switch (i.length) {
            case 0:
              return !n.call(this);
            case 1:
              return !n.call(this, i[0]);
            case 2:
              return !n.call(this, i[0], i[1]);
            case 3:
              return !n.call(this, i[0], i[1], i[2]);
          }
          return !n.apply(this, i);
        };
      }
      function Bv(n) {
        return _c(2, n);
      }
      var Mv = Eg(function(n, i) {
        i = i.length == 1 && Q(i[0]) ? _e(i[0], at(q())) : _e(Be(i, 1), at(q()));
        var o = i.length;
        return ie(function(c) {
          for (var h = -1, m = De(c.length, o); ++h < m; )
            c[h] = i[h].call(this, c[h]);
          return st(n, this, c);
        });
      }), Xa = ie(function(n, i) {
        var o = hn(i, pr(Xa));
        return Xt(n, k, r, i, o);
      }), Ac = ie(function(n, i) {
        var o = hn(i, pr(Ac));
        return Xt(n, se, r, i, o);
      }), $v = Jt(function(n, i) {
        return Xt(n, ge, r, r, r, i);
      });
      function Dv(n, i) {
        if (typeof n != "function")
          throw new gt(u);
        return i = i === r ? i : te(i), ie(n, i);
      }
      function Wv(n, i) {
        if (typeof n != "function")
          throw new gt(u);
        return i = i == null ? 0 : Oe(te(i), 0), ie(function(o) {
          var c = o[i], h = yn(o, 0, i);
          return c && dn(h, c), st(n, this, h);
        });
      }
      function Uv(n, i, o) {
        var c = !0, h = !0;
        if (typeof n != "function")
          throw new gt(u);
        return xe(o) && (c = "leading" in o ? !!o.leading : c, h = "trailing" in o ? !!o.trailing : h), Ec(n, i, {
          leading: c,
          maxWait: i,
          trailing: h
        });
      }
      function Hv(n) {
        return yc(n, 1);
      }
      function Zv(n, i) {
        return Xa(Fa(i), n);
      }
      function Vv() {
        if (!arguments.length)
          return [];
        var n = arguments[0];
        return Q(n) ? n : [n];
      }
      function jv(n) {
        return vt(n, A);
      }
      function Gv(n, i) {
        return i = typeof i == "function" ? i : r, vt(n, A, i);
      }
      function Yv(n) {
        return vt(n, x | A);
      }
      function qv(n, i) {
        return i = typeof i == "function" ? i : r, vt(n, x | A, i);
      }
      function zv(n, i) {
        return i == null || fu(n, i, Re(i));
      }
      function Ot(n, i) {
        return n === i || n !== n && i !== i;
      }
      var Kv = qi(Ea), Xv = qi(function(n, i) {
        return n >= i;
      }), Dn = vu(function() {
        return arguments;
      }()) ? vu : function(n) {
        return we(n) && pe.call(n, "callee") && !ru.call(n, "callee");
      }, Q = S.isArray, Jv = $l ? at($l) : ag;
      function Ke(n) {
        return n != null && rs(n.length) && !en(n);
      }
      function Ee(n) {
        return we(n) && Ke(n);
      }
      function Qv(n) {
        return n === !0 || n === !1 || we(n) && Ve(n) == Pr;
      }
      var _n = hp || lo, e0 = Dl ? at(Dl) : og;
      function t0(n) {
        return we(n) && n.nodeType === 1 && !ti(n);
      }
      function n0(n) {
        if (n == null)
          return !0;
        if (Ke(n) && (Q(n) || typeof n == "string" || typeof n.splice == "function" || _n(n) || gr(n) || Dn(n)))
          return !n.length;
        var i = We(n);
        if (i == Ct || i == Tt)
          return !n.size;
        if (Qr(n))
          return !Ta(n).length;
        for (var o in n)
          if (pe.call(n, o))
            return !1;
        return !0;
      }
      function r0(n, i) {
        return Kr(n, i);
      }
      function i0(n, i, o) {
        o = typeof o == "function" ? o : r;
        var c = o ? o(n, i) : r;
        return c === r ? Kr(n, i, r, o) : !!c;
      }
      function Ja(n) {
        if (!we(n))
          return !1;
        var i = Ve(n);
        return i == gi || i == Sd || typeof n.message == "string" && typeof n.name == "string" && !ti(n);
      }
      function s0(n) {
        return typeof n == "number" && su(n);
      }
      function en(n) {
        if (!xe(n))
          return !1;
        var i = Ve(n);
        return i == mi || i == dl || i == Td || i == Od;
      }
      function Cc(n) {
        return typeof n == "number" && n == te(n);
      }
      function rs(n) {
        return typeof n == "number" && n > -1 && n % 1 == 0 && n <= $e;
      }
      function xe(n) {
        var i = typeof n;
        return n != null && (i == "object" || i == "function");
      }
      function we(n) {
        return n != null && typeof n == "object";
      }
      var Tc = Wl ? at(Wl) : ug;
      function a0(n, i) {
        return n === i || Ca(n, i, Ha(i));
      }
      function o0(n, i, o) {
        return o = typeof o == "function" ? o : r, Ca(n, i, Ha(i), o);
      }
      function l0(n) {
        return Sc(n) && n != +n;
      }
      function u0(n) {
        if (Gg(n))
          throw new J(l);
        return yu(n);
      }
      function c0(n) {
        return n === null;
      }
      function f0(n) {
        return n == null;
      }
      function Sc(n) {
        return typeof n == "number" || we(n) && Ve(n) == Br;
      }
      function ti(n) {
        if (!we(n) || Ve(n) != Yt)
          return !1;
        var i = Ni(n);
        if (i === null)
          return !0;
        var o = pe.call(i, "constructor") && i.constructor;
        return typeof o == "function" && o instanceof o && Ti.call(o) == op;
      }
      var Qa = Ul ? at(Ul) : cg;
      function d0(n) {
        return Cc(n) && n >= -$e && n <= $e;
      }
      var Lc = Hl ? at(Hl) : fg;
      function is(n) {
        return typeof n == "string" || !Q(n) && we(n) && Ve(n) == $r;
      }
      function lt(n) {
        return typeof n == "symbol" || we(n) && Ve(n) == vi;
      }
      var gr = Zl ? at(Zl) : dg;
      function h0(n) {
        return n === r;
      }
      function p0(n) {
        return we(n) && We(n) == Dr;
      }
      function g0(n) {
        return we(n) && Ve(n) == Id;
      }
      var m0 = qi(Sa), v0 = qi(function(n, i) {
        return n <= i;
      });
      function Oc(n) {
        if (!n)
          return [];
        if (Ke(n))
          return is(n) ? St(n) : ze(n);
        if (Hr && n[Hr])
          return zh(n[Hr]());
        var i = We(n), o = i == Ct ? pa : i == Tt ? Ei : mr;
        return o(n);
      }
      function tn(n) {
        if (!n)
          return n === 0 ? n : 0;
        if (n = xt(n), n === Se || n === -Se) {
          var i = n < 0 ? -1 : 1;
          return i * Nn;
        }
        return n === n ? n : 0;
      }
      function te(n) {
        var i = tn(n), o = i % 1;
        return i === i ? o ? i - o : i : 0;
      }
      function Nc(n) {
        return n ? Fn(te(n), 0, Rt) : 0;
      }
      function xt(n) {
        if (typeof n == "number")
          return n;
        if (lt(n))
          return er;
        if (xe(n)) {
          var i = typeof n.valueOf == "function" ? n.valueOf() : n;
          n = xe(i) ? i + "" : i;
        }
        if (typeof n != "string")
          return n === 0 ? n : +n;
        n = zl(n);
        var o = Jd.test(n);
        return o || eh.test(n) ? kh(n.slice(2), o ? 2 : 8) : Xd.test(n) ? er : +n;
      }
      function Ic(n) {
        return Ft(n, Xe(n));
      }
      function y0(n) {
        return n ? Fn(te(n), -$e, $e) : n === 0 ? n : 0;
      }
      function he(n) {
        return n == null ? "" : ot(n);
      }
      var _0 = dr(function(n, i) {
        if (Qr(i) || Ke(i)) {
          Ft(i, Re(i), n);
          return;
        }
        for (var o in i)
          pe.call(i, o) && Yr(n, o, i[o]);
      }), kc = dr(function(n, i) {
        Ft(i, Xe(i), n);
      }), ss = dr(function(n, i, o, c) {
        Ft(i, Xe(i), n, c);
      }), x0 = dr(function(n, i, o, c) {
        Ft(i, Re(i), n, c);
      }), w0 = Jt(xa);
      function b0(n, i) {
        var o = fr(n);
        return i == null ? o : cu(o, i);
      }
      var E0 = ie(function(n, i) {
        n = me(n);
        var o = -1, c = i.length, h = c > 2 ? i[2] : r;
        for (h && je(i[0], i[1], h) && (c = 1); ++o < c; )
          for (var m = i[o], v = Xe(m), y = -1, b = v.length; ++y < b; ) {
            var O = v[y], N = n[O];
            (N === r || Ot(N, lr[O]) && !pe.call(n, O)) && (n[O] = m[O]);
          }
        return n;
      }), A0 = ie(function(n) {
        return n.push(r, zu), st(Rc, r, n);
      });
      function C0(n, i) {
        return jl(n, q(i, 3), Pt);
      }
      function T0(n, i) {
        return jl(n, q(i, 3), ba);
      }
      function S0(n, i) {
        return n == null ? n : wa(n, q(i, 3), Xe);
      }
      function L0(n, i) {
        return n == null ? n : gu(n, q(i, 3), Xe);
      }
      function O0(n, i) {
        return n && Pt(n, q(i, 3));
      }
      function N0(n, i) {
        return n && ba(n, q(i, 3));
      }
      function I0(n) {
        return n == null ? [] : Wi(n, Re(n));
      }
      function k0(n) {
        return n == null ? [] : Wi(n, Xe(n));
      }
      function eo(n, i, o) {
        var c = n == null ? r : Bn(n, i);
        return c === r ? o : c;
      }
      function R0(n, i) {
        return n != null && Ju(n, i, ng);
      }
      function to(n, i) {
        return n != null && Ju(n, i, rg);
      }
      var P0 = Vu(function(n, i, o) {
        i != null && typeof i.toString != "function" && (i = Si.call(i)), n[i] = o;
      }, ro(Je)), F0 = Vu(function(n, i, o) {
        i != null && typeof i.toString != "function" && (i = Si.call(i)), pe.call(n, i) ? n[i].push(o) : n[i] = [o];
      }, q), B0 = ie(zr);
      function Re(n) {
        return Ke(n) ? lu(n) : Ta(n);
      }
      function Xe(n) {
        return Ke(n) ? lu(n, !0) : hg(n);
      }
      function M0(n, i) {
        var o = {};
        return i = q(i, 3), Pt(n, function(c, h, m) {
          Kt(o, i(c, h, m), c);
        }), o;
      }
      function $0(n, i) {
        var o = {};
        return i = q(i, 3), Pt(n, function(c, h, m) {
          Kt(o, h, i(c, h, m));
        }), o;
      }
      var D0 = dr(function(n, i, o) {
        Ui(n, i, o);
      }), Rc = dr(function(n, i, o, c) {
        Ui(n, i, o, c);
      }), W0 = Jt(function(n, i) {
        var o = {};
        if (n == null)
          return o;
        var c = !1;
        i = _e(i, function(m) {
          return m = vn(m, n), c || (c = m.length > 1), m;
        }), Ft(n, Wa(n), o), c && (o = vt(o, x | T | A, Pg));
        for (var h = i.length; h--; )
          ka(o, i[h]);
        return o;
      });
      function U0(n, i) {
        return Pc(n, ns(q(i)));
      }
      var H0 = Jt(function(n, i) {
        return n == null ? {} : gg(n, i);
      });
      function Pc(n, i) {
        if (n == null)
          return {};
        var o = _e(Wa(n), function(c) {
          return [c];
        });
        return i = q(i), Cu(n, o, function(c, h) {
          return i(c, h[0]);
        });
      }
      function Z0(n, i, o) {
        i = vn(i, n);
        var c = -1, h = i.length;
        for (h || (h = 1, n = r); ++c < h; ) {
          var m = n == null ? r : n[Bt(i[c])];
          m === r && (c = h, m = o), n = en(m) ? m.call(n) : m;
        }
        return n;
      }
      function V0(n, i, o) {
        return n == null ? n : Xr(n, i, o);
      }
      function j0(n, i, o, c) {
        return c = typeof c == "function" ? c : r, n == null ? n : Xr(n, i, o, c);
      }
      var Fc = Yu(Re), Bc = Yu(Xe);
      function G0(n, i, o) {
        var c = Q(n), h = c || _n(n) || gr(n);
        if (i = q(i, 4), o == null) {
          var m = n && n.constructor;
          h ? o = c ? new m() : [] : xe(n) ? o = en(m) ? fr(Ni(n)) : {} : o = {};
        }
        return (h ? pt : Pt)(n, function(v, y, b) {
          return i(o, v, y, b);
        }), o;
      }
      function Y0(n, i) {
        return n == null ? !0 : ka(n, i);
      }
      function q0(n, i, o) {
        return n == null ? n : Nu(n, i, Fa(o));
      }
      function z0(n, i, o, c) {
        return c = typeof c == "function" ? c : r, n == null ? n : Nu(n, i, Fa(o), c);
      }
      function mr(n) {
        return n == null ? [] : ha(n, Re(n));
      }
      function K0(n) {
        return n == null ? [] : ha(n, Xe(n));
      }
      function X0(n, i, o) {
        return o === r && (o = i, i = r), o !== r && (o = xt(o), o = o === o ? o : 0), i !== r && (i = xt(i), i = i === i ? i : 0), Fn(xt(n), i, o);
      }
      function J0(n, i, o) {
        return i = tn(i), o === r ? (o = i, i = 0) : o = tn(o), n = xt(n), ig(n, i, o);
      }
      function Q0(n, i, o) {
        if (o && typeof o != "boolean" && je(n, i, o) && (i = o = r), o === r && (typeof i == "boolean" ? (o = i, i = r) : typeof n == "boolean" && (o = n, n = r)), n === r && i === r ? (n = 0, i = 1) : (n = tn(n), i === r ? (i = n, n = 0) : i = tn(i)), n > i) {
          var c = n;
          n = i, i = c;
        }
        if (o || n % 1 || i % 1) {
          var h = au();
          return De(n + h * (i - n + Ih("1e-" + ((h + "").length - 1))), i);
        }
        return Oa(n, i);
      }
      var ey = hr(function(n, i, o) {
        return i = i.toLowerCase(), n + (o ? Mc(i) : i);
      });
      function Mc(n) {
        return no(he(n).toLowerCase());
      }
      function $c(n) {
        return n = he(n), n && n.replace(nh, Vh).replace(wh, "");
      }
      function ty(n, i, o) {
        n = he(n), i = ot(i);
        var c = n.length;
        o = o === r ? c : Fn(te(o), 0, c);
        var h = o;
        return o -= i.length, o >= 0 && n.slice(o, h) == i;
      }
      function ny(n) {
        return n = he(n), n && Bd.test(n) ? n.replace(gl, jh) : n;
      }
      function ry(n) {
        return n = he(n), n && Hd.test(n) ? n.replace(Xs, "\\$&") : n;
      }
      var iy = hr(function(n, i, o) {
        return n + (o ? "-" : "") + i.toLowerCase();
      }), sy = hr(function(n, i, o) {
        return n + (o ? " " : "") + i.toLowerCase();
      }), ay = Uu("toLowerCase");
      function oy(n, i, o) {
        n = he(n), i = te(i);
        var c = i ? ar(n) : 0;
        if (!i || c >= i)
          return n;
        var h = (i - c) / 2;
        return Yi(Pi(h), o) + n + Yi(Ri(h), o);
      }
      function ly(n, i, o) {
        n = he(n), i = te(i);
        var c = i ? ar(n) : 0;
        return i && c < i ? n + Yi(i - c, o) : n;
      }
      function uy(n, i, o) {
        n = he(n), i = te(i);
        var c = i ? ar(n) : 0;
        return i && c < i ? Yi(i - c, o) + n : n;
      }
      function cy(n, i, o) {
        return o || i == null ? i = 0 : i && (i = +i), vp(he(n).replace(Js, ""), i || 0);
      }
      function fy(n, i, o) {
        return (o ? je(n, i, o) : i === r) ? i = 1 : i = te(i), Na(he(n), i);
      }
      function dy() {
        var n = arguments, i = he(n[0]);
        return n.length < 3 ? i : i.replace(n[1], n[2]);
      }
      var hy = hr(function(n, i, o) {
        return n + (o ? "_" : "") + i.toLowerCase();
      });
      function py(n, i, o) {
        return o && typeof o != "number" && je(n, i, o) && (i = o = r), o = o === r ? Rt : o >>> 0, o ? (n = he(n), n && (typeof i == "string" || i != null && !Qa(i)) && (i = ot(i), !i && sr(n)) ? yn(St(n), 0, o) : n.split(i, o)) : [];
      }
      var gy = hr(function(n, i, o) {
        return n + (o ? " " : "") + no(i);
      });
      function my(n, i, o) {
        return n = he(n), o = o == null ? 0 : Fn(te(o), 0, n.length), i = ot(i), n.slice(o, o + i.length) == i;
      }
      function vy(n, i, o) {
        var c = p.templateSettings;
        o && je(n, i, o) && (i = r), n = he(n), i = ss({}, i, c, qu);
        var h = ss({}, i.imports, c.imports, qu), m = Re(h), v = ha(h, m), y, b, O = 0, N = i.interpolate || yi, I = "__p += '", F = ga(
          (i.escape || yi).source + "|" + N.source + "|" + (N === ml ? Kd : yi).source + "|" + (i.evaluate || yi).source + "|$",
          "g"
        ), V = "//# sourceURL=" + (pe.call(i, "sourceURL") ? (i.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++Th + "]") + `
`;
        n.replace(F, function(K, ae, ce, ut, Ge, ct) {
          return ce || (ce = ut), I += n.slice(O, ct).replace(rh, Gh), ae && (y = !0, I += `' +
__e(` + ae + `) +
'`), Ge && (b = !0, I += `';
` + Ge + `;
__p += '`), ce && (I += `' +
((__t = (` + ce + `)) == null ? '' : __t) +
'`), O = ct + K.length, K;
        }), I += `';
`;
        var z = pe.call(i, "variable") && i.variable;
        if (!z)
          I = `with (obj) {
` + I + `
}
`;
        else if (qd.test(z))
          throw new J(f);
        I = (b ? I.replace(kd, "") : I).replace(Rd, "$1").replace(Pd, "$1;"), I = "function(" + (z || "obj") + `) {
` + (z ? "" : `obj || (obj = {});
`) + "var __t, __p = ''" + (y ? ", __e = _.escape" : "") + (b ? `, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
` : `;
`) + I + `return __p
}`;
        var re = Wc(function() {
          return fe(m, V + "return " + I).apply(r, v);
        });
        if (re.source = I, Ja(re))
          throw re;
        return re;
      }
      function yy(n) {
        return he(n).toLowerCase();
      }
      function _y(n) {
        return he(n).toUpperCase();
      }
      function xy(n, i, o) {
        if (n = he(n), n && (o || i === r))
          return zl(n);
        if (!n || !(i = ot(i)))
          return n;
        var c = St(n), h = St(i), m = Kl(c, h), v = Xl(c, h) + 1;
        return yn(c, m, v).join("");
      }
      function wy(n, i, o) {
        if (n = he(n), n && (o || i === r))
          return n.slice(0, Ql(n) + 1);
        if (!n || !(i = ot(i)))
          return n;
        var c = St(n), h = Xl(c, St(i)) + 1;
        return yn(c, 0, h).join("");
      }
      function by(n, i, o) {
        if (n = he(n), n && (o || i === r))
          return n.replace(Js, "");
        if (!n || !(i = ot(i)))
          return n;
        var c = St(n), h = Kl(c, St(i));
        return yn(c, h).join("");
      }
      function Ey(n, i) {
        var o = Me, c = cn;
        if (xe(i)) {
          var h = "separator" in i ? i.separator : h;
          o = "length" in i ? te(i.length) : o, c = "omission" in i ? ot(i.omission) : c;
        }
        n = he(n);
        var m = n.length;
        if (sr(n)) {
          var v = St(n);
          m = v.length;
        }
        if (o >= m)
          return n;
        var y = o - ar(c);
        if (y < 1)
          return c;
        var b = v ? yn(v, 0, y).join("") : n.slice(0, y);
        if (h === r)
          return b + c;
        if (v && (y += b.length - y), Qa(h)) {
          if (n.slice(y).search(h)) {
            var O, N = b;
            for (h.global || (h = ga(h.source, he(vl.exec(h)) + "g")), h.lastIndex = 0; O = h.exec(N); )
              var I = O.index;
            b = b.slice(0, I === r ? y : I);
          }
        } else if (n.indexOf(ot(h), y) != y) {
          var F = b.lastIndexOf(h);
          F > -1 && (b = b.slice(0, F));
        }
        return b + c;
      }
      function Ay(n) {
        return n = he(n), n && Fd.test(n) ? n.replace(pl, Qh) : n;
      }
      var Cy = hr(function(n, i, o) {
        return n + (o ? " " : "") + i.toUpperCase();
      }), no = Uu("toUpperCase");
      function Dc(n, i, o) {
        return n = he(n), i = o ? r : i, i === r ? qh(n) ? np(n) : Dh(n) : n.match(i) || [];
      }
      var Wc = ie(function(n, i) {
        try {
          return st(n, r, i);
        } catch (o) {
          return Ja(o) ? o : new J(o);
        }
      }), Ty = Jt(function(n, i) {
        return pt(i, function(o) {
          o = Bt(o), Kt(n, o, Ka(n[o], n));
        }), n;
      });
      function Sy(n) {
        var i = n == null ? 0 : n.length, o = q();
        return n = i ? _e(n, function(c) {
          if (typeof c[1] != "function")
            throw new gt(u);
          return [o(c[0]), c[1]];
        }) : [], ie(function(c) {
          for (var h = -1; ++h < i; ) {
            var m = n[h];
            if (st(m[0], this, c))
              return st(m[1], this, c);
          }
        });
      }
      function Ly(n) {
        return Qp(vt(n, x));
      }
      function ro(n) {
        return function() {
          return n;
        };
      }
      function Oy(n, i) {
        return n == null || n !== n ? i : n;
      }
      var Ny = Zu(), Iy = Zu(!0);
      function Je(n) {
        return n;
      }
      function io(n) {
        return _u(typeof n == "function" ? n : vt(n, x));
      }
      function ky(n) {
        return wu(vt(n, x));
      }
      function Ry(n, i) {
        return bu(n, vt(i, x));
      }
      var Py = ie(function(n, i) {
        return function(o) {
          return zr(o, n, i);
        };
      }), Fy = ie(function(n, i) {
        return function(o) {
          return zr(n, o, i);
        };
      });
      function so(n, i, o) {
        var c = Re(i), h = Wi(i, c);
        o == null && !(xe(i) && (h.length || !c.length)) && (o = i, i = n, n = this, h = Wi(i, Re(i)));
        var m = !(xe(o) && "chain" in o) || !!o.chain, v = en(n);
        return pt(h, function(y) {
          var b = i[y];
          n[y] = b, v && (n.prototype[y] = function() {
            var O = this.__chain__;
            if (m || O) {
              var N = n(this.__wrapped__), I = N.__actions__ = ze(this.__actions__);
              return I.push({ func: b, args: arguments, thisArg: n }), N.__chain__ = O, N;
            }
            return b.apply(n, dn([this.value()], arguments));
          });
        }), n;
      }
      function By() {
        return Fe._ === this && (Fe._ = lp), this;
      }
      function ao() {
      }
      function My(n) {
        return n = te(n), ie(function(i) {
          return Eu(i, n);
        });
      }
      var $y = Ma(_e), Dy = Ma(Vl), Wy = Ma(la);
      function Uc(n) {
        return Va(n) ? ua(Bt(n)) : mg(n);
      }
      function Uy(n) {
        return function(i) {
          return n == null ? r : Bn(n, i);
        };
      }
      var Hy = ju(), Zy = ju(!0);
      function oo() {
        return [];
      }
      function lo() {
        return !1;
      }
      function Vy() {
        return {};
      }
      function jy() {
        return "";
      }
      function Gy() {
        return !0;
      }
      function Yy(n, i) {
        if (n = te(n), n < 1 || n > $e)
          return [];
        var o = Rt, c = De(n, Rt);
        i = q(i), n -= Rt;
        for (var h = da(c, i); ++o < n; )
          i(o);
        return h;
      }
      function qy(n) {
        return Q(n) ? _e(n, Bt) : lt(n) ? [n] : ze(oc(he(n)));
      }
      function zy(n) {
        var i = ++ap;
        return he(n) + i;
      }
      var Ky = Gi(function(n, i) {
        return n + i;
      }, 0), Xy = $a("ceil"), Jy = Gi(function(n, i) {
        return n / i;
      }, 1), Qy = $a("floor");
      function e_(n) {
        return n && n.length ? Di(n, Je, Ea) : r;
      }
      function t_(n, i) {
        return n && n.length ? Di(n, q(i, 2), Ea) : r;
      }
      function n_(n) {
        return Yl(n, Je);
      }
      function r_(n, i) {
        return Yl(n, q(i, 2));
      }
      function i_(n) {
        return n && n.length ? Di(n, Je, Sa) : r;
      }
      function s_(n, i) {
        return n && n.length ? Di(n, q(i, 2), Sa) : r;
      }
      var a_ = Gi(function(n, i) {
        return n * i;
      }, 1), o_ = $a("round"), l_ = Gi(function(n, i) {
        return n - i;
      }, 0);
      function u_(n) {
        return n && n.length ? fa(n, Je) : 0;
      }
      function c_(n, i) {
        return n && n.length ? fa(n, q(i, 2)) : 0;
      }
      return p.after = kv, p.ary = yc, p.assign = _0, p.assignIn = kc, p.assignInWith = ss, p.assignWith = x0, p.at = w0, p.before = _c, p.bind = Ka, p.bindAll = Ty, p.bindKey = xc, p.castArray = Vv, p.chain = gc, p.chunk = Qg, p.compact = em, p.concat = tm, p.cond = Sy, p.conforms = Ly, p.constant = ro, p.countBy = uv, p.create = b0, p.curry = wc, p.curryRight = bc, p.debounce = Ec, p.defaults = E0, p.defaultsDeep = A0, p.defer = Rv, p.delay = Pv, p.difference = nm, p.differenceBy = rm, p.differenceWith = im, p.drop = sm, p.dropRight = am, p.dropRightWhile = om, p.dropWhile = lm, p.fill = um, p.filter = fv, p.flatMap = pv, p.flatMapDeep = gv, p.flatMapDepth = mv, p.flatten = fc, p.flattenDeep = cm, p.flattenDepth = fm, p.flip = Fv, p.flow = Ny, p.flowRight = Iy, p.fromPairs = dm, p.functions = I0, p.functionsIn = k0, p.groupBy = vv, p.initial = pm, p.intersection = gm, p.intersectionBy = mm, p.intersectionWith = vm, p.invert = P0, p.invertBy = F0, p.invokeMap = _v, p.iteratee = io, p.keyBy = xv, p.keys = Re, p.keysIn = Xe, p.map = Qi, p.mapKeys = M0, p.mapValues = $0, p.matches = ky, p.matchesProperty = Ry, p.memoize = ts, p.merge = D0, p.mergeWith = Rc, p.method = Py, p.methodOf = Fy, p.mixin = so, p.negate = ns, p.nthArg = My, p.omit = W0, p.omitBy = U0, p.once = Bv, p.orderBy = wv, p.over = $y, p.overArgs = Mv, p.overEvery = Dy, p.overSome = Wy, p.partial = Xa, p.partialRight = Ac, p.partition = bv, p.pick = H0, p.pickBy = Pc, p.property = Uc, p.propertyOf = Uy, p.pull = wm, p.pullAll = hc, p.pullAllBy = bm, p.pullAllWith = Em, p.pullAt = Am, p.range = Hy, p.rangeRight = Zy, p.rearg = $v, p.reject = Cv, p.remove = Cm, p.rest = Dv, p.reverse = qa, p.sampleSize = Sv, p.set = V0, p.setWith = j0, p.shuffle = Lv, p.slice = Tm, p.sortBy = Iv, p.sortedUniq = Rm, p.sortedUniqBy = Pm, p.split = py, p.spread = Wv, p.tail = Fm, p.take = Bm, p.takeRight = Mm, p.takeRightWhile = $m, p.takeWhile = Dm, p.tap = ev, p.throttle = Uv, p.thru = Ji, p.toArray = Oc, p.toPairs = Fc, p.toPairsIn = Bc, p.toPath = qy, p.toPlainObject = Ic, p.transform = G0, p.unary = Hv, p.union = Wm, p.unionBy = Um, p.unionWith = Hm, p.uniq = Zm, p.uniqBy = Vm, p.uniqWith = jm, p.unset = Y0, p.unzip = za, p.unzipWith = pc, p.update = q0, p.updateWith = z0, p.values = mr, p.valuesIn = K0, p.without = Gm, p.words = Dc, p.wrap = Zv, p.xor = Ym, p.xorBy = qm, p.xorWith = zm, p.zip = Km, p.zipObject = Xm, p.zipObjectDeep = Jm, p.zipWith = Qm, p.entries = Fc, p.entriesIn = Bc, p.extend = kc, p.extendWith = ss, so(p, p), p.add = Ky, p.attempt = Wc, p.camelCase = ey, p.capitalize = Mc, p.ceil = Xy, p.clamp = X0, p.clone = jv, p.cloneDeep = Yv, p.cloneDeepWith = qv, p.cloneWith = Gv, p.conformsTo = zv, p.deburr = $c, p.defaultTo = Oy, p.divide = Jy, p.endsWith = ty, p.eq = Ot, p.escape = ny, p.escapeRegExp = ry, p.every = cv, p.find = dv, p.findIndex = uc, p.findKey = C0, p.findLast = hv, p.findLastIndex = cc, p.findLastKey = T0, p.floor = Qy, p.forEach = mc, p.forEachRight = vc, p.forIn = S0, p.forInRight = L0, p.forOwn = O0, p.forOwnRight = N0, p.get = eo, p.gt = Kv, p.gte = Xv, p.has = R0, p.hasIn = to, p.head = dc, p.identity = Je, p.includes = yv, p.indexOf = hm, p.inRange = J0, p.invoke = B0, p.isArguments = Dn, p.isArray = Q, p.isArrayBuffer = Jv, p.isArrayLike = Ke, p.isArrayLikeObject = Ee, p.isBoolean = Qv, p.isBuffer = _n, p.isDate = e0, p.isElement = t0, p.isEmpty = n0, p.isEqual = r0, p.isEqualWith = i0, p.isError = Ja, p.isFinite = s0, p.isFunction = en, p.isInteger = Cc, p.isLength = rs, p.isMap = Tc, p.isMatch = a0, p.isMatchWith = o0, p.isNaN = l0, p.isNative = u0, p.isNil = f0, p.isNull = c0, p.isNumber = Sc, p.isObject = xe, p.isObjectLike = we, p.isPlainObject = ti, p.isRegExp = Qa, p.isSafeInteger = d0, p.isSet = Lc, p.isString = is, p.isSymbol = lt, p.isTypedArray = gr, p.isUndefined = h0, p.isWeakMap = p0, p.isWeakSet = g0, p.join = ym, p.kebabCase = iy, p.last = _t, p.lastIndexOf = _m, p.lowerCase = sy, p.lowerFirst = ay, p.lt = m0, p.lte = v0, p.max = e_, p.maxBy = t_, p.mean = n_, p.meanBy = r_, p.min = i_, p.minBy = s_, p.stubArray = oo, p.stubFalse = lo, p.stubObject = Vy, p.stubString = jy, p.stubTrue = Gy, p.multiply = a_, p.nth = xm, p.noConflict = By, p.noop = ao, p.now = es, p.pad = oy, p.padEnd = ly, p.padStart = uy, p.parseInt = cy, p.random = Q0, p.reduce = Ev, p.reduceRight = Av, p.repeat = fy, p.replace = dy, p.result = Z0, p.round = o_, p.runInContext = w, p.sample = Tv, p.size = Ov, p.snakeCase = hy, p.some = Nv, p.sortedIndex = Sm, p.sortedIndexBy = Lm, p.sortedIndexOf = Om, p.sortedLastIndex = Nm, p.sortedLastIndexBy = Im, p.sortedLastIndexOf = km, p.startCase = gy, p.startsWith = my, p.subtract = l_, p.sum = u_, p.sumBy = c_, p.template = vy, p.times = Yy, p.toFinite = tn, p.toInteger = te, p.toLength = Nc, p.toLower = yy, p.toNumber = xt, p.toSafeInteger = y0, p.toString = he, p.toUpper = _y, p.trim = xy, p.trimEnd = wy, p.trimStart = by, p.truncate = Ey, p.unescape = Ay, p.uniqueId = zy, p.upperCase = Cy, p.upperFirst = no, p.each = mc, p.eachRight = vc, p.first = dc, so(p, function() {
        var n = {};
        return Pt(p, function(i, o) {
          pe.call(p.prototype, o) || (n[o] = i);
        }), n;
      }(), { chain: !1 }), p.VERSION = s, pt(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(n) {
        p[n].placeholder = p;
      }), pt(["drop", "take"], function(n, i) {
        oe.prototype[n] = function(o) {
          o = o === r ? 1 : Oe(te(o), 0);
          var c = this.__filtered__ && !i ? new oe(this) : this.clone();
          return c.__filtered__ ? c.__takeCount__ = De(o, c.__takeCount__) : c.__views__.push({
            size: De(o, Rt),
            type: n + (c.__dir__ < 0 ? "Right" : "")
          }), c;
        }, oe.prototype[n + "Right"] = function(o) {
          return this.reverse()[n](o).reverse();
        };
      }), pt(["filter", "map", "takeWhile"], function(n, i) {
        var o = i + 1, c = o == Ze || o == it;
        oe.prototype[n] = function(h) {
          var m = this.clone();
          return m.__iteratees__.push({
            iteratee: q(h, 3),
            type: o
          }), m.__filtered__ = m.__filtered__ || c, m;
        };
      }), pt(["head", "last"], function(n, i) {
        var o = "take" + (i ? "Right" : "");
        oe.prototype[n] = function() {
          return this[o](1).value()[0];
        };
      }), pt(["initial", "tail"], function(n, i) {
        var o = "drop" + (i ? "" : "Right");
        oe.prototype[n] = function() {
          return this.__filtered__ ? new oe(this) : this[o](1);
        };
      }), oe.prototype.compact = function() {
        return this.filter(Je);
      }, oe.prototype.find = function(n) {
        return this.filter(n).head();
      }, oe.prototype.findLast = function(n) {
        return this.reverse().find(n);
      }, oe.prototype.invokeMap = ie(function(n, i) {
        return typeof n == "function" ? new oe(this) : this.map(function(o) {
          return zr(o, n, i);
        });
      }), oe.prototype.reject = function(n) {
        return this.filter(ns(q(n)));
      }, oe.prototype.slice = function(n, i) {
        n = te(n);
        var o = this;
        return o.__filtered__ && (n > 0 || i < 0) ? new oe(o) : (n < 0 ? o = o.takeRight(-n) : n && (o = o.drop(n)), i !== r && (i = te(i), o = i < 0 ? o.dropRight(-i) : o.take(i - n)), o);
      }, oe.prototype.takeRightWhile = function(n) {
        return this.reverse().takeWhile(n).reverse();
      }, oe.prototype.toArray = function() {
        return this.take(Rt);
      }, Pt(oe.prototype, function(n, i) {
        var o = /^(?:filter|find|map|reject)|While$/.test(i), c = /^(?:head|last)$/.test(i), h = p[c ? "take" + (i == "last" ? "Right" : "") : i], m = c || /^find/.test(i);
        h && (p.prototype[i] = function() {
          var v = this.__wrapped__, y = c ? [1] : arguments, b = v instanceof oe, O = y[0], N = b || Q(v), I = function(ae) {
            var ce = h.apply(p, dn([ae], y));
            return c && F ? ce[0] : ce;
          };
          N && o && typeof O == "function" && O.length != 1 && (b = N = !1);
          var F = this.__chain__, V = !!this.__actions__.length, z = m && !F, re = b && !V;
          if (!m && N) {
            v = re ? v : new oe(this);
            var K = n.apply(v, y);
            return K.__actions__.push({ func: Ji, args: [I], thisArg: r }), new mt(K, F);
          }
          return z && re ? n.apply(this, y) : (K = this.thru(I), z ? c ? K.value()[0] : K.value() : K);
        });
      }), pt(["pop", "push", "shift", "sort", "splice", "unshift"], function(n) {
        var i = Ai[n], o = /^(?:push|sort|unshift)$/.test(n) ? "tap" : "thru", c = /^(?:pop|shift)$/.test(n);
        p.prototype[n] = function() {
          var h = arguments;
          if (c && !this.__chain__) {
            var m = this.value();
            return i.apply(Q(m) ? m : [], h);
          }
          return this[o](function(v) {
            return i.apply(Q(v) ? v : [], h);
          });
        };
      }), Pt(oe.prototype, function(n, i) {
        var o = p[i];
        if (o) {
          var c = o.name + "";
          pe.call(cr, c) || (cr[c] = []), cr[c].push({ name: i, func: o });
        }
      }), cr[ji(r, U).name] = [{
        name: "wrapper",
        func: r
      }], oe.prototype.clone = Ap, oe.prototype.reverse = Cp, oe.prototype.value = Tp, p.prototype.at = tv, p.prototype.chain = nv, p.prototype.commit = rv, p.prototype.next = iv, p.prototype.plant = av, p.prototype.reverse = ov, p.prototype.toJSON = p.prototype.valueOf = p.prototype.value = lv, p.prototype.first = p.prototype.head, Hr && (p.prototype[Hr] = sv), p;
    }, or = rp();
    In ? ((In.exports = or)._ = or, ia._ = or) : Fe._ = or;
  }).call(Wn);
})(Es, Es.exports);
var Jo = Es.exports;
const Ie = /* @__PURE__ */ $o(Jo);
const Qo = zo({
  fullWidth: _r().default(!1),
  description: Kn().optional()
});
class kt {
  constructor(t, r, s) {
    /**
     * this is a refrance of the Data object
     */
    B(this, "data");
    /**
     * This is the property of the current field. a property is a part that
     * represents the field in the data object that has all the data
     */
    B(this, "property");
    /**
     * This is the params of the guifier object. here you can find all the configurations of the user
     */
    B(this, "params");
    /**
     * This is the keyName of the current field. if the field is an object property
     * it will have a string key and if its an array key its going to have a number key
     */
    B(this, "keyName");
    /**
     * every field has two colors theme to make them more visible when they are nested
     * this property decides which color theme to use
     */
    B(this, "showSecondaryColors", !1);
    /**
     * The localParam property is the this.property._params
     */
    B(this, "localParam");
    /**
     * this property tells if the current field is a big field (if it requires more than 45px height) like object, array or a rich text field
     */
    B(this, "isCollapsible", !1);
    this.params = s, this.property = t, this.data = r, this.keyName = t._key, this.property._params === void 0 && (this.property._params = {}), this.localParam = Qo.parse(this.property._params);
  }
  /**
   * This function is responsible for setting the new value to the property
   */
  setValue(t) {
    this.property._value = t, this.params.onChange !== void 0 && this.params.onChange();
  }
  /**
   * This function is responsible for drawing the collapsible fields wihtout a container.
   *  This function needs to be overridden by a child field class and it created to be used
   * with arrays containers
   */
  drawCollapsibleFieldContentWithoutContainer() {
    const t = document.createElement("p");
    return t.innerHTML = "drawCollapsibleFieldContentWithoutContainer method is not defined in this field", t;
  }
}
/**
 * this is name of the field internaly
 */
B(kt, "fieldName", "field"), /**
 * this is the label name thats shown for users
 */
B(kt, "fieldLabelName", "Field"), /**
 * this is the icon thats shown for users
 */
B(kt, "fieldIcon", ""), /**
 * this the flag that determens if the field is Base or a CustomField
 */
B(kt, "isBaseField", !0);
const sl = class extends kt {
  constructor() {
    super(...arguments);
    /**
     * this property tells if the current field is a big field like object, array or a rich text field
     */
    B(this, "isCollapsible", !0);
    /**
     * this property sets the space an object will take in a grid
     */
    B(this, "gridSpace", 2);
    /**
     * this property tells if the current field is a big field like object, array or a rich text field
     */
    B(this, "containerLength", 0);
    /**
     * this property tells if the current field is a big field like object, array or a rich text field
     */
    B(this, "contentBody", document.createElement("div"));
  }
  /**
   * This method is responsible for drawing the body when the container is empty
   *
   * @returns {HTMLElement} html element object
   */
  drawEmptyContent(r = !1) {
    const s = r ? "Elements" : "Properties", a = r ? "Element" : "Property", l = document.createElement("div");
    l.classList.add("guifierEmptyContentContianer");
    const u = document.createElement("div");
    u.classList.add("emptyContentContianerWrapper"), l.append(u);
    const f = document.createElement("h2");
    f.classList.add("guifierEmptyTitle"), f.append(`No ${s}`), u.append(f);
    const d = document.createElement("p");
    d.classList.add("guifierEmptyParagraph"), d.append(`You don’t have any ${s} yet. Click the button below to add one.`), u.append(d);
    const g = document.createElement("div");
    return g.classList.add("guifierEmptyButton"), g.append(`Add ${a}`), g.append(this.drawAddButton()), g.addEventListener("click", () => {
      Promise.resolve().then(async () => {
        r ? await this.letUserAddElement() : await this.letUserAddProperty();
      }).catch((_) => {
        console.error(_);
      });
    }), u.append(g), l;
  }
  /**
   * this method checks if the current container is the
   * first container and its not a nested container
   *
   * @returns {HTMLElement} html element object
   */
  containerInFirstLevel() {
    return this.property._path.length === 1;
  }
  /**
   * This function is responsible for drawing the container in an object container
   *
   * @returns {HTMLElement} html element object
   */
  drawContainer() {
    const r = document.createElement("div");
    r.classList.add("guifierContainer"), r.classList.add("guifierObjectFieldContainer"), r.style.gridColumn = `span ${this.gridSpace}`, this.showSecondaryColors ? r.classList.add("guifierSecondaryBgColor") : r.classList.add("guifierPrimaryBgColor"), r.append(this.drawHeader());
    const s = r.querySelector(".guifierContainerHeaderButtons");
    return s !== null && sl.showHeaderButtonsWhenHovering(s, r), r;
  }
  /**
   * This function will draw the container with its contents
   *
   * @returns {HTMLElement} html element object
   */
  drawContentWithContainer() {
    const r = this.drawContainer();
    return r.append(this.draw()), r;
  }
  /**
   * This function is responsible for drawing the header for a container field
   *
   * @returns {HTMLElement} html element object
   */
  drawHeader() {
    const r = document.createElement("div");
    r.classList.add("guifierContainerHeader"), r.classList.add("guifierPrimaryBottomBorder");
    const s = this.property._key, a = document.createElement("div");
    this.property._path.length !== 1 && a.append(bt(this.property._valueType === "array" ? "data_array" : "data_object")), a.classList.add("guifierContainerHeaderKeyName"), a.append(this.property._path.length === 1 ? this.params.rootContainerName : s.toString()), r.append(a), Jo.isEmpty(this.property._params.description) || (a.append(Xf()), Jf(this, r));
    const l = this.drawContainerHeaderButtons();
    return r.append(l), r;
  }
  /**
   * This function is responsible for drawing the header part where we add buttons
   *
   * @returns {HTMLElement} html element object
   */
  drawContainerHeaderButtons(r = !1) {
    const s = document.createElement("div");
    return s.classList.add("guifierContainerHeaderButtons"), this.params.readOnlyMode || (this.containerInFirstLevel() && this.params.fullScreen && s.append(this.drawFullScreenButton()), this.containerInFirstLevel() || s.append(this.drawDeleteButton()), s.append(this.drawAddButton())), this.containerInFirstLevel() || s.append(this.drawCollapseButton(r)), s;
  }
  /**
   * This function is responsible for adding the effect of showing buttons when hovering on the object
   *
   * @returns {HTMLElement} html element object
   */
  static showHeaderButtonsWhenHovering(r, s, a = !1) {
    let l;
    s.addEventListener("mouseenter", () => {
      if (r !== void 0) {
        const u = a ? Array.from(r.children) : Array.from(r.children).reverse(), f = 50;
        clearTimeout(l), u.forEach((d, g) => {
          d.innerHTML !== "expand_less" && (l = setTimeout(() => {
            r.style.pointerEvents = "all", d.classList.add("guifierShowElementWithAnimation");
          }, f * g));
        });
      }
    }), s.addEventListener("mouseleave", () => {
      if (r !== void 0) {
        const u = a ? Array.from(r.children).reverse() : Array.from(r.children), f = 100;
        clearTimeout(l), u.forEach((d, g) => {
          d.innerHTML !== "expand_less" && (l = setTimeout(() => {
            r.style.pointerEvents = "none", d.classList.remove("guifierShowElementWithAnimation");
          }, f * g));
        });
      }
    });
  }
  /**
   * This function is responsible for drawing the collapse button for the container field
   *
   * @returns {HTMLElement} html element object
   */
  drawCollapseButton(r = !1) {
    const s = bt("expand_less");
    return s.classList.add("guifierContainerCollapseButton"), r ? s.classList.add("guifierRotate") : s.classList.remove("guifierRotate"), s;
  }
  /**
   * This function is responsible for drawing the delete button for the container field
   *
   * @returns {HTMLElement} html element object
   */
  drawDeleteButton() {
    return bt("delete");
  }
  /**
   * This function is responsible for drawing the add button for the container field
   *
   * @returns {HTMLElement} html element object
   */
  drawAddButton() {
    return bt("add");
  }
  /**
   * This function is responsible for drawing the fullScreen button for the container field
   *
   * @returns {HTMLElement} html element object
   */
  drawFullScreenButton() {
    const r = bt("fullscreen"), s = bt("fullscreen_exit");
    s.setAttribute("style", "display: none");
    const a = document.createElement("span");
    a.style.height = "25px", a.append(r), a.append(s);
    const l = document.querySelector(this.params.elementSelector);
    return a.addEventListener("click", () => {
      r.getAttribute("style") !== null ? (s.setAttribute("style", "display: none"), r.removeAttribute("style"), document.exitFullscreen(), l.removeAttribute("style")) : (r.setAttribute("style", "display: none"), s.removeAttribute("style"), l == null || l.requestFullscreen(), l.setAttribute("style", "padding: 2vw"));
    }), document.addEventListener("fullscreenchange", () => {
      document.fullscreenElement === null && (s.setAttribute("style", "display: none"), r.removeAttribute("style"), l.removeAttribute("style"));
    }), a;
  }
};
let wn = sl;
/**
 * this is name of the field internaly
 */
B(wn, "fieldName", "container"), /**
 * this is the label name thats shown for users
 */
B(wn, "fieldLabelName", "Container");
class Ws {
  constructor(t) {
    /**
     * dialog Params
     */
    B(this, "params");
    /**
     * This is the data that will be used to instantiate the guifier obejct
     * to draw the second page that will be used to fill the meta data of
     * the field that will be created
     */
    B(this, "data");
    /**
     * This is the data that will be used to instantiate the guifier obejct
     * to draw the second page that will be used to fill the meta data of
     * the field that will be created
     */
    B(this, "guifier", null);
    /**
     * This is the body container element of the dialog element
     */
    B(this, "dialogContainerBody", document.createElement("div"));
    /**
     * This is the whole dialog element
     */
    B(this, "dialogElement", document.createElement("div"));
    /**
     * This is the back arrow html element
     */
    B(this, "guifierGeneratedContent", document.createElement("div"));
    /**
     * This is the Cancel Button html element
     */
    B(this, "cancelButton", document.createElement("div"));
    /**
     * This is the Confirm Button html element
     */
    B(this, "confirmButton", document.createElement("div"));
    this.params = t, this.buildGuifierDialog(), this.hideDialog();
  }
  /**
   * This function shows dialog and returns data
   * @returns the data of click on confirm or returns null if clicked on cancel
   */
  async get(t) {
    return this.data = t, this.guifierGeneratedContent = this.drawGuifierGeneratedContent(this.data), this.dialogContainerBody.append(this.guifierGeneratedContent), this.showDialog(), await new Promise((r) => {
      this.confirmButton.addEventListener("click", () => {
        var a;
        const s = (a = this.guifier) == null ? void 0 : a.getData(et.Js);
        for (const l in s) {
          const u = s[l];
          if (Ie.isEmpty(u)) {
            alert("Please ensure that all required fields have been completed.");
            return;
          }
        }
        r(s), this.hideDialog(), setTimeout(() => {
          this.removeDialog();
        }, 150);
      }), this.cancelButton.addEventListener("click", () => {
        r(null), this.hideDialog(), setTimeout(() => {
          this.removeDialog();
        }, 150);
      });
    });
  }
  /**
   * This is the function resposible to show the dialog element in the
   * the selected element with the chosen Id
   */
  buildGuifierDialog() {
    const t = document.querySelector(this.params.elementSelector);
    t !== null && t.append(this.drawdialog());
  }
  /**
   * This function is responsible for drawing the dialog element
   */
  drawdialog() {
    const t = document.createElement("div");
    return t.classList.add("guifierDialogBackgroundContainer"), this.dialogElement = t, t.append(this.drawDialogContainer()), t.addEventListener("click", (r) => {
      r.target.classList.contains("guifierDialogBackgroundContainer") && (this.hideDialog(), setTimeout(() => {
        this.removeDialog();
      }, 150));
    }), t;
  }
  /**
   * This function is responsible for showing the dialog
   */
  showDialog() {
    setTimeout(() => {
      this.dialogElement.classList.remove("guifierOpacityZero");
    }, 0);
  }
  /**
   * This function is responsible for hiding the dialog
   */
  hideDialog() {
    this.dialogElement.classList.add("guifierOpacityZero"), this.clearGuifierGeneratedContent();
  }
  /**
   * This function is responsible for removing the dialog
   */
  removeDialog() {
    var t, r;
    (r = (t = this.dialogContainerBody.parentElement) == null ? void 0 : t.parentElement) == null || r.remove();
  }
  /**
   * This function is responsible for drawing the dialog container element
   */
  drawDialogContainer() {
    const t = document.createElement("div");
    t.classList.add("guifierDialogContainer");
    const r = document.createElement("div");
    r.classList.add("guifierDialogContainerTitle"), r.append(this.params.dialogTitle), r.append(bt("add")), t.append(r);
    const s = document.createElement("div");
    s.classList.add("guifierDialogContainerBody"), this.dialogContainerBody = s, t.append(this.dialogContainerBody);
    const a = document.createElement("div");
    a.classList.add("guifierDialogFooter");
    const l = document.createElement("div");
    l.classList.add("guifierDialogCancelButton"), l.classList.add("guifierDialogButton"), l.append("Cancel"), this.cancelButton = l, a.append(l);
    const u = document.createElement("div");
    return u.classList.add("guifierDialogConfirmButton"), u.classList.add("guifierDialogButton"), u.append("Confirm"), this.confirmButton = u, a.append(u), t.append(a), t;
  }
  /**
   * This function is responsible for drawing a grid element
   */
  drawGuifierGeneratedContent(t) {
    const r = {
      elementSelector: this.params.elementSelector,
      data: t,
      dataType: et.Js,
      withoutContainer: !0,
      flipBackgroundColors: !0,
      expandFieldsToFullWidth: !0,
      readOnlyMode: !0
    };
    this.guifier = new bE(r);
    const s = this.guifier.getGeneratedHtmlElement(), a = document.createElement("div");
    return a.classList.add("guifierGeneratedContent"), a.append(s), a;
  }
  /**
   * This function clears the guifierGeneratedContent element
   */
  clearGuifierGeneratedContent() {
    this.guifierGeneratedContent.innerHTML = "";
  }
  /**
   * This function will show a dialog and return its data
   *
   * @param {any} data is the data you want the user to set in the dialog
   * @param {DialogParameters} params is the parameter of the dialog
   * @returns the data of click on confirm or returns null if clicked on cancel
   */
  static async get(t, r) {
    const s = r;
    return await new Ws(s).get(t);
  }
}
const Ns = class extends wn {
  /**
   * This function validates the _params of the property object
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property object
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return Ns.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the HTMLElement object
   *
   * @returns {HTMLElement} html element object
   */
  draw() {
    const t = document.createElement("div");
    t.classList.add("guifierObjectContainerbody"), this.containerInFirstLevel() && (t.style.overflowY = "auto");
    const r = this.property._value;
    if (this.containerLength = Object.keys(r).length, Ie.isEmpty(r))
      t.append(this.drawEmptyContent(!1));
    else
      for (const s in r) {
        const a = r[s], l = this.drawProperty(a);
        t.append(l);
      }
    return this.contentBody = t, t;
  }
  /**
   * This function is responsible for drawing a property of the object
   */
  drawProperty(t) {
    const r = el(t, this.data, this.params);
    let s;
    if (r.isCollapsible) {
      r.showSecondaryColors = !this.showSecondaryColors;
      const a = r.drawContentWithContainer(), l = a.children[0].children[1];
      Ns.addingEventListenerForHeaderButtons(l, this, r), s = a;
    } else {
      const a = document.createElement("div");
      a.classList.add("guifierObjectFieldContainer"), r.localParam.fullWidth ? a.style.gridColumn = "span 2" : a.style.gridColumn = "span 1", this.params.expandFieldsToFullWidth && (a.style.gridColumn = "span 2");
      const l = document.createElement("div");
      l.classList.add("guifierObjectLabelContainer");
      const u = document.createElement("div");
      u.classList.add("guifierObjectLabelTextPart");
      const f = t._key;
      u.append(f.toString()), l.append(u);
      const d = document.createElement("div");
      d.classList.add("guifierObjectLabelButtonsPart");
      const g = this.drawFieldButtons(r, a);
      wn.showHeaderButtonsWhenHovering(g, a, !0), d.append(g), l.append(d), a.append(l), r.showSecondaryColors = this.showSecondaryColors;
      const _ = r.draw(), x = document.createElement("div");
      x.classList.add("guifierObjectfieldInnerContainer"), x.append(_), a.append(x), Jo.isEmpty(r.property._params.description) || (u.append(Xf()), Jf(r, a)), s = a;
    }
    return s;
  }
  /**
   * This function is responsible for drawing the object without a container. used for objects in arrays
   */
  drawCollapsibleFieldContentWithoutContainer() {
    const t = this.draw();
    return t.style.padding = "0", t;
  }
  /**
   * This function is responsible for drawing buttons that edits a field in an object container
   */
  drawFieldButtons(t, r) {
    const s = document.createElement("div");
    s.classList.add("fieldButtons"), this.params.readOnlyMode && (s.style.display = "none");
    const a = bt("delete");
    return a.addEventListener("click", () => {
      this.deleteProperty(t.keyName), r.remove();
    }), s.append(a), s;
  }
  /**
   * This function is responsible of adding event listeners to the header buttons of an object container
   */
  static addingEventListenerForHeaderButtons(t, r, s) {
    t !== null && Array.from(t.children).forEach((l) => {
      switch (l.innerHTML) {
        case "expand_less":
          l.addEventListener("click", () => {
            var d, g, _;
            const u = (g = (d = l.parentElement) == null ? void 0 : d.parentElement) == null ? void 0 : g.nextElementSibling;
            ((_ = l.parentElement) == null ? void 0 : _.parentElement).classList.toggle("guifierPrimaryBottomBorder"), l.classList.toggle("guifierRotate"), u.classList.toggle("guifierNoneDisplay");
          });
          break;
        case "delete":
          l.addEventListener("click", () => {
            r.deleteProperty(s.keyName);
            const f = s.contentBody.closest(".guifierObjectFieldContainer");
            f == null || f.remove();
          });
          break;
        case "add":
          l.addEventListener("click", () => {
            Promise.resolve().then(async () => {
              s.getFieldLabelName() === "Object" ? await s.letUserAddProperty() : s.getFieldLabelName() === "Array" && await s.letUserAddElement();
            }).catch((u) => {
              console.error(u);
            });
          });
          break;
      }
    });
  }
  /**
   * This function is responsible for deleting an object property in the ui
   */
  deleteProperty(t) {
    const r = Ie.cloneDeep(this.property._path);
    r.push(t);
    const s = r;
    this.data.removeData(s), this.containerLength--, this.containerLength === 0 && this.contentBody.append(this.drawEmptyContent(!1)), this.params.onChange !== void 0 && this.params.onChange();
  }
  /**
   * This function is responsible for adding a property in an object container
   */
  addProperty(t) {
    t = Ie.cloneDeep(t), this.data.addProperty(t), this.containerLength === 0 && (this.contentBody.innerHTML = ""), this.contentBody.append(this.drawProperty(t)), this.containerLength++, this.params.onChange !== void 0 && this.params.onChange();
  }
  /**
   * This function lets the user add a property to an object container by showing a prompt to him
   */
  async letUserAddProperty() {
    const t = [];
    for (const l in kr) {
      const u = kr[l];
      u.staticObject.isBaseField && t.push({
        icon: u.staticObject.fieldIcon,
        text: u.staticObject.fieldLabelName,
        value: u.staticObject.fieldName
      });
    }
    const r = {
      "Field Name": "",
      "Field Type": {
        _fieldType: "cardSelect",
        _params: {
          cards: t
        },
        _value: ""
      }
    }, s = {
      elementSelector: this.params.elementSelector + " > div",
      dialogTitle: "New Field"
    }, a = await Ws.get(r, s);
    if (a !== null) {
      const l = {
        _path: [...this.property._path, a["Field Name"]],
        _key: a["Field Name"],
        _valueType: wt(As(a["Field Type"])),
        _value: As(a["Field Type"]),
        // FIXME: this function here adds a huge object instead of just returning an empty object when creating two objects in the gui
        _fieldType: a["Field Type"],
        _rules: void 0,
        _params: void 0
      };
      this.addProperty(l);
    }
  }
};
let xn = Ns;
/**
 * this is name of the field internaly
 */
B(xn, "fieldName", "object"), B(xn, "fieldLabelName", "Object"), /**
 * this is the icon thats shown for users
 */
B(xn, "fieldIcon", "data_object");
const Is = class extends wn {
  constructor() {
    super(...arguments);
    B(this, "numberOfLevels", 0);
    B(this, "contentBody", document.createElement("div"));
  }
  /**
   * This function validates the _params of the property array
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property array
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return Is.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the HTMLElement array
   *
   * @returns {HTMLElement} html element array
   */
  draw() {
    const r = document.createElement("div");
    r.classList.add("guifierArrayContainerbody"), this.containerInFirstLevel() && (r.style.overflowY = "auto");
    const s = this.property._value;
    if (Ie.isEmpty(s)) {
      r.append(this.drawEmptyContent(!0));
      const a = r.querySelector(".guifierEmptyContentContianer");
      a == null || a.prepend(this.drawArrayLevels(this.numberOfLevels - 1));
    } else
      for (const a in s) {
        const l = s[a];
        r.append(this.drawElement(l)), this.containerLength++;
      }
    return this.contentBody = r, r;
  }
  /**
   * This function is responsible for drawing an array element
   *
   * @returns {HTMLElement} html element object
   */
  drawElement(r) {
    const s = document.createElement("div");
    s.classList.add("guifierArrayFieldContainer"), s.dataset.elementIndex = `${this.containerLength}`, df(this.containerLength) && s.classList.add("guifierOddBackground"), s.append(this.drawArrayLevels(this.numberOfLevels));
    const a = r._key, l = document.createElement("div");
    if (l.classList.add("guifierArrayLabelContainer"), this.numberOfLevels > 0) {
      l.classList.add("guifierArrayLabelContainerForUpperLevel");
      const x = document.createElement("div");
      x.classList.add("guifierArrayLabelLineForUpperLevel"), l.append(x);
    }
    const u = document.createElement("div");
    u.classList.add("guifierArrayIndexLabel"), this.showSecondaryColors ? u.classList.add("guifierPrimaryBgColor") : u.classList.add("guifierSecondaryBgColor"), u.innerHTML = `${a + 1}`, l.append(u), s.append(l);
    const f = document.createElement("div");
    f.classList.add("guifierArrayfieldInnerContainer");
    const d = el(r, this.data, this.params);
    let g;
    if (d.isCollapsible ? (g = this.drawCollapsibleArrayElement(d), s.classList.add("guifierContainerFieldType")) : (d.showSecondaryColors = this.showSecondaryColors, g = d.draw(), s.classList.add("guifierBaseFieldType")), f.append(g), s.append(f), d.isCollapsible) {
      const x = document.createDocumentFragment();
      x.append(s), this.containerLength === this.property._value.length - 1 ? x.append(this.drawCollapsibleArrayElementContent(d, !0)) : x.append(this.drawCollapsibleArrayElementContent(d));
      const T = s.querySelector(".guifierContainerHeaderButtons");
      return wn.showHeaderButtonsWhenHovering(T, s), Is.addingEventListenerForHeaderButtons(T, this, d), x;
    }
    const _ = this.drawArrayFieldDeleteButton();
    return s.append(_), s;
  }
  /**
   * This function is responsible for drawing the button in the array field element
   *
   * @returns {HTMLElement} html element object
   */
  drawArrayFieldDeleteButton() {
    const r = this.drawDeleteButton();
    return this.params.readOnlyMode && (r.style.display = "none"), r.classList.add("guifierArrayFieldDeleteButton"), r.addEventListener("click", () => {
      var a;
      const s = parseInt((a = r.parentElement) == null ? void 0 : a.dataset.elementIndex);
      this.removeElement(s);
    }), r;
  }
  /**
   * This function is responsible for drawing an array element that is Collapsible
   *
   * @returns {HTMLElement} html element object
   */
  drawCollapsibleArrayElement(r) {
    const s = document.createElement("div");
    s.classList.add("guifierArrayCollapsibleElement");
    const a = document.createElement("div");
    a.classList.add("guifierFieldLabelName"), a.innerHTML = r.getFieldLabelName(), s.append(a);
    const l = r.drawContainerHeaderButtons(!0);
    return s.append(l), s;
  }
  /**
   * This function is responsible for drawing the content of an array element that is Collapsible
   *
   * @returns {HTMLElement} html element object
   */
  drawCollapsibleArrayElementContent(r, s = !1) {
    const a = document.createElement("div");
    if (a.classList.add("guifierCollapsibleElementContent"), this.showSecondaryColors ? a.classList.add("guifierSecondaryBgColor") : a.classList.add("guifierPrimaryBgColor"), s && (a.style.borderRadius = "0 0 7.5px 7.5px"), r.showSecondaryColors = this.showSecondaryColors, r.getFieldLabelName() !== "Array") {
      a.append(this.drawArrayLevels(this.numberOfLevels));
      const l = document.createElement("div");
      l.classList.add("guifierCollapsibleElementInnerContentContainer"), l.append(r.drawCollapsibleFieldContentWithoutContainer()), a.append(l);
    } else {
      const l = r;
      l.numberOfLevels = this.numberOfLevels + 1, a.append(l.draw());
    }
    return a.classList.add("guifierNoneDisplay"), a;
  }
  /**
   * This function is responsible for drawing levels line for the array
   *
   * @returns {HTMLElement} html element object
   */
  drawArrayLevels(r) {
    const s = document.createElement("div");
    s.classList.add("guifierArrayLevelsContainer"), r === 0 && r++;
    for (let a = 0; a < r; a++) {
      const l = document.createElement("div");
      l.classList.add("guifierArrayLevelElement"), s.append(l);
    }
    return s;
  }
  /**
   * This function is responsible adding event listeners to the header buttons of an object container
   */
  static addingEventListenerForHeaderButtons(r, s, a) {
    r !== null && Array.from(r.children).forEach((u) => {
      switch (u.innerHTML) {
        case "expand_less":
          u.addEventListener("click", () => {
            var d, g, _, x;
            const f = (x = (_ = (g = (d = u.parentElement) == null ? void 0 : d.parentElement) == null ? void 0 : g.parentElement) == null ? void 0 : _.parentElement) == null ? void 0 : x.nextElementSibling;
            u.classList.toggle("guifierRotate"), f.classList.toggle("guifierNoneDisplay");
          });
          break;
        case "delete":
          u.addEventListener("click", (f) => {
            var x, T, A;
            const g = (A = (T = (x = f.target.parentElement) == null ? void 0 : x.parentElement) == null ? void 0 : T.parentElement) == null ? void 0 : A.parentElement, _ = g == null ? void 0 : g.dataset.elementIndex;
            s.removeElement(parseInt(_));
          });
          break;
        case "add":
          u.addEventListener("click", () => {
            Promise.resolve().then(async () => {
              a.getFieldLabelName() === "Object" ? await a.letUserAddProperty() : a.getFieldLabelName() === "Array" && await a.letUserAddElement();
            }).catch((f) => {
              console.error(f);
            });
          });
          break;
      }
    });
  }
  /**
   * This function is responsible for deleting an element in an array container in the ui
   */
  removeElement(r) {
    var l;
    const s = this.getArrayFieldContainers();
    s[r].classList.contains("guifierContainerFieldType") && ((l = s[r].nextElementSibling) == null || l.remove()), s[r].remove();
    const a = Ie.cloneDeep(this.property._path);
    a.push(r), this.data.removeData(a), this.resetElementsUiInArrayContainer(), this.containerLength--, this.containerLength === 0 && this.contentBody.append(this.drawEmptyContent(!0)), this.params.onChange !== void 0 && this.params.onChange();
  }
  /**
   * This function lets the user add an element by showing a prompt to him
   */
  async letUserAddElement() {
    const r = [];
    for (const u in kr) {
      const f = kr[u];
      f.staticObject.isBaseField && r.push({
        icon: f.staticObject.fieldIcon,
        text: f.staticObject.fieldLabelName,
        value: f.staticObject.fieldName
      });
    }
    const s = {
      "Field Type": {
        _fieldType: "cardSelect",
        _params: {
          cards: r
        },
        _value: ""
      }
    }, a = {
      elementSelector: this.params.elementSelector + " > div",
      dialogTitle: "New Field"
    }, l = await Ws.get(s, a);
    if (l !== null) {
      const u = {
        _path: [...this.property._path, this.containerLength],
        _key: this.containerLength,
        _valueType: wt(As(l["Field Type"])),
        _value: As(l["Field Type"]),
        _fieldType: l["Field Type"],
        _rules: void 0,
        _params: void 0
      };
      this.addElement(u);
    }
  }
  /**
   * This function is responsible for adding a property in an object container
   */
  addElement(r) {
    r = Ie.cloneDeep(r), this.data.addElement(r), this.containerLength === 0 && (this.contentBody.innerHTML = "");
    const s = this.drawElement(r);
    this.contentBody.append(s), this.containerLength++, this.params.onChange !== void 0 && this.params.onChange();
  }
  /**
   * This function is responsible for redrawing Elements in an Array Container
   */
  resetElementsUiInArrayContainer() {
    this.getArrayFieldContainers().forEach((s, a) => {
      const l = s.querySelector(".guifierArrayIndexLabel");
      l !== null && (l.innerHTML = `${a + 1}`), s.classList.remove("guifierOddBackground"), df(a) && s.classList.add("guifierOddBackground"), s.dataset.elementIndex = `${a}`;
    });
  }
  /**
   * This function is responsible for getting all the ArrayFieldContainers
   */
  getArrayFieldContainers() {
    const r = [];
    for (let s = 0; s < this.contentBody.children.length; s++)
      this.contentBody.children[s].classList.contains("guifierArrayFieldContainer") && r.push(this.contentBody.children[s]);
    return r;
  }
};
let Hn = Is;
/**
 * this is name of the field internaly
 */
B(Hn, "fieldName", "array"), B(Hn, "fieldLabelName", "Array"), /**
 * this is the icon thats shown for users
 */
B(Hn, "fieldIcon", "data_array");
const Zw = Qo.extend({}), al = class extends kt {
  constructor() {
    super(...arguments);
    /**
     * The localParam property is the this.property._params of this field
     */
    B(this, "localParam", Zw.parse(this.property._params));
  }
  /**
   * This function validates the _params of the property object
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property object
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return al.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the text field HTMLElement
   *
   * @returns {HTMLElement} html element object
   */
  draw() {
    const r = document.createElement("input");
    return r.type = "text", r.classList.add("guifierTextField"), this.property._value !== "" && (r.value = this.property._value), r.placeholder = "Text Field", this.showSecondaryColors ? r.classList.add("guifierPrimaryBgColor") : r.classList.add("guifierSecondaryBgColor"), r.addEventListener("input", (s) => {
      this.inputEventHandler(s);
    }), r;
  }
  /**
   * This function handles the input event on the text field
   */
  inputEventHandler(r) {
    const s = r.target;
    this.setValue(s.value);
  }
};
let Zn = al;
/**
 * this is name of the field internaly
 */
B(Zn, "fieldName", "text"), /**
 * this is shown name to the user
 */
B(Zn, "fieldLabelName", "Text"), /**
 * this is the icon thats shown for users
 */
B(Zn, "fieldIcon", "title");
const ol = class extends kt {
  constructor() {
    super(...arguments);
    /**
     * this property is an interval handler used to simulate
     * keeping pressing on the plus or minus buttons
     */
    B(this, "intervalId", 0);
  }
  /**
   * This function validates the _params of the property object
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property object
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return ol.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the text field HTMLElement
   *
   * @returns {HTMLElement} html element object
   */
  draw() {
    const r = document.createElement("div");
    r.classList.add("guifierNumberInputContainer");
    const s = document.createElement("input");
    s.type = "number", s.classList.add("guifierNumberField"), this.property._value !== "" && (s.value = this.property._value);
    const a = document.createElement("div");
    a.classList.add("guifierButtonsContainer");
    const l = document.createElement("div"), u = bt("keyboard_arrow_down");
    l.classList.add("guifierNumberButton"), l.append(u), l.addEventListener("mousedown", (g) => {
      g.button === 0 && this.keyDownInputButtonsEventHandler(s, !1);
    }), l.addEventListener("mouseup", () => {
      this.keyUpInputButtonsEventHandler();
    });
    const f = document.createElement("div"), d = bt("keyboard_arrow_up");
    return f.classList.add("guifierNumberButton"), f.append(d), f.addEventListener("mousedown", (g) => {
      g.button === 0 && this.keyDownInputButtonsEventHandler(s, !0);
    }), f.addEventListener("mouseup", () => {
      this.keyUpInputButtonsEventHandler();
    }), this.showSecondaryColors ? (l.classList.add("guifierPrimaryBgColor"), f.classList.add("guifierPrimaryBgColor")) : (l.classList.add("guifierSecondaryBgColor"), f.classList.add("guifierSecondaryBgColor")), a.append(l), a.append(f), r.append(s), r.append(a), s.addEventListener("input", () => {
      this.inputEventHandler(s);
    }), this.showSecondaryColors ? s.classList.add("guifierPrimaryBgColor") : s.classList.add("guifierSecondaryBgColor"), r;
  }
  /**
   * This function handles the input event on the text field
   */
  inputEventHandler(r) {
    this.setValue(parseInt(r.value));
  }
  /**
   * This function handles the click event on the minus and plus buttons
   */
  keyDownInputButtonsEventHandler(r, s) {
    clearInterval(this.intervalId), r.value === "" && (r.value = "0"), s ? (r.value = (parseInt(r.value) + 1).toString(), this.intervalId = setInterval(() => {
      r.value = (parseInt(r.value) + 1).toString();
    }, 100)) : (r.value = (parseInt(r.value) - 1).toString(), this.intervalId = setInterval(() => {
      r.value = (parseInt(r.value) - 1).toString();
    }, 100)), this.setValue(parseInt(r.value));
  }
  /**
   * This function handles the key up even that will stop the interval from running
   */
  keyUpInputButtonsEventHandler() {
    clearInterval(this.intervalId);
  }
};
let Vn = ol;
/**
 * this is name of the field internaly
 */
B(Vn, "fieldName", "number"), B(Vn, "fieldLabelName", "Number"), /**
 * this is the icon thats shown for users
 */
B(Vn, "fieldIcon", "numbers");
const ll = class extends kt {
  /**
   * This function validates the _params of the property object
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property object
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return ll.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the Boolean field HTMLElement
   *
   * @returns {HTMLElement} html element object
   */
  draw() {
    const t = document.createElement("div");
    t.classList.add("guifierBooleanField");
    const r = document.createElement("div");
    r.classList.add("guifierBooleanElement"), r.classList.add("guifierBooleanTrueElement"), r.innerHTML = "True", t.append(r);
    const s = document.createElement("div");
    return s.classList.add("guifierBooleanElement"), s.classList.add("guifierBooleanFalseElement"), s.innerHTML = "False", t.append(s), this.property._value === !0 ? r.classList.add("guifierBooleanTrueElementSelect") : s.classList.add("guifierBooleanFalseElementSelect"), this.showSecondaryColors ? t.classList.add("guifierPrimaryBgColor") : t.classList.add("guifierSecondaryBgColor"), t.addEventListener("click", (a) => {
      this.booleanEventHandler(a, r, s);
    }), t;
  }
  /**
   * this function is responsible handling the event when you click on the boolean field
   */
  booleanEventHandler(t, r, s) {
    const a = t.target;
    a.classList.contains("guifierBooleanTrueElement") ? (r.classList.add("guifierBooleanTrueElementSelect"), s.classList.remove("guifierBooleanFalseElementSelect"), this.setValue(!0)) : a.classList.contains("guifierBooleanFalseElement") && (s.classList.add("guifierBooleanFalseElementSelect"), r.classList.remove("guifierBooleanTrueElementSelect"), this.setValue(!1));
  }
};
let jn = ll;
/**
 * this is name of the field internaly
 */
B(jn, "fieldName", "boolean"), B(jn, "fieldLabelName", "Boolean"), /**
 * this is the icon thats shown for users
 */
B(jn, "fieldIcon", "check_box");
const ul = class extends kt {
  /**
   * This function validates the _params of the property object
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property object
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return ul.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the text field HTMLElement
   *
   * @returns {HTMLElement} html element object
   */
  draw() {
    const t = document.createElement("div");
    t.classList.add("guifierNullField");
    const r = document.createElement("div");
    r.classList.add("guifierNullFieldText"), r.innerHTML = "Null", t.append(r);
    const s = bt("block");
    return t.append(s), t;
  }
};
let Gn = ul;
/**
 * this is name of the field internaly
 */
B(Gn, "fieldName", "null"), B(Gn, "fieldLabelName", "Null"), /**
 * this is the icon thats shown for users
 */
B(Gn, "fieldIcon", "block");
const Vw = zo({
  icon: Kn(),
  text: Kn(),
  value: Kn()
}), jw = Qo.extend({
  cards: aw(Vw)
}), cl = class extends kt {
  constructor() {
    super(...arguments);
    /**
     * The localParam property is the this.property._params of this field
     */
    B(this, "localParam", jw.parse(this.property._params));
  }
  /**
   * This function validates the _params of the property object
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property object
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return cl.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the text field HTMLElement
   *
   * @returns {HTMLElement} html element object
   */
  draw() {
    const r = document.createElement("div");
    r.classList.add("guifierCardsContainer");
    for (let s = 0; s < this.localParam.cards.length; s++) {
      const a = this.localParam.cards[s], l = document.createElement("div");
      l.classList.add("guifierCard"), l.addEventListener("click", () => {
        this.cardClickHandler(l, r, a);
      }), r.append(l);
      const u = document.createElement("div");
      u.classList.add("cardIconElement"), u.append(bt(a.icon)), l.append(u);
      const f = document.createElement("div");
      f.classList.add("cardTextElement"), f.innerHTML = a.text, l.append(f);
    }
    return r;
  }
  /**
   * this function is responsible for handling the click on the cards
   */
  cardClickHandler(r, s, a) {
    this.selectCard(r, s, a);
  }
  /**
   * this function is responsible for selecting one of the cards
   */
  selectCard(r, s, a) {
    const l = s.querySelectorAll(".guifierCard");
    for (let u = 0; u < l.length; u++)
      l[u].classList.remove("guifierSelectedCard");
    r.classList.add("guifierSelectedCard"), this.setValue(a.value);
  }
};
let Yn = cl;
/**
 * this is name of the field internaly
 */
B(Yn, "fieldName", "cardSelect"), /**
 * this is the label name thats shown for users
 */
B(Yn, "fieldLabelName", "Card Select"), /**
 * this the flag that determens if the field is Base or a CustomField
 */
B(Yn, "isBaseField", !1);
const fl = class extends kt {
  /**
   * This function validates the _params of the property object
   */
  validateParams() {
  }
  /**
   * This function validates the _rules of the property object
   */
  validateRules() {
  }
  /**
   * This function validates the _rules of the property object
   */
  getFieldLabelName() {
    return fl.fieldLabelName;
  }
  /**
   * this function is responsible for drawing the Boolean field HTMLElement
   *
   * @returns {HTMLElement} html element object
   */
  draw() {
    const t = document.createElement("input");
    t.type = "date", t.classList.add("guifierTextField");
    const r = this.property._value.toISOString().split("T")[0];
    return t.value = r, t.placeholder = "Text Field", this.showSecondaryColors ? t.classList.add("guifierPrimaryBgColor") : t.classList.add("guifierSecondaryBgColor"), t.addEventListener("input", (s) => {
      this.inputEventHandler(s);
    }), t;
  }
  /**
   * This function handles the input event on the text field
   */
  inputEventHandler(t) {
    const r = t.target;
    this.setValue(new Date(r.value));
  }
};
let qn = fl;
/**
 * this is name of the field internaly
 */
B(qn, "fieldName", "date"), B(qn, "fieldLabelName", "Date"), /**
 * this is the icon thats shown for users
 */
B(qn, "fieldIcon", "calendar_month");
function df(e) {
  return e % 2 !== 0;
}
function wt(e) {
  const t = typeof e;
  return t === Ne.Object ? Array.isArray(e) ? Ne.Array : Ie.isDate(e) ? Ne.Date : e === null ? Ne.Null : Ne.Object : t === "number" && isNaN(e) ? Ne.NaN : t;
}
function Gw(e, t) {
  return {
    ...e,
    ...Object.fromEntries(Object.entries(t).filter(([r]) => !(r in e)))
  };
}
const kr = {
  text: {
    staticObject: Zn,
    defaultValue: "",
    getInstantiatedObject: (e, t, r) => new Zn(e, t, r)
  },
  number: {
    staticObject: Vn,
    defaultValue: 0,
    getInstantiatedObject: (e, t, r) => new Vn(e, t, r)
  },
  boolean: {
    staticObject: jn,
    defaultValue: !0,
    getInstantiatedObject: (e, t, r) => new jn(e, t, r)
  },
  null: {
    staticObject: Gn,
    defaultValue: null,
    getInstantiatedObject: (e, t, r) => new Gn(e, t, r)
  },
  object: {
    staticObject: xn,
    defaultValue: {},
    getInstantiatedObject: (e, t, r) => new xn(e, t, r)
  },
  array: {
    staticObject: Hn,
    defaultValue: [],
    getInstantiatedObject: (e, t, r) => new Hn(e, t, r)
  },
  cardSelect: {
    staticObject: Yn,
    defaultValue: "",
    getInstantiatedObject: (e, t, r) => new Yn(e, t, r)
  },
  date: {
    staticObject: qn,
    defaultValue: /* @__PURE__ */ new Date(),
    getInstantiatedObject: (e, t, r) => new qn(e, t, r)
  }
};
function As(e) {
  return Ie.cloneDeep(kr[e].defaultValue);
}
function el(e, t, r) {
  if (e._fieldType !== void 0)
    return kr[e._fieldType].getInstantiatedObject(e, t, r);
  throw new Error("property._fieldType is undefined");
}
function bt(e) {
  const t = document.createElement("span");
  return t.classList.add("material-icons-outlined"), t.innerHTML = e, t;
}
function Xf() {
  const e = document.createElement("div");
  return e.classList.add("guifierDescriptionSymbol"), e.append("!"), e;
}
function Jf(e, t) {
  const r = document.createElement("div");
  r.classList.add("guifierDescriptionTooltip"), r.insertAdjacentHTML("afterbegin", `
        <div class="descriptionHeader">
            <div class="guifierDescriptionSymbol">!</div>
            <div>
                ${e.keyName}
                <span class="descriptionFieldType">(${e.getFieldLabelName()})</span>
            </div>
        </div>
        <div class="descriptionBody">${e.property._params.description}</div>
    `), t.append(r);
  const s = document.createElement("div");
  s.classList.add("descriptionTooltipRefrence"), t.append(s);
  let a = 0;
  t.addEventListener("mouseenter", () => {
    clearTimeout(a), Hw(s, r, {
      placement: "top",
      middleware: [bw(15), Uw(), Ww()]
    }).then(({ x: l, y: u }) => {
      Object.assign(r.style, {
        left: `${l}px`,
        top: `${u}px`
      });
    }).then(() => {
    }).catch((l) => {
      console.log("ERROR: from positioning"), console.log(l);
    });
  }), t.addEventListener("mouseleave", () => {
    a = setTimeout(() => {
      r.removeAttribute("style");
    }, 250);
  });
}
function hf(e) {
  switch (e) {
    case "string":
      return "text";
    case "number":
      return "number";
    case "boolean":
      return "boolean";
    case "object":
      return "object";
    case "array":
      return "array";
    case "null":
      return "null";
    case "undefined":
      return "undefined";
    case "NaN":
      return "null";
    case "Date":
      return "date";
    default:
      throw new Error("value type is not supported");
  }
}
/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
function Qf(e) {
  return typeof e > "u" || e === null;
}
function Yw(e) {
  return typeof e == "object" && e !== null;
}
function qw(e) {
  return Array.isArray(e) ? e : Qf(e) ? [] : [e];
}
function zw(e, t) {
  var r, s, a, l;
  if (t)
    for (l = Object.keys(t), r = 0, s = l.length; r < s; r += 1)
      a = l[r], e[a] = t[a];
  return e;
}
function Kw(e, t) {
  var r = "", s;
  for (s = 0; s < t; s += 1)
    r += e;
  return r;
}
function Xw(e) {
  return e === 0 && Number.NEGATIVE_INFINITY === 1 / e;
}
var Jw = Qf, Qw = Yw, e1 = qw, t1 = Kw, n1 = Xw, r1 = zw, ke = {
  isNothing: Jw,
  isObject: Qw,
  toArray: e1,
  repeat: t1,
  isNegativeZero: n1,
  extend: r1
};
function ed(e, t) {
  var r = "", s = e.reason || "(unknown reason)";
  return e.mark ? (e.mark.name && (r += 'in "' + e.mark.name + '" '), r += "(" + (e.mark.line + 1) + ":" + (e.mark.column + 1) + ")", !t && e.mark.snippet && (r += `

` + e.mark.snippet), s + " " + r) : s;
}
function ui(e, t) {
  Error.call(this), this.name = "YAMLException", this.reason = e, this.mark = t, this.message = ed(this, !1), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack || "";
}
ui.prototype = Object.create(Error.prototype);
ui.prototype.constructor = ui;
ui.prototype.toString = function(t) {
  return this.name + ": " + ed(this, t);
};
var tt = ui;
function uo(e, t, r, s, a) {
  var l = "", u = "", f = Math.floor(a / 2) - 1;
  return s - t > f && (l = " ... ", t = s - f + l.length), r - s > f && (u = " ...", r = s + f - u.length), {
    str: l + e.slice(t, r).replace(/\t/g, "→") + u,
    pos: s - t + l.length
    // relative position
  };
}
function co(e, t) {
  return ke.repeat(" ", t - e.length) + e;
}
function i1(e, t) {
  if (t = Object.create(t || null), !e.buffer)
    return null;
  t.maxLength || (t.maxLength = 79), typeof t.indent != "number" && (t.indent = 1), typeof t.linesBefore != "number" && (t.linesBefore = 3), typeof t.linesAfter != "number" && (t.linesAfter = 2);
  for (var r = /\r?\n|\r|\0/g, s = [0], a = [], l, u = -1; l = r.exec(e.buffer); )
    a.push(l.index), s.push(l.index + l[0].length), e.position <= l.index && u < 0 && (u = s.length - 2);
  u < 0 && (u = s.length - 1);
  var f = "", d, g, _ = Math.min(e.line + t.linesAfter, a.length).toString().length, x = t.maxLength - (t.indent + _ + 3);
  for (d = 1; d <= t.linesBefore && !(u - d < 0); d++)
    g = uo(
      e.buffer,
      s[u - d],
      a[u - d],
      e.position - (s[u] - s[u - d]),
      x
    ), f = ke.repeat(" ", t.indent) + co((e.line - d + 1).toString(), _) + " | " + g.str + `
` + f;
  for (g = uo(e.buffer, s[u], a[u], e.position, x), f += ke.repeat(" ", t.indent) + co((e.line + 1).toString(), _) + " | " + g.str + `
`, f += ke.repeat("-", t.indent + _ + 3 + g.pos) + `^
`, d = 1; d <= t.linesAfter && !(u + d >= a.length); d++)
    g = uo(
      e.buffer,
      s[u + d],
      a[u + d],
      e.position - (s[u] - s[u + d]),
      x
    ), f += ke.repeat(" ", t.indent) + co((e.line + d + 1).toString(), _) + " | " + g.str + `
`;
  return f.replace(/\n$/, "");
}
var s1 = i1, a1 = [
  "kind",
  "multi",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "representName",
  "defaultStyle",
  "styleAliases"
], o1 = [
  "scalar",
  "sequence",
  "mapping"
];
function l1(e) {
  var t = {};
  return e !== null && Object.keys(e).forEach(function(r) {
    e[r].forEach(function(s) {
      t[String(s)] = r;
    });
  }), t;
}
function u1(e, t) {
  if (t = t || {}, Object.keys(t).forEach(function(r) {
    if (a1.indexOf(r) === -1)
      throw new tt('Unknown option "' + r + '" is met in definition of "' + e + '" YAML type.');
  }), this.options = t, this.tag = e, this.kind = t.kind || null, this.resolve = t.resolve || function() {
    return !0;
  }, this.construct = t.construct || function(r) {
    return r;
  }, this.instanceOf = t.instanceOf || null, this.predicate = t.predicate || null, this.represent = t.represent || null, this.representName = t.representName || null, this.defaultStyle = t.defaultStyle || null, this.multi = t.multi || !1, this.styleAliases = l1(t.styleAliases || null), o1.indexOf(this.kind) === -1)
    throw new tt('Unknown kind "' + this.kind + '" is specified for "' + e + '" YAML type.');
}
var Ue = u1;
function pf(e, t) {
  var r = [];
  return e[t].forEach(function(s) {
    var a = r.length;
    r.forEach(function(l, u) {
      l.tag === s.tag && l.kind === s.kind && l.multi === s.multi && (a = u);
    }), r[a] = s;
  }), r;
}
function c1() {
  var e = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, t, r;
  function s(a) {
    a.multi ? (e.multi[a.kind].push(a), e.multi.fallback.push(a)) : e[a.kind][a.tag] = e.fallback[a.tag] = a;
  }
  for (t = 0, r = arguments.length; t < r; t += 1)
    arguments[t].forEach(s);
  return e;
}
function Io(e) {
  return this.extend(e);
}
Io.prototype.extend = function(t) {
  var r = [], s = [];
  if (t instanceof Ue)
    s.push(t);
  else if (Array.isArray(t))
    s = s.concat(t);
  else if (t && (Array.isArray(t.implicit) || Array.isArray(t.explicit)))
    t.implicit && (r = r.concat(t.implicit)), t.explicit && (s = s.concat(t.explicit));
  else
    throw new tt("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
  r.forEach(function(l) {
    if (!(l instanceof Ue))
      throw new tt("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    if (l.loadKind && l.loadKind !== "scalar")
      throw new tt("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    if (l.multi)
      throw new tt("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
  }), s.forEach(function(l) {
    if (!(l instanceof Ue))
      throw new tt("Specified list of YAML types (or a single Type object) contains a non-Type object.");
  });
  var a = Object.create(Io.prototype);
  return a.implicit = (this.implicit || []).concat(r), a.explicit = (this.explicit || []).concat(s), a.compiledImplicit = pf(a, "implicit"), a.compiledExplicit = pf(a, "explicit"), a.compiledTypeMap = c1(a.compiledImplicit, a.compiledExplicit), a;
};
var f1 = Io, d1 = new Ue("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: function(e) {
    return e !== null ? e : "";
  }
}), h1 = new Ue("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: function(e) {
    return e !== null ? e : [];
  }
}), p1 = new Ue("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: function(e) {
    return e !== null ? e : {};
  }
}), g1 = new f1({
  explicit: [
    d1,
    h1,
    p1
  ]
});
function m1(e) {
  if (e === null)
    return !0;
  var t = e.length;
  return t === 1 && e === "~" || t === 4 && (e === "null" || e === "Null" || e === "NULL");
}
function v1() {
  return null;
}
function y1(e) {
  return e === null;
}
var _1 = new Ue("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: m1,
  construct: v1,
  predicate: y1,
  represent: {
    canonical: function() {
      return "~";
    },
    lowercase: function() {
      return "null";
    },
    uppercase: function() {
      return "NULL";
    },
    camelcase: function() {
      return "Null";
    },
    empty: function() {
      return "";
    }
  },
  defaultStyle: "lowercase"
});
function x1(e) {
  if (e === null)
    return !1;
  var t = e.length;
  return t === 4 && (e === "true" || e === "True" || e === "TRUE") || t === 5 && (e === "false" || e === "False" || e === "FALSE");
}
function w1(e) {
  return e === "true" || e === "True" || e === "TRUE";
}
function b1(e) {
  return Object.prototype.toString.call(e) === "[object Boolean]";
}
var E1 = new Ue("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: x1,
  construct: w1,
  predicate: b1,
  represent: {
    lowercase: function(e) {
      return e ? "true" : "false";
    },
    uppercase: function(e) {
      return e ? "TRUE" : "FALSE";
    },
    camelcase: function(e) {
      return e ? "True" : "False";
    }
  },
  defaultStyle: "lowercase"
});
function A1(e) {
  return 48 <= e && e <= 57 || 65 <= e && e <= 70 || 97 <= e && e <= 102;
}
function C1(e) {
  return 48 <= e && e <= 55;
}
function T1(e) {
  return 48 <= e && e <= 57;
}
function S1(e) {
  if (e === null)
    return !1;
  var t = e.length, r = 0, s = !1, a;
  if (!t)
    return !1;
  if (a = e[r], (a === "-" || a === "+") && (a = e[++r]), a === "0") {
    if (r + 1 === t)
      return !0;
    if (a = e[++r], a === "b") {
      for (r++; r < t; r++)
        if (a = e[r], a !== "_") {
          if (a !== "0" && a !== "1")
            return !1;
          s = !0;
        }
      return s && a !== "_";
    }
    if (a === "x") {
      for (r++; r < t; r++)
        if (a = e[r], a !== "_") {
          if (!A1(e.charCodeAt(r)))
            return !1;
          s = !0;
        }
      return s && a !== "_";
    }
    if (a === "o") {
      for (r++; r < t; r++)
        if (a = e[r], a !== "_") {
          if (!C1(e.charCodeAt(r)))
            return !1;
          s = !0;
        }
      return s && a !== "_";
    }
  }
  if (a === "_")
    return !1;
  for (; r < t; r++)
    if (a = e[r], a !== "_") {
      if (!T1(e.charCodeAt(r)))
        return !1;
      s = !0;
    }
  return !(!s || a === "_");
}
function L1(e) {
  var t = e, r = 1, s;
  if (t.indexOf("_") !== -1 && (t = t.replace(/_/g, "")), s = t[0], (s === "-" || s === "+") && (s === "-" && (r = -1), t = t.slice(1), s = t[0]), t === "0")
    return 0;
  if (s === "0") {
    if (t[1] === "b")
      return r * parseInt(t.slice(2), 2);
    if (t[1] === "x")
      return r * parseInt(t.slice(2), 16);
    if (t[1] === "o")
      return r * parseInt(t.slice(2), 8);
  }
  return r * parseInt(t, 10);
}
function O1(e) {
  return Object.prototype.toString.call(e) === "[object Number]" && e % 1 === 0 && !ke.isNegativeZero(e);
}
var N1 = new Ue("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: S1,
  construct: L1,
  predicate: O1,
  represent: {
    binary: function(e) {
      return e >= 0 ? "0b" + e.toString(2) : "-0b" + e.toString(2).slice(1);
    },
    octal: function(e) {
      return e >= 0 ? "0o" + e.toString(8) : "-0o" + e.toString(8).slice(1);
    },
    decimal: function(e) {
      return e.toString(10);
    },
    /* eslint-disable max-len */
    hexadecimal: function(e) {
      return e >= 0 ? "0x" + e.toString(16).toUpperCase() : "-0x" + e.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
}), I1 = new RegExp(
  // 2.5e4, 2.5 and integers
  "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
function k1(e) {
  return !(e === null || !I1.test(e) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  e[e.length - 1] === "_");
}
function R1(e) {
  var t, r;
  return t = e.replace(/_/g, "").toLowerCase(), r = t[0] === "-" ? -1 : 1, "+-".indexOf(t[0]) >= 0 && (t = t.slice(1)), t === ".inf" ? r === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : t === ".nan" ? NaN : r * parseFloat(t, 10);
}
var P1 = /^[-+]?[0-9]+e/;
function F1(e, t) {
  var r;
  if (isNaN(e))
    switch (t) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  else if (Number.POSITIVE_INFINITY === e)
    switch (t) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  else if (Number.NEGATIVE_INFINITY === e)
    switch (t) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  else if (ke.isNegativeZero(e))
    return "-0.0";
  return r = e.toString(10), P1.test(r) ? r.replace("e", ".e") : r;
}
function B1(e) {
  return Object.prototype.toString.call(e) === "[object Number]" && (e % 1 !== 0 || ke.isNegativeZero(e));
}
var M1 = new Ue("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: k1,
  construct: R1,
  predicate: B1,
  represent: F1,
  defaultStyle: "lowercase"
}), $1 = g1.extend({
  implicit: [
    _1,
    E1,
    N1,
    M1
  ]
}), D1 = $1, td = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
), nd = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
);
function W1(e) {
  return e === null ? !1 : td.exec(e) !== null || nd.exec(e) !== null;
}
function U1(e) {
  var t, r, s, a, l, u, f, d = 0, g = null, _, x, T;
  if (t = td.exec(e), t === null && (t = nd.exec(e)), t === null)
    throw new Error("Date resolve error");
  if (r = +t[1], s = +t[2] - 1, a = +t[3], !t[4])
    return new Date(Date.UTC(r, s, a));
  if (l = +t[4], u = +t[5], f = +t[6], t[7]) {
    for (d = t[7].slice(0, 3); d.length < 3; )
      d += "0";
    d = +d;
  }
  return t[9] && (_ = +t[10], x = +(t[11] || 0), g = (_ * 60 + x) * 6e4, t[9] === "-" && (g = -g)), T = new Date(Date.UTC(r, s, a, l, u, f, d)), g && T.setTime(T.getTime() - g), T;
}
function H1(e) {
  return e.toISOString();
}
var Z1 = new Ue("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: W1,
  construct: U1,
  instanceOf: Date,
  represent: H1
});
function V1(e) {
  return e === "<<" || e === null;
}
var j1 = new Ue("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: V1
}), tl = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;
function G1(e) {
  if (e === null)
    return !1;
  var t, r, s = 0, a = e.length, l = tl;
  for (r = 0; r < a; r++)
    if (t = l.indexOf(e.charAt(r)), !(t > 64)) {
      if (t < 0)
        return !1;
      s += 6;
    }
  return s % 8 === 0;
}
function Y1(e) {
  var t, r, s = e.replace(/[\r\n=]/g, ""), a = s.length, l = tl, u = 0, f = [];
  for (t = 0; t < a; t++)
    t % 4 === 0 && t && (f.push(u >> 16 & 255), f.push(u >> 8 & 255), f.push(u & 255)), u = u << 6 | l.indexOf(s.charAt(t));
  return r = a % 4 * 6, r === 0 ? (f.push(u >> 16 & 255), f.push(u >> 8 & 255), f.push(u & 255)) : r === 18 ? (f.push(u >> 10 & 255), f.push(u >> 2 & 255)) : r === 12 && f.push(u >> 4 & 255), new Uint8Array(f);
}
function q1(e) {
  var t = "", r = 0, s, a, l = e.length, u = tl;
  for (s = 0; s < l; s++)
    s % 3 === 0 && s && (t += u[r >> 18 & 63], t += u[r >> 12 & 63], t += u[r >> 6 & 63], t += u[r & 63]), r = (r << 8) + e[s];
  return a = l % 3, a === 0 ? (t += u[r >> 18 & 63], t += u[r >> 12 & 63], t += u[r >> 6 & 63], t += u[r & 63]) : a === 2 ? (t += u[r >> 10 & 63], t += u[r >> 4 & 63], t += u[r << 2 & 63], t += u[64]) : a === 1 && (t += u[r >> 2 & 63], t += u[r << 4 & 63], t += u[64], t += u[64]), t;
}
function z1(e) {
  return Object.prototype.toString.call(e) === "[object Uint8Array]";
}
var K1 = new Ue("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: G1,
  construct: Y1,
  predicate: z1,
  represent: q1
}), X1 = Object.prototype.hasOwnProperty, J1 = Object.prototype.toString;
function Q1(e) {
  if (e === null)
    return !0;
  var t = [], r, s, a, l, u, f = e;
  for (r = 0, s = f.length; r < s; r += 1) {
    if (a = f[r], u = !1, J1.call(a) !== "[object Object]")
      return !1;
    for (l in a)
      if (X1.call(a, l))
        if (!u)
          u = !0;
        else
          return !1;
    if (!u)
      return !1;
    if (t.indexOf(l) === -1)
      t.push(l);
    else
      return !1;
  }
  return !0;
}
function eb(e) {
  return e !== null ? e : [];
}
var tb = new Ue("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: Q1,
  construct: eb
}), nb = Object.prototype.toString;
function rb(e) {
  if (e === null)
    return !0;
  var t, r, s, a, l, u = e;
  for (l = new Array(u.length), t = 0, r = u.length; t < r; t += 1) {
    if (s = u[t], nb.call(s) !== "[object Object]" || (a = Object.keys(s), a.length !== 1))
      return !1;
    l[t] = [a[0], s[a[0]]];
  }
  return !0;
}
function ib(e) {
  if (e === null)
    return [];
  var t, r, s, a, l, u = e;
  for (l = new Array(u.length), t = 0, r = u.length; t < r; t += 1)
    s = u[t], a = Object.keys(s), l[t] = [a[0], s[a[0]]];
  return l;
}
var sb = new Ue("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: rb,
  construct: ib
}), ab = Object.prototype.hasOwnProperty;
function ob(e) {
  if (e === null)
    return !0;
  var t, r = e;
  for (t in r)
    if (ab.call(r, t) && r[t] !== null)
      return !1;
  return !0;
}
function lb(e) {
  return e !== null ? e : {};
}
var ub = new Ue("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: ob,
  construct: lb
}), rd = D1.extend({
  implicit: [
    Z1,
    j1
  ],
  explicit: [
    K1,
    tb,
    sb,
    ub
  ]
}), Sn = Object.prototype.hasOwnProperty, Cs = 1, id = 2, sd = 3, Ts = 4, fo = 1, cb = 2, gf = 3, fb = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, db = /[\x85\u2028\u2029]/, hb = /[,\[\]\{\}]/, ad = /^(?:!|!!|![a-z\-]+!)$/i, od = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function mf(e) {
  return Object.prototype.toString.call(e);
}
function Ht(e) {
  return e === 10 || e === 13;
}
function Xn(e) {
  return e === 9 || e === 32;
}
function nt(e) {
  return e === 9 || e === 32 || e === 10 || e === 13;
}
function wr(e) {
  return e === 44 || e === 91 || e === 93 || e === 123 || e === 125;
}
function pb(e) {
  var t;
  return 48 <= e && e <= 57 ? e - 48 : (t = e | 32, 97 <= t && t <= 102 ? t - 97 + 10 : -1);
}
function gb(e) {
  return e === 120 ? 2 : e === 117 ? 4 : e === 85 ? 8 : 0;
}
function mb(e) {
  return 48 <= e && e <= 57 ? e - 48 : -1;
}
function vf(e) {
  return e === 48 ? "\0" : e === 97 ? "\x07" : e === 98 ? "\b" : e === 116 || e === 9 ? "	" : e === 110 ? `
` : e === 118 ? "\v" : e === 102 ? "\f" : e === 114 ? "\r" : e === 101 ? "\x1B" : e === 32 ? " " : e === 34 ? '"' : e === 47 ? "/" : e === 92 ? "\\" : e === 78 ? "" : e === 95 ? " " : e === 76 ? "\u2028" : e === 80 ? "\u2029" : "";
}
function vb(e) {
  return e <= 65535 ? String.fromCharCode(e) : String.fromCharCode(
    (e - 65536 >> 10) + 55296,
    (e - 65536 & 1023) + 56320
  );
}
var ld = new Array(256), ud = new Array(256);
for (var vr = 0; vr < 256; vr++)
  ld[vr] = vf(vr) ? 1 : 0, ud[vr] = vf(vr);
function yb(e, t) {
  this.input = e, this.filename = t.filename || null, this.schema = t.schema || rd, this.onWarning = t.onWarning || null, this.legacy = t.legacy || !1, this.json = t.json || !1, this.listener = t.listener || null, this.implicitTypes = this.schema.compiledImplicit, this.typeMap = this.schema.compiledTypeMap, this.length = e.length, this.position = 0, this.line = 0, this.lineStart = 0, this.lineIndent = 0, this.firstTabInLine = -1, this.documents = [];
}
function cd(e, t) {
  var r = {
    name: e.filename,
    buffer: e.input.slice(0, -1),
    // omit trailing \0
    position: e.position,
    line: e.line,
    column: e.position - e.lineStart
  };
  return r.snippet = s1(r), new tt(t, r);
}
function j(e, t) {
  throw cd(e, t);
}
function Ss(e, t) {
  e.onWarning && e.onWarning.call(null, cd(e, t));
}
var yf = {
  YAML: function(t, r, s) {
    var a, l, u;
    t.version !== null && j(t, "duplication of %YAML directive"), s.length !== 1 && j(t, "YAML directive accepts exactly one argument"), a = /^([0-9]+)\.([0-9]+)$/.exec(s[0]), a === null && j(t, "ill-formed argument of the YAML directive"), l = parseInt(a[1], 10), u = parseInt(a[2], 10), l !== 1 && j(t, "unacceptable YAML version of the document"), t.version = s[0], t.checkLineBreaks = u < 2, u !== 1 && u !== 2 && Ss(t, "unsupported YAML version of the document");
  },
  TAG: function(t, r, s) {
    var a, l;
    s.length !== 2 && j(t, "TAG directive accepts exactly two arguments"), a = s[0], l = s[1], ad.test(a) || j(t, "ill-formed tag handle (first argument) of the TAG directive"), Sn.call(t.tagMap, a) && j(t, 'there is a previously declared suffix for "' + a + '" tag handle'), od.test(l) || j(t, "ill-formed tag prefix (second argument) of the TAG directive");
    try {
      l = decodeURIComponent(l);
    } catch {
      j(t, "tag prefix is malformed: " + l);
    }
    t.tagMap[a] = l;
  }
};
function En(e, t, r, s) {
  var a, l, u, f;
  if (t < r) {
    if (f = e.input.slice(t, r), s)
      for (a = 0, l = f.length; a < l; a += 1)
        u = f.charCodeAt(a), u === 9 || 32 <= u && u <= 1114111 || j(e, "expected valid JSON character");
    else
      fb.test(f) && j(e, "the stream contains non-printable characters");
    e.result += f;
  }
}
function _f(e, t, r, s) {
  var a, l, u, f;
  for (ke.isObject(r) || j(e, "cannot merge mappings; the provided source object is unacceptable"), a = Object.keys(r), u = 0, f = a.length; u < f; u += 1)
    l = a[u], Sn.call(t, l) || (t[l] = r[l], s[l] = !0);
}
function br(e, t, r, s, a, l, u, f, d) {
  var g, _;
  if (Array.isArray(a))
    for (a = Array.prototype.slice.call(a), g = 0, _ = a.length; g < _; g += 1)
      Array.isArray(a[g]) && j(e, "nested arrays are not supported inside keys"), typeof a == "object" && mf(a[g]) === "[object Object]" && (a[g] = "[object Object]");
  if (typeof a == "object" && mf(a) === "[object Object]" && (a = "[object Object]"), a = String(a), t === null && (t = {}), s === "tag:yaml.org,2002:merge")
    if (Array.isArray(l))
      for (g = 0, _ = l.length; g < _; g += 1)
        _f(e, t, l[g], r);
    else
      _f(e, t, l, r);
  else
    !e.json && !Sn.call(r, a) && Sn.call(t, a) && (e.line = u || e.line, e.lineStart = f || e.lineStart, e.position = d || e.position, j(e, "duplicated mapping key")), a === "__proto__" ? Object.defineProperty(t, a, {
      configurable: !0,
      enumerable: !0,
      writable: !0,
      value: l
    }) : t[a] = l, delete r[a];
  return t;
}
function nl(e) {
  var t;
  t = e.input.charCodeAt(e.position), t === 10 ? e.position++ : t === 13 ? (e.position++, e.input.charCodeAt(e.position) === 10 && e.position++) : j(e, "a line break is expected"), e.line += 1, e.lineStart = e.position, e.firstTabInLine = -1;
}
function Te(e, t, r) {
  for (var s = 0, a = e.input.charCodeAt(e.position); a !== 0; ) {
    for (; Xn(a); )
      a === 9 && e.firstTabInLine === -1 && (e.firstTabInLine = e.position), a = e.input.charCodeAt(++e.position);
    if (t && a === 35)
      do
        a = e.input.charCodeAt(++e.position);
      while (a !== 10 && a !== 13 && a !== 0);
    if (Ht(a))
      for (nl(e), a = e.input.charCodeAt(e.position), s++, e.lineIndent = 0; a === 32; )
        e.lineIndent++, a = e.input.charCodeAt(++e.position);
    else
      break;
  }
  return r !== -1 && s !== 0 && e.lineIndent < r && Ss(e, "deficient indentation"), s;
}
function Us(e) {
  var t = e.position, r;
  return r = e.input.charCodeAt(t), !!((r === 45 || r === 46) && r === e.input.charCodeAt(t + 1) && r === e.input.charCodeAt(t + 2) && (t += 3, r = e.input.charCodeAt(t), r === 0 || nt(r)));
}
function rl(e, t) {
  t === 1 ? e.result += " " : t > 1 && (e.result += ke.repeat(`
`, t - 1));
}
function _b(e, t, r) {
  var s, a, l, u, f, d, g, _, x = e.kind, T = e.result, A;
  if (A = e.input.charCodeAt(e.position), nt(A) || wr(A) || A === 35 || A === 38 || A === 42 || A === 33 || A === 124 || A === 62 || A === 39 || A === 34 || A === 37 || A === 64 || A === 96 || (A === 63 || A === 45) && (a = e.input.charCodeAt(e.position + 1), nt(a) || r && wr(a)))
    return !1;
  for (e.kind = "scalar", e.result = "", l = u = e.position, f = !1; A !== 0; ) {
    if (A === 58) {
      if (a = e.input.charCodeAt(e.position + 1), nt(a) || r && wr(a))
        break;
    } else if (A === 35) {
      if (s = e.input.charCodeAt(e.position - 1), nt(s))
        break;
    } else {
      if (e.position === e.lineStart && Us(e) || r && wr(A))
        break;
      if (Ht(A))
        if (d = e.line, g = e.lineStart, _ = e.lineIndent, Te(e, !1, -1), e.lineIndent >= t) {
          f = !0, A = e.input.charCodeAt(e.position);
          continue;
        } else {
          e.position = u, e.line = d, e.lineStart = g, e.lineIndent = _;
          break;
        }
    }
    f && (En(e, l, u, !1), rl(e, e.line - d), l = u = e.position, f = !1), Xn(A) || (u = e.position + 1), A = e.input.charCodeAt(++e.position);
  }
  return En(e, l, u, !1), e.result ? !0 : (e.kind = x, e.result = T, !1);
}
function xb(e, t) {
  var r, s, a;
  if (r = e.input.charCodeAt(e.position), r !== 39)
    return !1;
  for (e.kind = "scalar", e.result = "", e.position++, s = a = e.position; (r = e.input.charCodeAt(e.position)) !== 0; )
    if (r === 39)
      if (En(e, s, e.position, !0), r = e.input.charCodeAt(++e.position), r === 39)
        s = e.position, e.position++, a = e.position;
      else
        return !0;
    else
      Ht(r) ? (En(e, s, a, !0), rl(e, Te(e, !1, t)), s = a = e.position) : e.position === e.lineStart && Us(e) ? j(e, "unexpected end of the document within a single quoted scalar") : (e.position++, a = e.position);
  j(e, "unexpected end of the stream within a single quoted scalar");
}
function wb(e, t) {
  var r, s, a, l, u, f;
  if (f = e.input.charCodeAt(e.position), f !== 34)
    return !1;
  for (e.kind = "scalar", e.result = "", e.position++, r = s = e.position; (f = e.input.charCodeAt(e.position)) !== 0; ) {
    if (f === 34)
      return En(e, r, e.position, !0), e.position++, !0;
    if (f === 92) {
      if (En(e, r, e.position, !0), f = e.input.charCodeAt(++e.position), Ht(f))
        Te(e, !1, t);
      else if (f < 256 && ld[f])
        e.result += ud[f], e.position++;
      else if ((u = gb(f)) > 0) {
        for (a = u, l = 0; a > 0; a--)
          f = e.input.charCodeAt(++e.position), (u = pb(f)) >= 0 ? l = (l << 4) + u : j(e, "expected hexadecimal character");
        e.result += vb(l), e.position++;
      } else
        j(e, "unknown escape sequence");
      r = s = e.position;
    } else
      Ht(f) ? (En(e, r, s, !0), rl(e, Te(e, !1, t)), r = s = e.position) : e.position === e.lineStart && Us(e) ? j(e, "unexpected end of the document within a double quoted scalar") : (e.position++, s = e.position);
  }
  j(e, "unexpected end of the stream within a double quoted scalar");
}
function bb(e, t) {
  var r = !0, s, a, l, u = e.tag, f, d = e.anchor, g, _, x, T, A, C = /* @__PURE__ */ Object.create(null), E, P, U, H;
  if (H = e.input.charCodeAt(e.position), H === 91)
    _ = 93, A = !1, f = [];
  else if (H === 123)
    _ = 125, A = !0, f = {};
  else
    return !1;
  for (e.anchor !== null && (e.anchorMap[e.anchor] = f), H = e.input.charCodeAt(++e.position); H !== 0; ) {
    if (Te(e, !0, t), H = e.input.charCodeAt(e.position), H === _)
      return e.position++, e.tag = u, e.anchor = d, e.kind = A ? "mapping" : "sequence", e.result = f, !0;
    r ? H === 44 && j(e, "expected the node content, but found ','") : j(e, "missed comma between flow collection entries"), P = E = U = null, x = T = !1, H === 63 && (g = e.input.charCodeAt(e.position + 1), nt(g) && (x = T = !0, e.position++, Te(e, !0, t))), s = e.line, a = e.lineStart, l = e.position, Rr(e, t, Cs, !1, !0), P = e.tag, E = e.result, Te(e, !0, t), H = e.input.charCodeAt(e.position), (T || e.line === s) && H === 58 && (x = !0, H = e.input.charCodeAt(++e.position), Te(e, !0, t), Rr(e, t, Cs, !1, !0), U = e.result), A ? br(e, f, C, P, E, U, s, a, l) : x ? f.push(br(e, null, C, P, E, U, s, a, l)) : f.push(E), Te(e, !0, t), H = e.input.charCodeAt(e.position), H === 44 ? (r = !0, H = e.input.charCodeAt(++e.position)) : r = !1;
  }
  j(e, "unexpected end of the stream within a flow collection");
}
function Eb(e, t) {
  var r, s, a = fo, l = !1, u = !1, f = t, d = 0, g = !1, _, x;
  if (x = e.input.charCodeAt(e.position), x === 124)
    s = !1;
  else if (x === 62)
    s = !0;
  else
    return !1;
  for (e.kind = "scalar", e.result = ""; x !== 0; )
    if (x = e.input.charCodeAt(++e.position), x === 43 || x === 45)
      fo === a ? a = x === 43 ? gf : cb : j(e, "repeat of a chomping mode identifier");
    else if ((_ = mb(x)) >= 0)
      _ === 0 ? j(e, "bad explicit indentation width of a block scalar; it cannot be less than one") : u ? j(e, "repeat of an indentation width identifier") : (f = t + _ - 1, u = !0);
    else
      break;
  if (Xn(x)) {
    do
      x = e.input.charCodeAt(++e.position);
    while (Xn(x));
    if (x === 35)
      do
        x = e.input.charCodeAt(++e.position);
      while (!Ht(x) && x !== 0);
  }
  for (; x !== 0; ) {
    for (nl(e), e.lineIndent = 0, x = e.input.charCodeAt(e.position); (!u || e.lineIndent < f) && x === 32; )
      e.lineIndent++, x = e.input.charCodeAt(++e.position);
    if (!u && e.lineIndent > f && (f = e.lineIndent), Ht(x)) {
      d++;
      continue;
    }
    if (e.lineIndent < f) {
      a === gf ? e.result += ke.repeat(`
`, l ? 1 + d : d) : a === fo && l && (e.result += `
`);
      break;
    }
    for (s ? Xn(x) ? (g = !0, e.result += ke.repeat(`
`, l ? 1 + d : d)) : g ? (g = !1, e.result += ke.repeat(`
`, d + 1)) : d === 0 ? l && (e.result += " ") : e.result += ke.repeat(`
`, d) : e.result += ke.repeat(`
`, l ? 1 + d : d), l = !0, u = !0, d = 0, r = e.position; !Ht(x) && x !== 0; )
      x = e.input.charCodeAt(++e.position);
    En(e, r, e.position, !1);
  }
  return !0;
}
function xf(e, t) {
  var r, s = e.tag, a = e.anchor, l = [], u, f = !1, d;
  if (e.firstTabInLine !== -1)
    return !1;
  for (e.anchor !== null && (e.anchorMap[e.anchor] = l), d = e.input.charCodeAt(e.position); d !== 0 && (e.firstTabInLine !== -1 && (e.position = e.firstTabInLine, j(e, "tab characters must not be used in indentation")), !(d !== 45 || (u = e.input.charCodeAt(e.position + 1), !nt(u)))); ) {
    if (f = !0, e.position++, Te(e, !0, -1) && e.lineIndent <= t) {
      l.push(null), d = e.input.charCodeAt(e.position);
      continue;
    }
    if (r = e.line, Rr(e, t, sd, !1, !0), l.push(e.result), Te(e, !0, -1), d = e.input.charCodeAt(e.position), (e.line === r || e.lineIndent > t) && d !== 0)
      j(e, "bad indentation of a sequence entry");
    else if (e.lineIndent < t)
      break;
  }
  return f ? (e.tag = s, e.anchor = a, e.kind = "sequence", e.result = l, !0) : !1;
}
function Ab(e, t, r) {
  var s, a, l, u, f, d, g = e.tag, _ = e.anchor, x = {}, T = /* @__PURE__ */ Object.create(null), A = null, C = null, E = null, P = !1, U = !1, H;
  if (e.firstTabInLine !== -1)
    return !1;
  for (e.anchor !== null && (e.anchorMap[e.anchor] = x), H = e.input.charCodeAt(e.position); H !== 0; ) {
    if (!P && e.firstTabInLine !== -1 && (e.position = e.firstTabInLine, j(e, "tab characters must not be used in indentation")), s = e.input.charCodeAt(e.position + 1), l = e.line, (H === 63 || H === 58) && nt(s))
      H === 63 ? (P && (br(e, x, T, A, C, null, u, f, d), A = C = E = null), U = !0, P = !0, a = !0) : P ? (P = !1, a = !0) : j(e, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"), e.position += 1, H = s;
    else {
      if (u = e.line, f = e.lineStart, d = e.position, !Rr(e, r, id, !1, !0))
        break;
      if (e.line === l) {
        for (H = e.input.charCodeAt(e.position); Xn(H); )
          H = e.input.charCodeAt(++e.position);
        if (H === 58)
          H = e.input.charCodeAt(++e.position), nt(H) || j(e, "a whitespace character is expected after the key-value separator within a block mapping"), P && (br(e, x, T, A, C, null, u, f, d), A = C = E = null), U = !0, P = !1, a = !1, A = e.tag, C = e.result;
        else if (U)
          j(e, "can not read an implicit mapping pair; a colon is missed");
        else
          return e.tag = g, e.anchor = _, !0;
      } else if (U)
        j(e, "can not read a block mapping entry; a multiline key may not be an implicit key");
      else
        return e.tag = g, e.anchor = _, !0;
    }
    if ((e.line === l || e.lineIndent > t) && (P && (u = e.line, f = e.lineStart, d = e.position), Rr(e, t, Ts, !0, a) && (P ? C = e.result : E = e.result), P || (br(e, x, T, A, C, E, u, f, d), A = C = E = null), Te(e, !0, -1), H = e.input.charCodeAt(e.position)), (e.line === l || e.lineIndent > t) && H !== 0)
      j(e, "bad indentation of a mapping entry");
    else if (e.lineIndent < t)
      break;
  }
  return P && br(e, x, T, A, C, null, u, f, d), U && (e.tag = g, e.anchor = _, e.kind = "mapping", e.result = x), U;
}
function Cb(e) {
  var t, r = !1, s = !1, a, l, u;
  if (u = e.input.charCodeAt(e.position), u !== 33)
    return !1;
  if (e.tag !== null && j(e, "duplication of a tag property"), u = e.input.charCodeAt(++e.position), u === 60 ? (r = !0, u = e.input.charCodeAt(++e.position)) : u === 33 ? (s = !0, a = "!!", u = e.input.charCodeAt(++e.position)) : a = "!", t = e.position, r) {
    do
      u = e.input.charCodeAt(++e.position);
    while (u !== 0 && u !== 62);
    e.position < e.length ? (l = e.input.slice(t, e.position), u = e.input.charCodeAt(++e.position)) : j(e, "unexpected end of the stream within a verbatim tag");
  } else {
    for (; u !== 0 && !nt(u); )
      u === 33 && (s ? j(e, "tag suffix cannot contain exclamation marks") : (a = e.input.slice(t - 1, e.position + 1), ad.test(a) || j(e, "named tag handle cannot contain such characters"), s = !0, t = e.position + 1)), u = e.input.charCodeAt(++e.position);
    l = e.input.slice(t, e.position), hb.test(l) && j(e, "tag suffix cannot contain flow indicator characters");
  }
  l && !od.test(l) && j(e, "tag name cannot contain such characters: " + l);
  try {
    l = decodeURIComponent(l);
  } catch {
    j(e, "tag name is malformed: " + l);
  }
  return r ? e.tag = l : Sn.call(e.tagMap, a) ? e.tag = e.tagMap[a] + l : a === "!" ? e.tag = "!" + l : a === "!!" ? e.tag = "tag:yaml.org,2002:" + l : j(e, 'undeclared tag handle "' + a + '"'), !0;
}
function Tb(e) {
  var t, r;
  if (r = e.input.charCodeAt(e.position), r !== 38)
    return !1;
  for (e.anchor !== null && j(e, "duplication of an anchor property"), r = e.input.charCodeAt(++e.position), t = e.position; r !== 0 && !nt(r) && !wr(r); )
    r = e.input.charCodeAt(++e.position);
  return e.position === t && j(e, "name of an anchor node must contain at least one character"), e.anchor = e.input.slice(t, e.position), !0;
}
function Sb(e) {
  var t, r, s;
  if (s = e.input.charCodeAt(e.position), s !== 42)
    return !1;
  for (s = e.input.charCodeAt(++e.position), t = e.position; s !== 0 && !nt(s) && !wr(s); )
    s = e.input.charCodeAt(++e.position);
  return e.position === t && j(e, "name of an alias node must contain at least one character"), r = e.input.slice(t, e.position), Sn.call(e.anchorMap, r) || j(e, 'unidentified alias "' + r + '"'), e.result = e.anchorMap[r], Te(e, !0, -1), !0;
}
function Rr(e, t, r, s, a) {
  var l, u, f, d = 1, g = !1, _ = !1, x, T, A, C, E, P;
  if (e.listener !== null && e.listener("open", e), e.tag = null, e.anchor = null, e.kind = null, e.result = null, l = u = f = Ts === r || sd === r, s && Te(e, !0, -1) && (g = !0, e.lineIndent > t ? d = 1 : e.lineIndent === t ? d = 0 : e.lineIndent < t && (d = -1)), d === 1)
    for (; Cb(e) || Tb(e); )
      Te(e, !0, -1) ? (g = !0, f = l, e.lineIndent > t ? d = 1 : e.lineIndent === t ? d = 0 : e.lineIndent < t && (d = -1)) : f = !1;
  if (f && (f = g || a), (d === 1 || Ts === r) && (Cs === r || id === r ? E = t : E = t + 1, P = e.position - e.lineStart, d === 1 ? f && (xf(e, P) || Ab(e, P, E)) || bb(e, E) ? _ = !0 : (u && Eb(e, E) || xb(e, E) || wb(e, E) ? _ = !0 : Sb(e) ? (_ = !0, (e.tag !== null || e.anchor !== null) && j(e, "alias node should not have any properties")) : _b(e, E, Cs === r) && (_ = !0, e.tag === null && (e.tag = "?")), e.anchor !== null && (e.anchorMap[e.anchor] = e.result)) : d === 0 && (_ = f && xf(e, P))), e.tag === null)
    e.anchor !== null && (e.anchorMap[e.anchor] = e.result);
  else if (e.tag === "?") {
    for (e.result !== null && e.kind !== "scalar" && j(e, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + e.kind + '"'), x = 0, T = e.implicitTypes.length; x < T; x += 1)
      if (C = e.implicitTypes[x], C.resolve(e.result)) {
        e.result = C.construct(e.result), e.tag = C.tag, e.anchor !== null && (e.anchorMap[e.anchor] = e.result);
        break;
      }
  } else if (e.tag !== "!") {
    if (Sn.call(e.typeMap[e.kind || "fallback"], e.tag))
      C = e.typeMap[e.kind || "fallback"][e.tag];
    else
      for (C = null, A = e.typeMap.multi[e.kind || "fallback"], x = 0, T = A.length; x < T; x += 1)
        if (e.tag.slice(0, A[x].tag.length) === A[x].tag) {
          C = A[x];
          break;
        }
    C || j(e, "unknown tag !<" + e.tag + ">"), e.result !== null && C.kind !== e.kind && j(e, "unacceptable node kind for !<" + e.tag + '> tag; it should be "' + C.kind + '", not "' + e.kind + '"'), C.resolve(e.result, e.tag) ? (e.result = C.construct(e.result, e.tag), e.anchor !== null && (e.anchorMap[e.anchor] = e.result)) : j(e, "cannot resolve a node with !<" + e.tag + "> explicit tag");
  }
  return e.listener !== null && e.listener("close", e), e.tag !== null || e.anchor !== null || _;
}
function Lb(e) {
  var t = e.position, r, s, a, l = !1, u;
  for (e.version = null, e.checkLineBreaks = e.legacy, e.tagMap = /* @__PURE__ */ Object.create(null), e.anchorMap = /* @__PURE__ */ Object.create(null); (u = e.input.charCodeAt(e.position)) !== 0 && (Te(e, !0, -1), u = e.input.charCodeAt(e.position), !(e.lineIndent > 0 || u !== 37)); ) {
    for (l = !0, u = e.input.charCodeAt(++e.position), r = e.position; u !== 0 && !nt(u); )
      u = e.input.charCodeAt(++e.position);
    for (s = e.input.slice(r, e.position), a = [], s.length < 1 && j(e, "directive name must not be less than one character in length"); u !== 0; ) {
      for (; Xn(u); )
        u = e.input.charCodeAt(++e.position);
      if (u === 35) {
        do
          u = e.input.charCodeAt(++e.position);
        while (u !== 0 && !Ht(u));
        break;
      }
      if (Ht(u))
        break;
      for (r = e.position; u !== 0 && !nt(u); )
        u = e.input.charCodeAt(++e.position);
      a.push(e.input.slice(r, e.position));
    }
    u !== 0 && nl(e), Sn.call(yf, s) ? yf[s](e, s, a) : Ss(e, 'unknown document directive "' + s + '"');
  }
  if (Te(e, !0, -1), e.lineIndent === 0 && e.input.charCodeAt(e.position) === 45 && e.input.charCodeAt(e.position + 1) === 45 && e.input.charCodeAt(e.position + 2) === 45 ? (e.position += 3, Te(e, !0, -1)) : l && j(e, "directives end mark is expected"), Rr(e, e.lineIndent - 1, Ts, !1, !0), Te(e, !0, -1), e.checkLineBreaks && db.test(e.input.slice(t, e.position)) && Ss(e, "non-ASCII line breaks are interpreted as content"), e.documents.push(e.result), e.position === e.lineStart && Us(e)) {
    e.input.charCodeAt(e.position) === 46 && (e.position += 3, Te(e, !0, -1));
    return;
  }
  if (e.position < e.length - 1)
    j(e, "end of the stream or a document separator is expected");
  else
    return;
}
function fd(e, t) {
  e = String(e), t = t || {}, e.length !== 0 && (e.charCodeAt(e.length - 1) !== 10 && e.charCodeAt(e.length - 1) !== 13 && (e += `
`), e.charCodeAt(0) === 65279 && (e = e.slice(1)));
  var r = new yb(e, t), s = e.indexOf("\0");
  for (s !== -1 && (r.position = s, j(r, "null byte is not allowed in input")), r.input += "\0"; r.input.charCodeAt(r.position) === 32; )
    r.lineIndent += 1, r.position += 1;
  for (; r.position < r.length - 1; )
    Lb(r);
  return r.documents;
}
function Ob(e, t, r) {
  t !== null && typeof t == "object" && typeof r > "u" && (r = t, t = null);
  var s = fd(e, r);
  if (typeof t != "function")
    return s;
  for (var a = 0, l = s.length; a < l; a += 1)
    t(s[a]);
}
function Nb(e, t) {
  var r = fd(e, t);
  if (r.length !== 0) {
    if (r.length === 1)
      return r[0];
    throw new tt("expected a single document in the stream, but found more");
  }
}
var Ib = Ob, kb = Nb, Rb = {
  loadAll: Ib,
  load: kb
}, dd = Object.prototype.toString, hd = Object.prototype.hasOwnProperty, il = 65279, Pb = 9, ci = 10, Fb = 13, Bb = 32, Mb = 33, $b = 34, ko = 35, Db = 37, Wb = 38, Ub = 39, Hb = 42, pd = 44, Zb = 45, Ls = 58, Vb = 61, jb = 62, Gb = 63, Yb = 64, gd = 91, md = 93, qb = 96, vd = 123, zb = 124, yd = 125, He = {};
He[0] = "\\0";
He[7] = "\\a";
He[8] = "\\b";
He[9] = "\\t";
He[10] = "\\n";
He[11] = "\\v";
He[12] = "\\f";
He[13] = "\\r";
He[27] = "\\e";
He[34] = '\\"';
He[92] = "\\\\";
He[133] = "\\N";
He[160] = "\\_";
He[8232] = "\\L";
He[8233] = "\\P";
var Kb = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
], Xb = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function Jb(e, t) {
  var r, s, a, l, u, f, d;
  if (t === null)
    return {};
  for (r = {}, s = Object.keys(t), a = 0, l = s.length; a < l; a += 1)
    u = s[a], f = String(t[u]), u.slice(0, 2) === "!!" && (u = "tag:yaml.org,2002:" + u.slice(2)), d = e.compiledTypeMap.fallback[u], d && hd.call(d.styleAliases, f) && (f = d.styleAliases[f]), r[u] = f;
  return r;
}
function Qb(e) {
  var t, r, s;
  if (t = e.toString(16).toUpperCase(), e <= 255)
    r = "x", s = 2;
  else if (e <= 65535)
    r = "u", s = 4;
  else if (e <= 4294967295)
    r = "U", s = 8;
  else
    throw new tt("code point within a string may not be greater than 0xFFFFFFFF");
  return "\\" + r + ke.repeat("0", s - t.length) + t;
}
var eE = 1, fi = 2;
function tE(e) {
  this.schema = e.schema || rd, this.indent = Math.max(1, e.indent || 2), this.noArrayIndent = e.noArrayIndent || !1, this.skipInvalid = e.skipInvalid || !1, this.flowLevel = ke.isNothing(e.flowLevel) ? -1 : e.flowLevel, this.styleMap = Jb(this.schema, e.styles || null), this.sortKeys = e.sortKeys || !1, this.lineWidth = e.lineWidth || 80, this.noRefs = e.noRefs || !1, this.noCompatMode = e.noCompatMode || !1, this.condenseFlow = e.condenseFlow || !1, this.quotingType = e.quotingType === '"' ? fi : eE, this.forceQuotes = e.forceQuotes || !1, this.replacer = typeof e.replacer == "function" ? e.replacer : null, this.implicitTypes = this.schema.compiledImplicit, this.explicitTypes = this.schema.compiledExplicit, this.tag = null, this.result = "", this.duplicates = [], this.usedDuplicates = null;
}
function wf(e, t) {
  for (var r = ke.repeat(" ", t), s = 0, a = -1, l = "", u, f = e.length; s < f; )
    a = e.indexOf(`
`, s), a === -1 ? (u = e.slice(s), s = f) : (u = e.slice(s, a + 1), s = a + 1), u.length && u !== `
` && (l += r), l += u;
  return l;
}
function Ro(e, t) {
  return `
` + ke.repeat(" ", e.indent * t);
}
function nE(e, t) {
  var r, s, a;
  for (r = 0, s = e.implicitTypes.length; r < s; r += 1)
    if (a = e.implicitTypes[r], a.resolve(t))
      return !0;
  return !1;
}
function Os(e) {
  return e === Bb || e === Pb;
}
function di(e) {
  return 32 <= e && e <= 126 || 161 <= e && e <= 55295 && e !== 8232 && e !== 8233 || 57344 <= e && e <= 65533 && e !== il || 65536 <= e && e <= 1114111;
}
function bf(e) {
  return di(e) && e !== il && e !== Fb && e !== ci;
}
function Ef(e, t, r) {
  var s = bf(e), a = s && !Os(e);
  return (
    // ns-plain-safe
    (r ? (
      // c = flow-in
      s
    ) : s && e !== pd && e !== gd && e !== md && e !== vd && e !== yd) && e !== ko && !(t === Ls && !a) || bf(t) && !Os(t) && e === ko || t === Ls && a
  );
}
function rE(e) {
  return di(e) && e !== il && !Os(e) && e !== Zb && e !== Gb && e !== Ls && e !== pd && e !== gd && e !== md && e !== vd && e !== yd && e !== ko && e !== Wb && e !== Hb && e !== Mb && e !== zb && e !== Vb && e !== jb && e !== Ub && e !== $b && e !== Db && e !== Yb && e !== qb;
}
function iE(e) {
  return !Os(e) && e !== Ls;
}
function ii(e, t) {
  var r = e.charCodeAt(t), s;
  return r >= 55296 && r <= 56319 && t + 1 < e.length && (s = e.charCodeAt(t + 1), s >= 56320 && s <= 57343) ? (r - 55296) * 1024 + s - 56320 + 65536 : r;
}
function _d(e) {
  var t = /^\n* /;
  return t.test(e);
}
var xd = 1, Po = 2, wd = 3, bd = 4, xr = 5;
function sE(e, t, r, s, a, l, u, f) {
  var d, g = 0, _ = null, x = !1, T = !1, A = s !== -1, C = -1, E = rE(ii(e, 0)) && iE(ii(e, e.length - 1));
  if (t || u)
    for (d = 0; d < e.length; g >= 65536 ? d += 2 : d++) {
      if (g = ii(e, d), !di(g))
        return xr;
      E = E && Ef(g, _, f), _ = g;
    }
  else {
    for (d = 0; d < e.length; g >= 65536 ? d += 2 : d++) {
      if (g = ii(e, d), g === ci)
        x = !0, A && (T = T || // Foldable line = too long, and not more-indented.
        d - C - 1 > s && e[C + 1] !== " ", C = d);
      else if (!di(g))
        return xr;
      E = E && Ef(g, _, f), _ = g;
    }
    T = T || A && d - C - 1 > s && e[C + 1] !== " ";
  }
  return !x && !T ? E && !u && !a(e) ? xd : l === fi ? xr : Po : r > 9 && _d(e) ? xr : u ? l === fi ? xr : Po : T ? bd : wd;
}
function aE(e, t, r, s, a) {
  e.dump = function() {
    if (t.length === 0)
      return e.quotingType === fi ? '""' : "''";
    if (!e.noCompatMode && (Kb.indexOf(t) !== -1 || Xb.test(t)))
      return e.quotingType === fi ? '"' + t + '"' : "'" + t + "'";
    var l = e.indent * Math.max(1, r), u = e.lineWidth === -1 ? -1 : Math.max(Math.min(e.lineWidth, 40), e.lineWidth - l), f = s || e.flowLevel > -1 && r >= e.flowLevel;
    function d(g) {
      return nE(e, g);
    }
    switch (sE(
      t,
      f,
      e.indent,
      u,
      d,
      e.quotingType,
      e.forceQuotes && !s,
      a
    )) {
      case xd:
        return t;
      case Po:
        return "'" + t.replace(/'/g, "''") + "'";
      case wd:
        return "|" + Af(t, e.indent) + Cf(wf(t, l));
      case bd:
        return ">" + Af(t, e.indent) + Cf(wf(oE(t, u), l));
      case xr:
        return '"' + lE(t) + '"';
      default:
        throw new tt("impossible error: invalid scalar style");
    }
  }();
}
function Af(e, t) {
  var r = _d(e) ? String(t) : "", s = e[e.length - 1] === `
`, a = s && (e[e.length - 2] === `
` || e === `
`), l = a ? "+" : s ? "" : "-";
  return r + l + `
`;
}
function Cf(e) {
  return e[e.length - 1] === `
` ? e.slice(0, -1) : e;
}
function oE(e, t) {
  for (var r = /(\n+)([^\n]*)/g, s = function() {
    var g = e.indexOf(`
`);
    return g = g !== -1 ? g : e.length, r.lastIndex = g, Tf(e.slice(0, g), t);
  }(), a = e[0] === `
` || e[0] === " ", l, u; u = r.exec(e); ) {
    var f = u[1], d = u[2];
    l = d[0] === " ", s += f + (!a && !l && d !== "" ? `
` : "") + Tf(d, t), a = l;
  }
  return s;
}
function Tf(e, t) {
  if (e === "" || e[0] === " ")
    return e;
  for (var r = / [^ ]/g, s, a = 0, l, u = 0, f = 0, d = ""; s = r.exec(e); )
    f = s.index, f - a > t && (l = u > a ? u : f, d += `
` + e.slice(a, l), a = l + 1), u = f;
  return d += `
`, e.length - a > t && u > a ? d += e.slice(a, u) + `
` + e.slice(u + 1) : d += e.slice(a), d.slice(1);
}
function lE(e) {
  for (var t = "", r = 0, s, a = 0; a < e.length; r >= 65536 ? a += 2 : a++)
    r = ii(e, a), s = He[r], !s && di(r) ? (t += e[a], r >= 65536 && (t += e[a + 1])) : t += s || Qb(r);
  return t;
}
function uE(e, t, r) {
  var s = "", a = e.tag, l, u, f;
  for (l = 0, u = r.length; l < u; l += 1)
    f = r[l], e.replacer && (f = e.replacer.call(r, String(l), f)), (un(e, t, f, !1, !1) || typeof f > "u" && un(e, t, null, !1, !1)) && (s !== "" && (s += "," + (e.condenseFlow ? "" : " ")), s += e.dump);
  e.tag = a, e.dump = "[" + s + "]";
}
function Sf(e, t, r, s) {
  var a = "", l = e.tag, u, f, d;
  for (u = 0, f = r.length; u < f; u += 1)
    d = r[u], e.replacer && (d = e.replacer.call(r, String(u), d)), (un(e, t + 1, d, !0, !0, !1, !0) || typeof d > "u" && un(e, t + 1, null, !0, !0, !1, !0)) && ((!s || a !== "") && (a += Ro(e, t)), e.dump && ci === e.dump.charCodeAt(0) ? a += "-" : a += "- ", a += e.dump);
  e.tag = l, e.dump = a || "[]";
}
function cE(e, t, r) {
  var s = "", a = e.tag, l = Object.keys(r), u, f, d, g, _;
  for (u = 0, f = l.length; u < f; u += 1)
    _ = "", s !== "" && (_ += ", "), e.condenseFlow && (_ += '"'), d = l[u], g = r[d], e.replacer && (g = e.replacer.call(r, d, g)), un(e, t, d, !1, !1) && (e.dump.length > 1024 && (_ += "? "), _ += e.dump + (e.condenseFlow ? '"' : "") + ":" + (e.condenseFlow ? "" : " "), un(e, t, g, !1, !1) && (_ += e.dump, s += _));
  e.tag = a, e.dump = "{" + s + "}";
}
function fE(e, t, r, s) {
  var a = "", l = e.tag, u = Object.keys(r), f, d, g, _, x, T;
  if (e.sortKeys === !0)
    u.sort();
  else if (typeof e.sortKeys == "function")
    u.sort(e.sortKeys);
  else if (e.sortKeys)
    throw new tt("sortKeys must be a boolean or a function");
  for (f = 0, d = u.length; f < d; f += 1)
    T = "", (!s || a !== "") && (T += Ro(e, t)), g = u[f], _ = r[g], e.replacer && (_ = e.replacer.call(r, g, _)), un(e, t + 1, g, !0, !0, !0) && (x = e.tag !== null && e.tag !== "?" || e.dump && e.dump.length > 1024, x && (e.dump && ci === e.dump.charCodeAt(0) ? T += "?" : T += "? "), T += e.dump, x && (T += Ro(e, t)), un(e, t + 1, _, !0, x) && (e.dump && ci === e.dump.charCodeAt(0) ? T += ":" : T += ": ", T += e.dump, a += T));
  e.tag = l, e.dump = a || "{}";
}
function Lf(e, t, r) {
  var s, a, l, u, f, d;
  for (a = r ? e.explicitTypes : e.implicitTypes, l = 0, u = a.length; l < u; l += 1)
    if (f = a[l], (f.instanceOf || f.predicate) && (!f.instanceOf || typeof t == "object" && t instanceof f.instanceOf) && (!f.predicate || f.predicate(t))) {
      if (r ? f.multi && f.representName ? e.tag = f.representName(t) : e.tag = f.tag : e.tag = "?", f.represent) {
        if (d = e.styleMap[f.tag] || f.defaultStyle, dd.call(f.represent) === "[object Function]")
          s = f.represent(t, d);
        else if (hd.call(f.represent, d))
          s = f.represent[d](t, d);
        else
          throw new tt("!<" + f.tag + '> tag resolver accepts not "' + d + '" style');
        e.dump = s;
      }
      return !0;
    }
  return !1;
}
function un(e, t, r, s, a, l, u) {
  e.tag = null, e.dump = r, Lf(e, r, !1) || Lf(e, r, !0);
  var f = dd.call(e.dump), d = s, g;
  s && (s = e.flowLevel < 0 || e.flowLevel > t);
  var _ = f === "[object Object]" || f === "[object Array]", x, T;
  if (_ && (x = e.duplicates.indexOf(r), T = x !== -1), (e.tag !== null && e.tag !== "?" || T || e.indent !== 2 && t > 0) && (a = !1), T && e.usedDuplicates[x])
    e.dump = "*ref_" + x;
  else {
    if (_ && T && !e.usedDuplicates[x] && (e.usedDuplicates[x] = !0), f === "[object Object]")
      s && Object.keys(e.dump).length !== 0 ? (fE(e, t, e.dump, a), T && (e.dump = "&ref_" + x + e.dump)) : (cE(e, t, e.dump), T && (e.dump = "&ref_" + x + " " + e.dump));
    else if (f === "[object Array]")
      s && e.dump.length !== 0 ? (e.noArrayIndent && !u && t > 0 ? Sf(e, t - 1, e.dump, a) : Sf(e, t, e.dump, a), T && (e.dump = "&ref_" + x + e.dump)) : (uE(e, t, e.dump), T && (e.dump = "&ref_" + x + " " + e.dump));
    else if (f === "[object String]")
      e.tag !== "?" && aE(e, e.dump, t, l, d);
    else {
      if (f === "[object Undefined]")
        return !1;
      if (e.skipInvalid)
        return !1;
      throw new tt("unacceptable kind of an object to dump " + f);
    }
    e.tag !== null && e.tag !== "?" && (g = encodeURI(
      e.tag[0] === "!" ? e.tag.slice(1) : e.tag
    ).replace(/!/g, "%21"), e.tag[0] === "!" ? g = "!" + g : g.slice(0, 18) === "tag:yaml.org,2002:" ? g = "!!" + g.slice(18) : g = "!<" + g + ">", e.dump = g + " " + e.dump);
  }
  return !0;
}
function dE(e, t) {
  var r = [], s = [], a, l;
  for (Fo(e, r, s), a = 0, l = s.length; a < l; a += 1)
    t.duplicates.push(r[s[a]]);
  t.usedDuplicates = new Array(l);
}
function Fo(e, t, r) {
  var s, a, l;
  if (e !== null && typeof e == "object")
    if (a = t.indexOf(e), a !== -1)
      r.indexOf(a) === -1 && r.push(a);
    else if (t.push(e), Array.isArray(e))
      for (a = 0, l = e.length; a < l; a += 1)
        Fo(e[a], t, r);
    else
      for (s = Object.keys(e), a = 0, l = s.length; a < l; a += 1)
        Fo(e[s[a]], t, r);
}
function hE(e, t) {
  t = t || {};
  var r = new tE(t);
  r.noRefs || dE(e, r);
  var s = e;
  return r.replacer && (s = r.replacer.call({ "": s }, "", s)), un(r, 0, s, !0, !0) ? r.dump + `
` : "";
}
var pE = hE, gE = {
  dump: pE
}, mE = Rb.load, vE = gE.dump, Bo = { exports: {} }, Mo = { exports: {} };
(function(e, t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.ParsingError = void 0;
  class r extends Error {
    constructor(Z, k) {
      super(Z), this.cause = k;
    }
  }
  t.ParsingError = r;
  let s;
  function a() {
    return d(!1) || T() || x() || _();
  }
  function l() {
    return E(/\s*/), d(!0) || x() || g() || f(!1);
  }
  function u() {
    const $ = f(!0), Z = [];
    let k, se = l();
    for (; se; ) {
      if (se.node.type === "Element") {
        if (k)
          throw new Error("Found multiple root nodes");
        k = se.node;
      }
      se.excluded || Z.push(se.node), se = l();
    }
    if (!k)
      throw new r("Failed to parse XML", "Root Element not found");
    if (s.xml.length !== 0)
      throw new r("Failed to parse XML", "Not Well-Formed XML");
    return {
      declaration: $ ? $.node : null,
      root: k,
      children: Z
    };
  }
  function f($) {
    const Z = E($ ? /^<\?(xml)\s*/ : /^<\?([\w-:.]+)\s*/);
    if (!Z)
      return;
    const k = {
      name: Z[1],
      type: "ProcessingInstruction",
      attributes: {}
    };
    for (; !(P() || U("?>")); ) {
      const se = A();
      if (se)
        k.attributes[se.name] = se.value;
      else
        return;
    }
    return E(/\?>/), {
      excluded: $ ? !1 : s.options.filter(k) === !1,
      node: k
    };
  }
  function d($) {
    const Z = E(/^<([^?!</>\s]+)\s*/);
    if (!Z)
      return;
    const k = {
      type: "Element",
      name: Z[1],
      attributes: {},
      children: []
    }, se = $ ? !1 : s.options.filter(k) === !1;
    for (; !(P() || U(">") || U("?>") || U("/>")); ) {
      const ge = A();
      if (ge)
        k.attributes[ge.name] = ge.value;
      else
        return;
    }
    if (E(/^\s*\/>/))
      return k.children = null, {
        excluded: se,
        node: k
      };
    E(/\??>/);
    let Y = a();
    for (; Y; )
      Y.excluded || k.children.push(Y.node), Y = a();
    if (s.options.strictMode) {
      const ge = `</${k.name}>`;
      if (s.xml.startsWith(ge))
        s.xml = s.xml.slice(ge.length);
      else
        throw new r("Failed to parse XML", `Closing tag not matching "${ge}"`);
    } else
      E(/^<\/\s*[\w-:.\u00C0-\u00FF]+>/);
    return {
      excluded: se,
      node: k
    };
  }
  function g() {
    const $ = E(/^<!DOCTYPE\s+\S+\s+SYSTEM[^>]*>/) || E(/^<!DOCTYPE\s+\S+\s+PUBLIC[^>]*>/) || E(/^<!DOCTYPE\s+\S+\s*\[[^\]]*]>/) || E(/^<!DOCTYPE\s+\S+\s*>/);
    if ($) {
      const Z = {
        type: "DocumentType",
        content: $[0]
      };
      return {
        excluded: s.options.filter(Z) === !1,
        node: Z
      };
    }
  }
  function _() {
    if (s.xml.startsWith("<![CDATA[")) {
      const $ = s.xml.indexOf("]]>");
      if ($ > -1) {
        const Z = $ + 3, k = {
          type: "CDATA",
          content: s.xml.substring(0, Z)
        };
        return s.xml = s.xml.slice(Z), {
          excluded: s.options.filter(k) === !1,
          node: k
        };
      }
    }
  }
  function x() {
    const $ = E(/^<!--[\s\S]*?-->/);
    if ($) {
      const Z = {
        type: "Comment",
        content: $[0]
      };
      return {
        excluded: s.options.filter(Z) === !1,
        node: Z
      };
    }
  }
  function T() {
    const $ = E(/^([^<]+)/);
    if ($) {
      const Z = {
        type: "Text",
        content: $[1]
      };
      return {
        excluded: s.options.filter(Z) === !1,
        node: Z
      };
    }
  }
  function A() {
    const $ = E(/([^=]+)\s*=\s*("[^"]*"|'[^']*'|[^>\s]+)\s*/);
    if ($)
      return {
        name: $[1].trim(),
        value: C($[2].trim())
      };
  }
  function C($) {
    return $.replace(/^['"]|['"]$/g, "");
  }
  function E($) {
    const Z = s.xml.match($);
    if (Z)
      return s.xml = s.xml.slice(Z[0].length), Z;
  }
  function P() {
    return s.xml.length === 0;
  }
  function U($) {
    return s.xml.indexOf($) === 0;
  }
  function H($, Z = {}) {
    $ = $.trim();
    const k = Z.filter || (() => !0);
    return s = {
      xml: $,
      options: Object.assign(Object.assign({}, Z), { filter: k, strictMode: Z.strictMode === !0 })
    }, u();
  }
  e.exports = H, t.default = H;
})(Mo, Mo.exports);
var yE = Mo.exports;
(function(e, t) {
  var r = Wn && Wn.__importDefault || function(C) {
    return C && C.__esModule ? C : { default: C };
  };
  Object.defineProperty(t, "__esModule", { value: !0 });
  const s = r(yE);
  function a(C) {
    if (!C.options.indentation && !C.options.lineSeparator)
      return;
    C.content += C.options.lineSeparator;
    let E;
    for (E = 0; E < C.level; E++)
      C.content += C.options.indentation;
  }
  function l(C) {
    C.content = C.content.replace(/ +$/, "");
    let E;
    for (E = 0; E < C.level; E++)
      C.content += C.options.indentation;
  }
  function u(C, E) {
    C.content += E;
  }
  function f(C, E, P) {
    if (typeof C.content == "string")
      d(C.content, E, P);
    else if (C.type === "Element")
      _(C, E, P);
    else if (C.type === "ProcessingInstruction")
      T(C, E);
    else
      throw new Error("Unknown node type: " + C.type);
  }
  function d(C, E, P) {
    if (!P) {
      const U = C.trim();
      (E.options.lineSeparator || U.length === 0) && (C = U);
    }
    C.length > 0 && (!P && E.content.length > 0 && a(E), u(E, C));
  }
  function g(C, E) {
    const P = "/" + C.join("/"), U = C[C.length - 1];
    return E.includes(U) || E.includes(P);
  }
  function _(C, E, P) {
    if (E.path.push(C.name), !P && E.content.length > 0 && a(E), u(E, "<" + C.name), x(E, C.attributes), C.children === null || E.options.forceSelfClosingEmptyTag && C.children.length === 0) {
      const U = E.options.whiteSpaceAtEndOfSelfclosingTag ? " />" : "/>";
      u(E, U);
    } else if (C.children.length === 0)
      u(E, "></" + C.name + ">");
    else {
      const U = C.children;
      u(E, ">"), E.level++;
      let H = C.attributes["xml:space"] === "preserve", $ = !1;
      if (!H && E.options.ignoredPaths && ($ = g(E.path, E.options.ignoredPaths), H = $), !H && E.options.collapseContent) {
        let Z = !1, k = !1, se = !1;
        U.forEach(function(Y, ge) {
          Y.type === "Text" ? (Y.content.includes(`
`) ? (k = !0, Y.content = Y.content.trim()) : (ge === 0 || ge === U.length - 1) && Y.content.trim().length === 0 && (Y.content = ""), Y.content.trim().length > 0 && (Z = !0)) : Y.type === "CDATA" ? Z = !0 : se = !0;
        }), Z && (!se || !k) && (H = !0);
      }
      U.forEach(function(Z) {
        f(Z, E, P || H);
      }), E.level--, !P && !H && a(E), $ && l(E), u(E, "</" + C.name + ">");
    }
    E.path.pop();
  }
  function x(C, E) {
    Object.keys(E).forEach(function(P) {
      const U = E[P].replace(/"/g, "&quot;");
      u(C, " " + P + '="' + U + '"');
    });
  }
  function T(C, E) {
    E.content.length > 0 && a(E), u(E, "<?" + C.name), x(E, C.attributes), u(E, "?>");
  }
  function A(C, E = {}) {
    E.indentation = "indentation" in E ? E.indentation : "    ", E.collapseContent = E.collapseContent === !0, E.lineSeparator = "lineSeparator" in E ? E.lineSeparator : `\r
`, E.whiteSpaceAtEndOfSelfclosingTag = E.whiteSpaceAtEndOfSelfclosingTag === !0, E.throwOnFailure = E.throwOnFailure !== !1;
    try {
      const P = (0, s.default)(C, { filter: E.filter, strictMode: E.strictMode }), U = { content: "", level: 0, options: E, path: [] };
      return P.declaration && T(P.declaration, U), P.children.forEach(function(H) {
        f(H, U, !1);
      }), E.lineSeparator ? U.content.replace(/\r\n/g, `
`).replace(/\n/g, E.lineSeparator) : U.content;
    } catch (P) {
      if (E.throwOnFailure)
        throw P;
      return C;
    }
  }
  A.minify = (C, E = {}) => A(C, Object.assign(Object.assign({}, E), { indentation: "", lineSeparator: "" })), e.exports = A, t.default = A;
})(Bo, Bo.exports);
var _E = Bo.exports;
const xE = /* @__PURE__ */ $o(_E);
class It {
  constructor(t, r, s) {
    B(this, "rawData");
    B(this, "parsedData", af);
    B(this, "params");
    B(this, "path", []);
    this.params = s, this.rawData = this.deserializeData(t, r), this.parsedData = this.addMetaDataRecursively(this.rawData, "root"), this.normalizingRules();
  }
  /**
   * This method returns the data
   */
  getData(t) {
    const r = {};
    for (const [s, a] of this.iterateOverProperties()) {
      if (a.length === 1)
        continue;
      const l = It.convertPathArrayToStringPathFormat(a, !1);
      Ie.set(r, l, Vc(s._value));
    }
    return this.serializeData(r, t);
  }
  /**
   * This method converts DataType string into a JS object
   *
   * @param {string | any} data is the data string
   * @param {DataType} dataType is the data type
   * @returns {AnyObject} javascript object
   */
  deserializeData(t, r) {
    switch (r) {
      case et.Js:
        return t;
      case et.Json:
        try {
          return JSON.parse(t);
        } catch (s) {
          throw new Error(s);
        }
      case et.Yaml:
        try {
          return mE(t);
        } catch (s) {
          throw new Error(s);
        }
      case et.Xml:
        try {
          xE(t);
          const s = new Kc.XMLParser().parse(t), a = Object.keys(s)[0];
          return this.params.xmlRootName = a, s[a];
        } catch (s) {
          throw new Error(s);
        }
      case et.Toml:
        try {
          return Wx(t);
        } catch (s) {
          throw new Error(s);
        }
      default:
        throw new Error("Invalid datatype");
    }
  }
  /**
   * This method converts JS object into a DataType string
   *
   * @param {string} data is the data JS object
   * @param {DataType} dataType is the data type
   * @returns {AnyObject} is data string
   */
  serializeData(t, r) {
    switch (r) {
      case et.Js:
        return t;
      case et.Json:
        try {
          return JSON.stringify(t);
        } catch (s) {
          throw new Error(s);
        }
      case et.Yaml:
        try {
          return vE(t);
        } catch (s) {
          throw new Error(s);
        }
      case et.Xml:
        try {
          const s = {};
          return this.params.xmlRootName !== void 0 ? s[this.params.xmlRootName] = t : s.root = t, new Kc.XMLBuilder().build(s);
        } catch (s) {
          throw new Error(s);
        }
      case et.Toml:
        try {
          const s = Ie.cloneDeepWith(t, (a) => {
            if (a instanceof Date)
              return a = new us(a.toISOString().split("T")[0]), a;
          });
          return jx(s);
        } catch (s) {
          throw new Error(s);
        }
      default:
        throw new Error("Invalid datatype");
    }
  }
  /**
   * This method adds meta data (private properties) to the data object and all its
   * nested properties if they dont have it and ignore the ones that have it
   *
   * @param {Property} field is the input you want to add meta data to it and to its properties
   * @param {string} key the key of that property
   * @returns {Property} the new object containing required meta data (includes meta data added by the user)
   */
  addMetaDataRecursively(t, r, s = !1) {
    const a = s ? parseInt(r) : r;
    this.path.push(a);
    let l = wt(t);
    if (wt(t) === Ne.Object && "_value" in t && (l = wt(t._value)), l === Ne.Object) {
      t = It.addRequiredMetaDataToProperties(t, a, this.path);
      for (const u in t._value)
        t._value[u] = this.addMetaDataRecursively(t._value[u], u);
    } else if (l === Ne.Array) {
      t = It.addRequiredMetaDataToProperties(t, a, this.path);
      for (const u in t._value)
        t._value[u] = this.addMetaDataRecursively(t._value[u], u, !0);
    } else
      t = It.addRequiredMetaDataToProperties(t, a, this.path);
    return this.path.pop(), t;
  }
  /**
   * This method fills metadata for properties that dont have metadata.
   * it fills those required metadata based on the property type
   *
   * @example
   * From this:
   * ```js
   * {
   *      name: "malik najjar"
   * }
   * ```
   * To this:
   * ```js
   * {
   *      name: {
              _path: ["root", "name"],
              _key: "name",
              _valueType: "string",
              _value: "malik najjar"
          }
   * }
   * ```
   *
   * @param {Property} field is the primitive type that will be filled with default meta data
   * @param {string} key is the key of the property
   * @param {string[]} path is an array that represents the path of the property
   * @returns {AnyObject} the new object filled with meta data
   */
  static addRequiredMetaDataToProperties(t, r, s) {
    s = Array.from(s);
    let a = Vc(af);
    return a._path = s, a._key = r, wt(t) === Ne.Object && "_value" in t ? (a._value = t._value, a._valueType = wt(t._value), a = Gw(a, t)) : (a._value = t, a._valueType = wt(t)), a._valueType === Ne.Null || typeof t._fieldType > "u" ? a._fieldType = hf(a._valueType) : a._fieldType = t._fieldType, a;
  }
  /**
   * This method gives the ability to iterate over parsed data object easily
   * with a simple for loop syntax
   *
   * @example
   * ```ts
   * const data = new Data('{"name": "malik"}', 'json')
   * for (const [obj, path] of data.iterateOverProperties()) {
   *      console.log(path)
   *      console.log(obj)
   * }
   * ```
   */
  *iterateOverProperties(t) {
    if (t == null && (t = this.parsedData), t._valueType === Ne.Object) {
      yield [t, t._path];
      const r = t._value;
      for (const s in r)
        yield* this.iterateOverProperties(r[s]);
    } else if (t._valueType === Ne.Array) {
      yield [t, t._path];
      const r = t._value;
      for (const s in r)
        yield* this.iterateOverProperties(r[s]);
    } else
      yield [t, t._path];
  }
  /**
   * This method normalizes the _rule private parameter of a property
   * @example
   * Converts this:
   * ```js
   * {
   *      _rules: ["READ_ONLY", "DELETE_DISABLED"]
   * }
   * ```
   * To this:
   * ```js
   * {
   *      _rules: [
   *          {
   *              rule: "READ_ONLY",
   *              params: null
   *          },
   *          {
   *              rule: "DELETE_DISABLED",
   *              params: null
   *          }
   *      ]
   * }
   * ```
   */
  normalizingRules() {
    for (const [t] of this.iterateOverProperties())
      if (t._rules !== void 0)
        for (let r = 0; r < t._rules.length; r++)
          wt(t._rules[r]) === Ne.String && (t._rules[r] = {
            rule: t._rules[r],
            params: void 0
          });
  }
  /**
   * This method adds an object property.
   */
  addProperty(t) {
    const r = It.convertPathArrayToStringPathFormat(t._path);
    Ie.set(this.parsedData, r, t);
  }
  /**
   * This method adds an array element.
   */
  addElement(t) {
    const r = Ie.cloneDeep(t._path);
    r.pop();
    const s = It.convertPathArrayToStringPathFormat(r), a = r.length === 1 ? "" : "._value";
    Ie.get(this.parsedData, s + a).push(t);
  }
  /**
   * This method removes an array element or an object property.
   */
  removeData(t) {
    const r = It.convertPathArrayToStringPathFormat(t);
    Ie.unset(this.parsedData, r);
    const s = Ie.last(t);
    if (wt(s) === Ne.Number) {
      t.pop();
      const a = t.length === 1 ? "" : "._value", l = It.convertPathArrayToStringPathFormat(t) + a, u = Ie.get(this.parsedData, l), f = It.resetArrayIndexes(u);
      for (let d = 0; d < f.length; d++) {
        f[d]._key = d;
        const g = f[d]._path.length;
        f[d]._path[g - 1] = d;
      }
      Ie.set(this.parsedData, l, f);
    }
  }
  /**
   * This method converts this._path array into a js string path thats usable with lodash
   * @param {boolean} forParsedData is boolean that will make the function generate a path for data that has meta data in it
   */
  static convertPathArrayToStringPathFormat(t, r = !0) {
    let s = "";
    for (let a = 0; a < t.length; a++) {
      const l = t[a];
      wt(l) === Ne.String ? a === 0 ? s += `${l}${r ? "._value" : ""}` : a === t.length - 1 ? s += `.${l}` : s += `.${l}${r ? "._value" : ""}` : wt(l) === Ne.Number && (a === t.length - 1 ? s += `[${l}]` : s += `[${l}]${r ? "._value" : ""}`);
    }
    return s.substring(5);
  }
  /**
   * This method resets the indexes of the array when there is an empty element in an array
   */
  static resetArrayIndexes(t) {
    return Ie.compact(t);
  }
}
class wE {
  constructor(t, r) {
    B(this, "data");
    B(this, "params");
    B(this, "generatedHTML", document.createElement("null"));
    this.params = r, this.data = t, this.drawData();
  }
  /**
   * This method returns the HTMLElement based on the data
   */
  drawData() {
    const t = document.createElement("div");
    t.classList.add("guifierMainWrapper");
    const r = el(this.data.parsedData, this.data, this.params);
    this.params.flipBackgroundColors && (r.showSecondaryColors = !r.showSecondaryColors);
    let s;
    this.params.withoutContainer ? s = r.draw() : s = r.drawContentWithContainer(), t.append(s);
    const a = s.querySelector(".guifierContainerHeaderButtons");
    xn.addingEventListenerForHeaderButtons(a, r, r), this.generatedHTML = t;
  }
  /**
   * This method returns the generated HTMLElement
   */
  getGeneratedHTML() {
    return this.generatedHTML;
  }
}
class bE {
  constructor(t) {
    B(this, "params");
    B(this, "data");
    B(this, "view");
    B(this, "containerElement", null);
    B(this, "guifierElement", null);
    try {
      this.params = cw.parse(t), this.checkIfMainElementExist(), this.setData(this.params.data, this.params.dataType);
    } catch (r) {
      console.error(r), this.drawErrorHtmlElement(r);
    }
  }
  /**
   * This function draws the generated htmlElement from the data into params element
   */
  drawGeneratedHtmlElement() {
    this.containerElement !== null && this.containerElement.append(this.getGeneratedHtmlElement());
  }
  /**
   * This function draws the generated htmlElement from the data into params element
   */
  drawErrorHtmlElement(t) {
    this.guifierElement = this.drawErrorElement(t), this.containerElement !== null && this.containerElement.append(this.guifierElement);
  }
  /**
   * This function throws an error if it didnt find the params element
   */
  checkIfMainElementExist() {
    if (document.querySelector(this.params.elementSelector) === null)
      throw new Error("Did not find the Main Element");
  }
  /**
   * This function returns the generate htmlElement
   */
  getGeneratedHtmlElement() {
    return this.guifierElement = this.view.getGeneratedHTML(), this.guifierElement;
  }
  /**
   * This method gets the current state of the data from the GUI
   */
  getData(t) {
    return this.data.getData(t);
  }
  /**
   * This method empties the main element
   */
  emptyThisElement() {
    this.guifierElement !== null && this.guifierElement.remove();
  }
  /**
   * This method sets new data. you can use it to change the data shown in the Guifier element
   */
  setData(t, r) {
    this.containerElement = document.querySelector(this.params.elementSelector);
    try {
      this.params.data = t, this.params.dataType = r, this.data = new It(t, r, this.params), this.view = new wE(this.data, this.params), this.emptyThisElement(), this.drawGeneratedHtmlElement();
    } catch (s) {
      console.error(s), this.emptyThisElement(), this.drawErrorHtmlElement(s);
    }
  }
  /**
   * This function will draw an error on the element that has the this.params.elementId
   */
  drawErrorElement(t) {
    const r = document.createElement("div");
    r.classList.add("guifierErrorContainer");
    const s = document.createElement("div");
    s.classList.add("guifierErrorContainerError"), s.innerHTML = "Error Occured", r.append(s);
    const a = document.createElement("pre");
    return a.classList.add("guifierErrorContainerContent"), a.style.whiteSpace = "pre-wrap", a.innerHTML = t, r.append(a), r;
  }
}



/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["js/core","css/app","css/cover","css/signin","css/dashboard"], function() { return __webpack_exec__("./assets/js/controllers/app-setting-form-controller.js"), __webpack_exec__("./assets/js/controllers/auto-complete-controller.js"), __webpack_exec__("./assets/js/controllers/branch-links-controller.js"), __webpack_exec__("./assets/js/controllers/delayed-forward-controller.js"), __webpack_exec__("./assets/js/controllers/detail-tabs-controller.js"), __webpack_exec__("./assets/js/controllers/filter-grid-controller.js"), __webpack_exec__("./assets/js/controllers/guifier-controller.js"), __webpack_exec__("./assets/js/controllers/image-preview-controller.js"), __webpack_exec__("./assets/js/controllers/kanban-controller.js"), __webpack_exec__("./assets/js/controllers/member-card-profile-controller.js"), __webpack_exec__("./assets/js/controllers/member-mobile-card-profile-controller.js"), __webpack_exec__("./assets/js/controllers/member-mobile-card-pwa-controller.js"), __webpack_exec__("./assets/js/controllers/member-unique-email-controller.js"), __webpack_exec__("./assets/js/controllers/member-verify-form-controller.js"), __webpack_exec__("./assets/js/controllers/modal-opener-controller.js"), __webpack_exec__("./assets/js/controllers/nav-bar-controller.js"), __webpack_exec__("./assets/js/controllers/outlet-button-controller.js"), __webpack_exec__("./assets/js/controllers/permission-add-role-controller.js"), __webpack_exec__("./assets/js/controllers/revoke-form-controller.js"), __webpack_exec__("./assets/js/controllers/role-add-member-controller.js"), __webpack_exec__("./assets/js/controllers/role-add-permission-controller.js"), __webpack_exec__("./assets/js/controllers/session-extender-controller.js"), __webpack_exec__("./plugins/Activities/assets/js/controllers/approve-and-assign-auth-controller.js"), __webpack_exec__("./plugins/Activities/assets/js/controllers/renew-auth-controller.js"), __webpack_exec__("./plugins/Activities/assets/js/controllers/request-auth-controller.js"), __webpack_exec__("./plugins/Awards/Assets/js/controllers/award-form-controller.js"), __webpack_exec__("./plugins/Awards/Assets/js/controllers/rec-add-controller.js"), __webpack_exec__("./plugins/Awards/Assets/js/controllers/rec-bulk-edit-controller.js"), __webpack_exec__("./plugins/Awards/Assets/js/controllers/rec-edit-controller.js"), __webpack_exec__("./plugins/Awards/Assets/js/controllers/rec-quick-edit-controller.js"), __webpack_exec__("./plugins/Awards/Assets/js/controllers/rec-table-controller.js"), __webpack_exec__("./plugins/Awards/Assets/js/controllers/recommendation-kanban-controller.js"), __webpack_exec__("./plugins/GitHubIssueSubmitter/assets/js/controllers/github-submitter-controller.js"), __webpack_exec__("./plugins/Officers/assets/js/controllers/assign-officer-controller.js"), __webpack_exec__("./plugins/Officers/assets/js/controllers/office-form-controller.js"), __webpack_exec__("./plugins/Officers/assets/js/controllers/officer-roster-search-controller.js"), __webpack_exec__("./plugins/Officers/assets/js/controllers/officer-roster-table-controller.js"), __webpack_exec__("./assets/css/app.css"), __webpack_exec__("./assets/css/signin.css"), __webpack_exec__("./assets/css/cover.css"), __webpack_exec__("./assets/css/dashboard.css"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=controllers.js.map